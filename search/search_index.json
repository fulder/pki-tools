{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PKI Tools \u00b6 PKI tools exposes a high level cryptography API and wrappers for e.g.: Loading certificates from PEM strings/files/cryptography object into a pydantic model including all x509 v3 extensions Checking revocation of certificates using OCSP with CRL fallback Creating Certs, CSR, CRL easy with pure pydantic objects to e.g. get a PEM file Install \u00b6 pip install pki-tools Chat \u00b6 Discord Chat Log level \u00b6 pki-tools use loguru library for logging. Where the default log level is DEBUG , if you want to change it you could e.g. use the LOGURU_LEVEL environment variable. Features \u00b6 Checking Revocation - checking revocation status of certificates using OCSP and/or CRL Creating x509 objects \u00b6 Certificate CertificateSigningRequest Chain OCSP Create Self Signed Create Cross Signed Create and sign Create from certificates Create request Create response DSA EllipticCurve ED448 ED25519 RSA generate generate generate generate generate Loading x509 objects \u00b6 Certificate CertificateSigningRequest Chain OCSP from_pem_string from_pem_string from_pem_string Request.from_pem_string Response.from_pem_string from_file from_file from_file Request.from_file Response.from_file from_cryptography from_cryptography from_cryptography Request.from_cryptography Response.from_cryptography from_uri N/A from_uri N/A from_server N/A N/A N/A DSA EllipticCurve ED448 ED25519 RSA from_pem_string from_pem_string from_pem_string from_pem_string from_pem_string from_file from_file from_file from_file from_file from_cryptography from_cryptography from_cryptography from_cryptography from_cryptography Saving x509 objects \u00b6 Certificate CertificateSigningRequest Chain OCSP to_file to_file to_file Request.to_file Response.to_file DSA EllipticCurve ED448 ED25519 RSA to_file to_file to_file to_file to_file","title":"Home"},{"location":"#pki-tools","text":"PKI tools exposes a high level cryptography API and wrappers for e.g.: Loading certificates from PEM strings/files/cryptography object into a pydantic model including all x509 v3 extensions Checking revocation of certificates using OCSP with CRL fallback Creating Certs, CSR, CRL easy with pure pydantic objects to e.g. get a PEM file","title":"PKI Tools"},{"location":"#install","text":"pip install pki-tools","title":"Install"},{"location":"#chat","text":"Discord Chat","title":"Chat"},{"location":"#log-level","text":"pki-tools use loguru library for logging. Where the default log level is DEBUG , if you want to change it you could e.g. use the LOGURU_LEVEL environment variable.","title":"Log level"},{"location":"#features","text":"Checking Revocation - checking revocation status of certificates using OCSP and/or CRL","title":"Features"},{"location":"#creating-x509-objects","text":"Certificate CertificateSigningRequest Chain OCSP Create Self Signed Create Cross Signed Create and sign Create from certificates Create request Create response DSA EllipticCurve ED448 ED25519 RSA generate generate generate generate generate","title":"Creating x509 objects"},{"location":"#loading-x509-objects","text":"Certificate CertificateSigningRequest Chain OCSP from_pem_string from_pem_string from_pem_string Request.from_pem_string Response.from_pem_string from_file from_file from_file Request.from_file Response.from_file from_cryptography from_cryptography from_cryptography Request.from_cryptography Response.from_cryptography from_uri N/A from_uri N/A from_server N/A N/A N/A DSA EllipticCurve ED448 ED25519 RSA from_pem_string from_pem_string from_pem_string from_pem_string from_pem_string from_file from_file from_file from_file from_file from_cryptography from_cryptography from_cryptography from_cryptography from_cryptography","title":"Loading x509 objects"},{"location":"#saving-x509-objects","text":"Certificate CertificateSigningRequest Chain OCSP to_file to_file to_file Request.to_file Response.to_file DSA EllipticCurve ED448 ED25519 RSA to_file to_file to_file to_file to_file","title":"Saving x509 objects"},{"location":"examples/certificate/","text":"Examples \u00b6 Create self signed certificate \u00b6 import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=name, validity=validity, ) cert.sign(RSAKeyPair.generate(), SHA512) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 000000000000000000000000D35C0881 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:29.527993+00:00' Not Before: '2024-03-18 19:33:29.527980+00:00' Create cross signed certificate \u00b6 import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) print(cert) Print output Issuer: 'CN: Issuer' Serial Number: 0000000000000000000000003C267E6C Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:25.178142+00:00' Not Before: '2024-03-18 19:33:25.178128+00:00' InitCryptoParser.from_pem_string \u00b6 cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2 InitCryptoParser.from_file \u00b6 cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- from pki_tools import Certificate cert = Certificate.from_file(\"cert.pem\") print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 243040E9C848CFB6A52091A3FFF0CD2FB3EAD07A Signature Algorithm: SHA512 Signature Value: |- 31DE88AF8907A676E5A7EA19549AD6820612F0A8F268B9D3FB5C4FE947D3726DE71F9B00A80F2462 3C19EC3FD24A3B254DCEF12CB79D3AD59CB720292262A2DEADEC332158E48A4DCB894C23ACAF6583 80942F178F7265F83E7F975F016C1792B693C2327446820737F2A9D1366F80095984A90714D9EA4F 695AB9B8CC233785EA4FF7A3A1D909F055F377EE61BCC12BAAD08F316497104DFA69765D7D5A04C2 9892A8DBB1F2E997B980294899E7C8F1BBAFC519387A3BC7DFAEBF73890051C01CAE94C046C738AD ABF114A1311E2AFB625F95854DEB44D7D104ECE8F3CBA73AAA4365C028CAE3D585EAC980D88064D9 33CBC951F82DE45CFD7422F8E8FB6A4D Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 public_exponent_e: '65537' Validity: Not After: '2024-03-17 13:43:57+00:00' Not Before: '2024-03-16 13:43:57+00:00' Version: 2 InitCryptoParser.to_file \u00b6 cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) cert.to_file(\"out_cert.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE-----","title":"Examples"},{"location":"examples/certificate/#examples","text":"","title":"Examples"},{"location":"examples/certificate/#create-self-signed-certificate","text":"import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=name, validity=validity, ) cert.sign(RSAKeyPair.generate(), SHA512) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 000000000000000000000000D35C0881 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:29.527993+00:00' Not Before: '2024-03-18 19:33:29.527980+00:00'","title":"Create self signed certificate"},{"location":"examples/certificate/#create-cross-signed-certificate","text":"import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) print(cert) Print output Issuer: 'CN: Issuer' Serial Number: 0000000000000000000000003C267E6C Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:25.178142+00:00' Not Before: '2024-03-18 19:33:25.178128+00:00'","title":"Create cross signed certificate"},{"location":"examples/certificate/#initcryptoparserfrom_pem_string","text":"cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2","title":"InitCryptoParser.from_pem_string"},{"location":"examples/certificate/#initcryptoparserfrom_file","text":"cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- from pki_tools import Certificate cert = Certificate.from_file(\"cert.pem\") print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 243040E9C848CFB6A52091A3FFF0CD2FB3EAD07A Signature Algorithm: SHA512 Signature Value: |- 31DE88AF8907A676E5A7EA19549AD6820612F0A8F268B9D3FB5C4FE947D3726DE71F9B00A80F2462 3C19EC3FD24A3B254DCEF12CB79D3AD59CB720292262A2DEADEC332158E48A4DCB894C23ACAF6583 80942F178F7265F83E7F975F016C1792B693C2327446820737F2A9D1366F80095984A90714D9EA4F 695AB9B8CC233785EA4FF7A3A1D909F055F377EE61BCC12BAAD08F316497104DFA69765D7D5A04C2 9892A8DBB1F2E997B980294899E7C8F1BBAFC519387A3BC7DFAEBF73890051C01CAE94C046C738AD ABF114A1311E2AFB625F95854DEB44D7D104ECE8F3CBA73AAA4365C028CAE3D585EAC980D88064D9 33CBC951F82DE45CFD7422F8E8FB6A4D Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 public_exponent_e: '65537' Validity: Not After: '2024-03-17 13:43:57+00:00' Not Before: '2024-03-16 13:43:57+00:00' Version: 2","title":"InitCryptoParser.from_file"},{"location":"examples/certificate/#initcryptoparserto_file","text":"cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) cert.to_file(\"out_cert.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE-----","title":"InitCryptoParser.to_file"},{"location":"examples/certificate_from_cryptography/","text":"Example \u00b6 crypto_cert from cryptography import x509 cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" crypto_cert = x509.load_pem_x509_certificate(cert_pem.encode()) from pki_tools import Certificate cert = Certificate.from_cryptography(crypto_cert) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2","title":"Example"},{"location":"examples/certificate_from_cryptography/#example","text":"crypto_cert from cryptography import x509 cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" crypto_cert = x509.load_pem_x509_certificate(cert_pem.encode()) from pki_tools import Certificate cert = Certificate.from_cryptography(crypto_cert) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2","title":"Example"},{"location":"examples/certificate_from_server/","text":"Example \u00b6 from pki_tools import Certificate cert = Certificate.from_server(\"https://revoked-isrgrootx1.letsencrypt.org\") print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://r3.o.lencr.org Access Method: OCSP - Access Location: name: UniformResourceIdentifier value: http://r3.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Basic Constraints (critical): CA: false Certificate Policies: - Policy 2.23.140.1.2.1: [] Extended Key Usage: - Server Authentication - Client Authentication Key Usage (critical): Digital Signature, Key Encipherment Subject Alternative Name: - name: DNSName value: revoked-isrgrootx1.letsencrypt.org Subject Key Identifier: Subject Key Identifier: 17580EEBFC5C74F8FCA9E7D26B7B46C2CAA4CB65 Issuer: 'C: US, CN: R3, O: Let''s Encrypt' Serial Number: 3AB360B2E141EE0A0A5D7E07405B788D012 Signature Algorithm: SHA256 Signature Value: |- 6524BFAA0418AC033CA8AE9B7D26270A0FD01D19C0D9C24DF62443049F751DAACC38DCD0F8D1B073 BA69A597430D81417621A83B1AFBF1DA8BB89A8A9A66C1872214219F1AF0F538E3492935FBED9B07 2753E1979754ADA825AE779F25A60E6168FE8B5A349A645CF53E8B92C4C89E48A10644B886DC5C45 F1BA190FA21F5D9D3797EEF438BB43A0C7F3AD24DC5A362573B93807C63E967C34412AF06484192E EABBE0F36E586457631452550F57EECCC70CA2D18033219970CA585B7F9E048D079267419A5853B0 91EC434E7486F0F2CEBB25A83E67906B25253D151C4648623AF65085D29CDA54A35AB69CF46FE5C5 233B8883E07F8084D1E4BD044D3AFA4F Subject: 'CN: revoked-isrgrootx1.letsencrypt.org' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 public_exponent_e: '65537' Validity: Not After: '2024-06-18 15:00:15+00:00' Not Before: '2024-03-20 15:00:16+00:00' Version: 2","title":"Example"},{"location":"examples/certificate_from_server/#example","text":"from pki_tools import Certificate cert = Certificate.from_server(\"https://revoked-isrgrootx1.letsencrypt.org\") print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://r3.o.lencr.org Access Method: OCSP - Access Location: name: UniformResourceIdentifier value: http://r3.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Basic Constraints (critical): CA: false Certificate Policies: - Policy 2.23.140.1.2.1: [] Extended Key Usage: - Server Authentication - Client Authentication Key Usage (critical): Digital Signature, Key Encipherment Subject Alternative Name: - name: DNSName value: revoked-isrgrootx1.letsencrypt.org Subject Key Identifier: Subject Key Identifier: 17580EEBFC5C74F8FCA9E7D26B7B46C2CAA4CB65 Issuer: 'C: US, CN: R3, O: Let''s Encrypt' Serial Number: 3AB360B2E141EE0A0A5D7E07405B788D012 Signature Algorithm: SHA256 Signature Value: |- 6524BFAA0418AC033CA8AE9B7D26270A0FD01D19C0D9C24DF62443049F751DAACC38DCD0F8D1B073 BA69A597430D81417621A83B1AFBF1DA8BB89A8A9A66C1872214219F1AF0F538E3492935FBED9B07 2753E1979754ADA825AE779F25A60E6168FE8B5A349A645CF53E8B92C4C89E48A10644B886DC5C45 F1BA190FA21F5D9D3797EEF438BB43A0C7F3AD24DC5A362573B93807C63E967C34412AF06484192E EABBE0F36E586457631452550F57EECCC70CA2D18033219970CA585B7F9E048D079267419A5853B0 91EC434E7486F0F2CEBB25A83E67906B25253D151C4648623AF65085D29CDA54A35AB69CF46FE5C5 233B8883E07F8084D1E4BD044D3AFA4F Subject: 'CN: revoked-isrgrootx1.letsencrypt.org' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 public_exponent_e: '65537' Validity: Not After: '2024-06-18 15:00:15+00:00' Not Before: '2024-03-20 15:00:16+00:00' Version: 2","title":"Example"},{"location":"examples/certificate_from_uri/","text":"Example \u00b6 from pki_tools import Certificate cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2","title":"Example"},{"location":"examples/certificate_from_uri/#example","text":"from pki_tools import Certificate cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2","title":"Example"},{"location":"examples/chain/","text":"Examples \u00b6 Create chain \u00b6 import datetime from pki_tools import ( Name, RSAKeyPair, SHA512, Chain, Certificate, Validity, ) issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) # Create self-signed issuer cert issuer_cert = Certificate( subject=issuer, issuer=issuer, validity=validity, ) issuer_cert.sign(issuer_key, SHA512) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) # Create certificate singed by issuer key cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) chain = Chain(certificates=[issuer_cert, cert]) print(chain) Print output ----------Certificate #1---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000F324B06B Signature Algorithm: SHA512 Subject: 'CN: Issuer' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- ----------Certificate #2---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000803635E6 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- Chain certificate count: 2 InitCryptoParser.from_pem_string \u00b6 chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2 InitCryptoParser.from_file \u00b6 chain.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- from pki_tools import Chain chain = Chain.from_file(\"chain.pem\") print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2 InitCryptoParser.to_file \u00b6 chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) chain.to_file(\"out_chain.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE-----","title":"Examples"},{"location":"examples/chain/#examples","text":"","title":"Examples"},{"location":"examples/chain/#create-chain","text":"import datetime from pki_tools import ( Name, RSAKeyPair, SHA512, Chain, Certificate, Validity, ) issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) # Create self-signed issuer cert issuer_cert = Certificate( subject=issuer, issuer=issuer, validity=validity, ) issuer_cert.sign(issuer_key, SHA512) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) # Create certificate singed by issuer key cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) chain = Chain(certificates=[issuer_cert, cert]) print(chain) Print output ----------Certificate #1---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000F324B06B Signature Algorithm: SHA512 Subject: 'CN: Issuer' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- ----------Certificate #2---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000803635E6 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- Chain certificate count: 2","title":"Create chain"},{"location":"examples/chain/#initcryptoparserfrom_pem_string","text":"chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"InitCryptoParser.from_pem_string"},{"location":"examples/chain/#initcryptoparserfrom_file","text":"chain.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- from pki_tools import Chain chain = Chain.from_file(\"chain.pem\") print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"InitCryptoParser.from_file"},{"location":"examples/chain/#initcryptoparserto_file","text":"chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) chain.to_file(\"out_chain.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE-----","title":"InitCryptoParser.to_file"},{"location":"examples/chain_from_cryptography/","text":"Certificates.from_cryptography \u00b6 chain_pem from cryptography import x509 chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" crypto_certs = x509.load_pem_x509_certificates(chain_pem.encode()) from pki_tools import Chain chain = Chain.from_cryptography(crypto_certs) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"Certificates.from_cryptography"},{"location":"examples/chain_from_cryptography/#certificatesfrom_cryptography","text":"chain_pem from cryptography import x509 chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" crypto_certs = x509.load_pem_x509_certificates(chain_pem.encode()) from pki_tools import Chain chain = Chain.from_cryptography(crypto_certs) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"Certificates.from_cryptography"},{"location":"examples/chain_from_uri/","text":"Certificates.from_uri \u00b6 from pki_tools import Chain chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\", ] ) print(chain) Print output","title":"Certificates.from_uri"},{"location":"examples/chain_from_uri/#certificatesfrom_uri","text":"from pki_tools import Chain chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\", ] ) print(chain) Print output","title":"Certificates.from_uri"},{"location":"examples/check_revocation/","text":"Examples \u00b6 from pki_tools import Certificate, Chain, is_revoked chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/2024/r11.pem\", \"https://letsencrypt.org/certs/2024/r10.pem\", ] ) valid_cert = Certificate.from_server( \"https://valid-isrgrootx1.letsencrypt.org\" ) revoked_cert = Certificate.from_server( \"https://revoked-isrgrootx1.letsencrypt.org\" ) if not is_revoked(valid_cert, chain): print(\"Valid cert not revoked\") if is_revoked(revoked_cert, chain): print(\"Cert revoked\") Print output Valid cert not revoked Cert revoked Only OCSP \u00b6 from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_server(\"https://crt.sh/?d=16907827965\") chain = Chain.from_uri( [ \"http://crt.sectigo.com/SectigoPublicServerAuthenticationCAOVR36.crt\", \"https://crt.sh/?d=4256644734\", ] ) if is_revoked(cert, chain, revoke_mode=RevokeMode.OCSP_ONLY): print(\"Cert revoked\") Print output Cert revoked Only CRL \u00b6 from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", ] ) if not is_revoked(cert, chain, revoke_mode=RevokeMode.CRL_ONLY): print(\"Cert not revoked\") Print output Cert not revoked For different ways of loading certificate and chain see: [Loading objects][loading-objects].","title":"Examples"},{"location":"examples/check_revocation/#examples","text":"from pki_tools import Certificate, Chain, is_revoked chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/2024/r11.pem\", \"https://letsencrypt.org/certs/2024/r10.pem\", ] ) valid_cert = Certificate.from_server( \"https://valid-isrgrootx1.letsencrypt.org\" ) revoked_cert = Certificate.from_server( \"https://revoked-isrgrootx1.letsencrypt.org\" ) if not is_revoked(valid_cert, chain): print(\"Valid cert not revoked\") if is_revoked(revoked_cert, chain): print(\"Cert revoked\") Print output Valid cert not revoked Cert revoked","title":"Examples"},{"location":"examples/check_revocation/#only-ocsp","text":"from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_server(\"https://crt.sh/?d=16907827965\") chain = Chain.from_uri( [ \"http://crt.sectigo.com/SectigoPublicServerAuthenticationCAOVR36.crt\", \"https://crt.sh/?d=4256644734\", ] ) if is_revoked(cert, chain, revoke_mode=RevokeMode.OCSP_ONLY): print(\"Cert revoked\") Print output Cert revoked","title":"Only OCSP"},{"location":"examples/check_revocation/#only-crl","text":"from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", ] ) if not is_revoked(cert, chain, revoke_mode=RevokeMode.CRL_ONLY): print(\"Cert not revoked\") Print output Cert not revoked For different ways of loading certificate and chain see: [Loading objects][loading-objects].","title":"Only CRL"},{"location":"examples/csr/","text":"Examples \u00b6 Create CSR \u00b6 from pki_tools import ( Name, CertificateSigningRequest, RSAKeyPair, SHA512, ) name = Name(cn=[\"Cert CN\"]) csr = CertificateSigningRequest(subject=name) csr.sign(RSAKeyPair.generate(), SHA512) print(csr.pem_string) Print output -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBALsMBs6Ty4ztSLrIj/2kEtUd+l/UkvD/oC8UTouZjfaP VbPcTuhi7RgeiKMafyHBGIp5PxgF+q5TlrIbNIvb7mQAuNhQfJOqNw/yVSVbEyo0 zw7mYyn58orObtKJYuK61JC/0XEklEreUom+BoLDwK3D22DUzgKkle9DYkybxJ/M wYcWqAe326qi/bBpLSSckGk7GF0l5UuKg0+Sgrok9oJY0MJgyrDlzhDVHlTAvI7s +mlFBSDZYj9Np2o/LI/7NZHXmq6m93W7wqo+eLkBlbnPu6QFjQKrPn7Y3Oy2D2gn SVtGhRRCjcbCDlcut7Jl6E9QTxDBdb0eHPpml5HoGt0CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQANicKRuvIhgbj0wM+EiDxtXzeR33Z8RM14bVJKnH7/hMwyyZ4B wBcSWwlmSYig5l9uBodHxKklDd9Avemzi0oREV2zDC6IGGvyvryPvaMlz8WgGMCr 5OMJid3YLMSDNhu4DhIia0mFNaV5cu1E6tQ4xVXeYmcJ6VTC44WgWUFvHYcILhZD XDuDKsTmWS04WmfPDjH9PCdsXgpPnC7jsWdhcfPFgaT0Q52VU3rXk1mL0gxXvmK3 6F/d5MdJTMDOfXo9yHMVul/YCROVaszFMTESatw1MEW8vxZCCMzDnRac8U85iUXb RdxgtpmC03zKviUxfCCAFLcsoYu+79bO0rwo -----END CERTIFICATE REQUEST----- InitCryptoParser.from_pem_string \u00b6 csr_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512 InitCryptoParser.from_file \u00b6 csr.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_file(\"csr.pem\") print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512 InitCryptoParser.to_file \u00b6 chain_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) csr.to_file(\"out_csr.pem\") out_cert.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST-----","title":"Examples"},{"location":"examples/csr/#examples","text":"","title":"Examples"},{"location":"examples/csr/#create-csr","text":"from pki_tools import ( Name, CertificateSigningRequest, RSAKeyPair, SHA512, ) name = Name(cn=[\"Cert CN\"]) csr = CertificateSigningRequest(subject=name) csr.sign(RSAKeyPair.generate(), SHA512) print(csr.pem_string) Print output -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBALsMBs6Ty4ztSLrIj/2kEtUd+l/UkvD/oC8UTouZjfaP VbPcTuhi7RgeiKMafyHBGIp5PxgF+q5TlrIbNIvb7mQAuNhQfJOqNw/yVSVbEyo0 zw7mYyn58orObtKJYuK61JC/0XEklEreUom+BoLDwK3D22DUzgKkle9DYkybxJ/M wYcWqAe326qi/bBpLSSckGk7GF0l5UuKg0+Sgrok9oJY0MJgyrDlzhDVHlTAvI7s +mlFBSDZYj9Np2o/LI/7NZHXmq6m93W7wqo+eLkBlbnPu6QFjQKrPn7Y3Oy2D2gn SVtGhRRCjcbCDlcut7Jl6E9QTxDBdb0eHPpml5HoGt0CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQANicKRuvIhgbj0wM+EiDxtXzeR33Z8RM14bVJKnH7/hMwyyZ4B wBcSWwlmSYig5l9uBodHxKklDd9Avemzi0oREV2zDC6IGGvyvryPvaMlz8WgGMCr 5OMJid3YLMSDNhu4DhIia0mFNaV5cu1E6tQ4xVXeYmcJ6VTC44WgWUFvHYcILhZD XDuDKsTmWS04WmfPDjH9PCdsXgpPnC7jsWdhcfPFgaT0Q52VU3rXk1mL0gxXvmK3 6F/d5MdJTMDOfXo9yHMVul/YCROVaszFMTESatw1MEW8vxZCCMzDnRac8U85iUXb RdxgtpmC03zKviUxfCCAFLcsoYu+79bO0rwo -----END CERTIFICATE REQUEST-----","title":"Create CSR"},{"location":"examples/csr/#initcryptoparserfrom_pem_string","text":"csr_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"InitCryptoParser.from_pem_string"},{"location":"examples/csr/#initcryptoparserfrom_file","text":"csr.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_file(\"csr.pem\") print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"InitCryptoParser.from_file"},{"location":"examples/csr/#initcryptoparserto_file","text":"chain_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) csr.to_file(\"out_csr.pem\") out_cert.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST-----","title":"InitCryptoParser.to_file"},{"location":"examples/csr_from_cryptography/","text":"Example \u00b6 crypto_csr from cryptography import x509 csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" crypto_csr = x509.load_pem_x509_csr(csr_pem.encode()) from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_cryptography(crypto_csr) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"Example"},{"location":"examples/csr_from_cryptography/#example","text":"crypto_csr from cryptography import x509 csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" crypto_csr = x509.load_pem_x509_csr(csr_pem.encode()) from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_cryptography(crypto_csr) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"Example"},{"location":"examples/key_pair_dsa/","text":"Note DSA is an old and legacy algorithm. Consider using EllipticCurveKeyPair or RSAKeyPair instead. Examples \u00b6 Generate keypair \u00b6 from pki_tools import DSAKeyPair key_pair = DSAKeyPair.generate(key_size=1024) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_cryptography(crypto_public_key), private_key=DSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443' InitCryptoParser.from_file \u00b6 private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_file(\"public.pem\"), private_key=DSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443' InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443' InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY-----","title":"Key pair dsa"},{"location":"examples/key_pair_dsa/#examples","text":"","title":"Examples"},{"location":"examples/key_pair_dsa/#generate-keypair","text":"from pki_tools import DSAKeyPair key_pair = DSAKeyPair.generate(key_size=1024) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"examples/key_pair_dsa/#initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_cryptography(crypto_public_key), private_key=DSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443'","title":"InitCryptoParser.from_cryptography"},{"location":"examples/key_pair_dsa/#initcryptoparserfrom_file","text":"private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_file(\"public.pem\"), private_key=DSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443'","title":"InitCryptoParser.from_file"},{"location":"examples/key_pair_dsa/#initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443'","title":"InitCryptoParser.from_pem_string"},{"location":"examples/key_pair_dsa/#initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"examples/key_pair_ec/","text":"Examples \u00b6 Generate keypair \u00b6 from pki_tools import EllipticCurveKeyPair, EllipticCurveName key_pair = EllipticCurveKeyPair.generate( curve_name=EllipticCurveName.SECP521R1 ) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_cryptography(crypto_public_key), private_key=EllipticCurvePrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282' InitCryptoParser.from_file \u00b6 private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_file(\"public.pem\"), private_key=EllipticCurvePrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282' InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282' InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY-----","title":"Examples"},{"location":"examples/key_pair_ec/#examples","text":"","title":"Examples"},{"location":"examples/key_pair_ec/#generate-keypair","text":"from pki_tools import EllipticCurveKeyPair, EllipticCurveName key_pair = EllipticCurveKeyPair.generate( curve_name=EllipticCurveName.SECP521R1 ) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"examples/key_pair_ec/#initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_cryptography(crypto_public_key), private_key=EllipticCurvePrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282'","title":"InitCryptoParser.from_cryptography"},{"location":"examples/key_pair_ec/#initcryptoparserfrom_file","text":"private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_file(\"public.pem\"), private_key=EllipticCurvePrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282'","title":"InitCryptoParser.from_file"},{"location":"examples/key_pair_ec/#initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282'","title":"InitCryptoParser.from_pem_string"},{"location":"examples/key_pair_ec/#initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"examples/key_pair_ed25519/","text":"Examples \u00b6 Generate keypair \u00b6 from pki_tools import Ed25519KeyPair key_pair = Ed25519KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_cryptography(crypto_public_key), private_key=Ed25519PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A InitCryptoParser.from_file \u00b6 private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_file(\"public.pem\"), private_key=Ed25519PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY-----","title":"Examples"},{"location":"examples/key_pair_ed25519/#examples","text":"","title":"Examples"},{"location":"examples/key_pair_ed25519/#generate-keypair","text":"from pki_tools import Ed25519KeyPair key_pair = Ed25519KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"examples/key_pair_ed25519/#initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_cryptography(crypto_public_key), private_key=Ed25519PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A","title":"InitCryptoParser.from_cryptography"},{"location":"examples/key_pair_ed25519/#initcryptoparserfrom_file","text":"private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_file(\"public.pem\"), private_key=Ed25519PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A","title":"InitCryptoParser.from_file"},{"location":"examples/key_pair_ed25519/#initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A","title":"InitCryptoParser.from_pem_string"},{"location":"examples/key_pair_ed25519/#initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"examples/key_pair_ed448/","text":"Examples \u00b6 Generate keypair \u00b6 from pki_tools import Ed448KeyPair key_pair = Ed448KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_cryptography(crypto_public_key), private_key=Ed448PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580 InitCryptoParser.from_file \u00b6 private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_file(\"public.pem\"), private_key=Ed448PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580 InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580 InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY-----","title":"Examples"},{"location":"examples/key_pair_ed448/#examples","text":"","title":"Examples"},{"location":"examples/key_pair_ed448/#generate-keypair","text":"from pki_tools import Ed448KeyPair key_pair = Ed448KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"examples/key_pair_ed448/#initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_cryptography(crypto_public_key), private_key=Ed448PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580","title":"InitCryptoParser.from_cryptography"},{"location":"examples/key_pair_ed448/#initcryptoparserfrom_file","text":"private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_file(\"public.pem\"), private_key=Ed448PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580","title":"InitCryptoParser.from_file"},{"location":"examples/key_pair_ed448/#initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580","title":"InitCryptoParser.from_pem_string"},{"location":"examples/key_pair_ed448/#initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"examples/key_pair_rsa/","text":"Examples \u00b6 Generate keypair \u00b6 from pki_tools import RSAKeyPair key_pair = RSAKeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_cryptography(crypto_public_key), private_key=RSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537' InitCryptoParser.from_file \u00b6 private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_file(\"public.pem\"), private_key=RSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537' InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537' InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY-----","title":"Examples"},{"location":"examples/key_pair_rsa/#examples","text":"","title":"Examples"},{"location":"examples/key_pair_rsa/#generate-keypair","text":"from pki_tools import RSAKeyPair key_pair = RSAKeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"examples/key_pair_rsa/#initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_cryptography(crypto_public_key), private_key=RSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537'","title":"InitCryptoParser.from_cryptography"},{"location":"examples/key_pair_rsa/#initcryptoparserfrom_file","text":"private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_file(\"public.pem\"), private_key=RSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537'","title":"InitCryptoParser.from_file"},{"location":"examples/key_pair_rsa/#initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537'","title":"InitCryptoParser.from_pem_string"},{"location":"examples/key_pair_rsa/#initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"examples/ocsp_request/","text":"Examples \u00b6 Create OCSP Request \u00b6 cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(RSAKeyPair.generate(), SHA512) from pki_tools import OCSPRequest req = OCSPRequest( hash_algorithm=SHA512.algorithm, serial_number=cert.serial_number ) req.create(cert, cert) print(req.pem_string) Print output Serial Number: '1419969360' algorithm: SHA512 InitCryptoParser.from_file \u00b6 req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- from pki_tools import OCSPRequest req = OCSPRequest.from_file(\"req.pem\") print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512 InitCryptoParser.from_pem_string \u00b6 pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512 InitCryptoParser.to_file \u00b6 pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) req.to_file(\"out_req.pem\") out_req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST-----","title":"Examples"},{"location":"examples/ocsp_request/#examples","text":"","title":"Examples"},{"location":"examples/ocsp_request/#create-ocsp-request","text":"cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(RSAKeyPair.generate(), SHA512) from pki_tools import OCSPRequest req = OCSPRequest( hash_algorithm=SHA512.algorithm, serial_number=cert.serial_number ) req.create(cert, cert) print(req.pem_string) Print output Serial Number: '1419969360' algorithm: SHA512","title":"Create OCSP Request"},{"location":"examples/ocsp_request/#initcryptoparserfrom_file","text":"req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- from pki_tools import OCSPRequest req = OCSPRequest.from_file(\"req.pem\") print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512","title":"InitCryptoParser.from_file"},{"location":"examples/ocsp_request/#initcryptoparserfrom_pem_string","text":"pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512","title":"InitCryptoParser.from_pem_string"},{"location":"examples/ocsp_request/#initcryptoparserto_file","text":"pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) req.to_file(\"out_req.pem\") out_req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST-----","title":"InitCryptoParser.to_file"},{"location":"examples/ocsp_request_from_cryptography/","text":"Example \u00b6 crypto_ocsp_request from cryptography.hazmat.primitives.hashes import SHA256 from cryptography.x509 import ocsp, load_pem_x509_certificate pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPRequestBuilder() builder = builder.add_certificate(cert, cert, SHA256()) crypto_ocsp_request = builder.build() from pki_tools import OCSPRequest ocsp_request = OCSPRequest.from_cryptography(crypto_ocsp_request) print(ocsp_request) Print output Extensions: {} Serial Number: '206599758257502475477849880650720292246800486522' algorithm: SHA256","title":"Ocsp request from cryptography"},{"location":"examples/ocsp_request_from_cryptography/#example","text":"crypto_ocsp_request from cryptography.hazmat.primitives.hashes import SHA256 from cryptography.x509 import ocsp, load_pem_x509_certificate pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPRequestBuilder() builder = builder.add_certificate(cert, cert, SHA256()) crypto_ocsp_request = builder.build() from pki_tools import OCSPRequest ocsp_request = OCSPRequest.from_cryptography(crypto_ocsp_request) print(ocsp_request) Print output Extensions: {} Serial Number: '206599758257502475477849880650720292246800486522' algorithm: SHA256","title":"Example"},{"location":"examples/ocsp_response/","text":"Examples \u00b6 Create OCSP Response \u00b6 cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert_key_pair = RSAKeyPair.generate() cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(cert_key_pair, SHA512) from pki_tools import OCSPResponse, OcspResponseStatus, OcspCertificateStatus res = OCSPResponse( response_status=OcspResponseStatus.SUCCESSFUL, certificate_status=OcspCertificateStatus.REVOKED, issuer_key_hash=\"ISSUER_HASH\", revocation_time=datetime.datetime.now(), ) res.sign(cert, cert, SHA512, cert_key_pair.private_key, SHA512) print(res) Print output Certificate Status: REVOKED Issuer Key Hash: ISSUER_HASH Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:44:07.812235 InitCryptoParser.from_file \u00b6 res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- from pki_tools import OCSPResponse req = OCSPResponse.from_file(\"res.pem\") print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00 InitCryptoParser.from_pem_string \u00b6 pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00 InitCryptoParser.to_file \u00b6 pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) req.to_file(\"out_res.pem\") out_res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE-----","title":"Examples"},{"location":"examples/ocsp_response/#examples","text":"","title":"Examples"},{"location":"examples/ocsp_response/#create-ocsp-response","text":"cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert_key_pair = RSAKeyPair.generate() cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(cert_key_pair, SHA512) from pki_tools import OCSPResponse, OcspResponseStatus, OcspCertificateStatus res = OCSPResponse( response_status=OcspResponseStatus.SUCCESSFUL, certificate_status=OcspCertificateStatus.REVOKED, issuer_key_hash=\"ISSUER_HASH\", revocation_time=datetime.datetime.now(), ) res.sign(cert, cert, SHA512, cert_key_pair.private_key, SHA512) print(res) Print output Certificate Status: REVOKED Issuer Key Hash: ISSUER_HASH Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:44:07.812235","title":"Create OCSP Response"},{"location":"examples/ocsp_response/#initcryptoparserfrom_file","text":"res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- from pki_tools import OCSPResponse req = OCSPResponse.from_file(\"res.pem\") print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00","title":"InitCryptoParser.from_file"},{"location":"examples/ocsp_response/#initcryptoparserfrom_pem_string","text":"pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00","title":"InitCryptoParser.from_pem_string"},{"location":"examples/ocsp_response/#initcryptoparserto_file","text":"pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) req.to_file(\"out_res.pem\") out_res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE-----","title":"InitCryptoParser.to_file"},{"location":"examples/ocsp_response_from_cryptography/","text":"Example \u00b6 crypto_res import datetime from cryptography.hazmat.primitives import hashes, serialization from cryptography.x509 import ocsp, load_pem_x509_certificate cert_private_key = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAqrALl8McEXwwKIgIo9sHhGht+VCVExRnBmkEmAKTnRc9iZVV Q+slFnobc2y5p3TlBtLEfXed5yzak1NhnzLkfDQYrtUk6X5RREcsOohHT7AxuW/i K3FyZo5PXM5asFf/DQSH6lp/XJPq0g/seUAvDNxbhLbjx5wjGe+6sCsLB/OSbBRz Vmflb8p1XwmYr4LthhPE3kkLfCENVQPLoJOdwMw2qlqG63Qdwvj+wq+smIAauZDO DtxfzWZ82ftH3+qMseiveMPR2Szxz9qi2kSnsHTjdHRlEe5WzHOwa6U/HlPBOVHt IANxm0PHo8Np47ajTG3BUif6C/XUE5Co/Dz5awIDAQABAoIBADYVKN8x2atqo6G8 FKzCglvAcRQdpdaRUOGVlfiKXHZafkuhTw6Bq9M25orIqPy3y7fBQbQVmik9K5ah xV1ZlU8LfMSs0ZDQTvSo7okvVBUaWW8N1eZ5AEwhjGD2G4MjprNbu6sUeKV/Utiz ZfS3UxEqoy7mej7tqKuXq5oVUV33mUwXiT+gx+X688iIlnSMt0XvwrVGfpDnGPqJ DUnNOli6dUDhvmfvs7KH8H8MLPHu9hK1Uq8zm7sMGS3WHb4E0krjNFZtkByy5cvk M4k1QpCl7Q4ym3lpOBoyXkFF/Mdi56Ufvo+75FwGqGamREoZect6TaMRvoDmpVcS I9EemdECgYEA269jlNFz/0fBgZX0mPgaJS7KTiUsTQ/HBMEW7lYLEwCPgQBATR2M mJAJtCdwWvyVu79cRu9ShqoK83tUVzsXYFu1lWE0m/r6qao7p9Pam9jLr6qmLngK wsAX44LatM6duNg6BSD2EteTWArJYOOeRrZnkeb8KKjDelqKcYxHAFsCgYEAxucw JAeQFxCoD+sgtfSapVulASyATTvTfFM6DyqcBMTsm5YU4lik2RuKV5T7hsRCsJGu rSYnstOVkx9B1gHaLYrUF6MYwUcKfJTFhOwutrYqXi1Vsoq3gUrDleGFT5s3+iPR VnHCjkJz/fDOdLgaCiLRBMoclFY1B2SLwzRWODECgYA9f0mXHVMlgUbQKdRBBiL7 ia+kVI+kOuhxkkQDEB8lgKCrchCOBdmX06qDvg6byd14o0cHrHMjs3JBWqLvkGEo 3kNkv8NkbsvAtyDgCFRIEFZkpJbEp2ILxo5pZ/YlazmHxy/mw6Ve/O4IVWyuLMnf 7avskgbAsw2VsMbUpnoxxQKBgHdhdTR60ZH2bli3kDeFq3gKLFwrAIramJGrRlKq CWCXbUfo6Xn9KFwiuoLcqab2jux5U/UazIL5mXHnNdWj4Paqt6fEPWxsHjAt/utL 8rG5Xm6OGTyDI6bXX9LKu//OsudQrimLN/G4kvPcn53Qjdh9kySjxkmGAGgCghxU gldRAoGAWqY4tm8+HjtU0iSnVm+SetjSPxeTeGe9HUU6oM8kalshKLHjs2SdLJAB 1Zc4hUoZuvfIfX63XdshcGZe8wD2P2+ZFxNwnS0XxpwfQto3sTZZWiy8VezPy+js o4E3mb1jZDQvmXey9tE73hGG4RrBNeHsjywfUs5pKHEOOEqKgEQ= -----END RSA PRIVATE KEY----- \"\"\" crypto_private_key = serialization.load_pem_private_key( cert_private_key, password=None ) pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUL/5wxBEYcnkrAfHje6sDrdv9knMwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTkyMzQ1MzlaFw0yNDAzMjEy MzQ1MzlaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQCqsAuXwxwRfDAoiAij2weEaG35UJUTFGcGaQSYApOdFz2JlVVD 6yUWehtzbLmndOUG0sR9d53nLNqTU2GfMuR8NBiu1STpflFERyw6iEdPsDG5b+Ir cXJmjk9czlqwV/8NBIfqWn9ck+rSD+x5QC8M3FuEtuPHnCMZ77qwKwsH85JsFHNW Z+VvynVfCZivgu2GE8TeSQt8IQ1VA8ugk53AzDaqWobrdB3C+P7Cr6yYgBq5kM4O 3F/NZnzZ+0ff6oyx6K94w9HZLPHP2qLaRKewdON0dGUR7lbMc7BrpT8eU8E5Ue0g A3GbQ8ejw2njtqNMbcFSJ/oL9dQTkKj8PPlrAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAKcfkel3elnmZN9vblXfc3nf6AkEpaRhAtjIkPLA9EY6vJCGm6ysjQinHlb+ oOsC+S+1c22Bc8z+b1K8GHkV8EZf9c70WmFTKwSB0JkyQ1xyx9jcPm0al0zxaXQX XertQuzhObayPy8hMbV6Kwmihf0BrR4kwUQFWMAzZ98J5c/jY5UTvEhLN8ntt5k5 IwJofRuEMBmEtRkFR2Qt1K3GJv4Aid94hD+bBOBKZV8MTvRjrU64HOKA25/TEmyf hIRtzvQkCh9z3S2/+zfYKsmDtENWD7dJLw2Ss9cqrJObeYcjjVvDgSQyt1csMtPr 6Y5Qqajflelt51pd55TqVc8d1Js= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPResponseBuilder() builder = builder.add_response( cert=cert, issuer=cert, algorithm=hashes.SHA256(), cert_status=ocsp.OCSPCertStatus.GOOD, this_update=datetime.datetime.now(), next_update=datetime.datetime.now(), revocation_time=None, revocation_reason=None, ).responder_id(ocsp.OCSPResponderEncoding.HASH, cert) crypto_res = builder.sign(crypto_private_key, hashes.SHA256()) from pki_tools import OCSPResponse res = OCSPResponse.from_cryptography(crypto_res) print(res) Print output Certificate Status: GOOD Issuer Key Hash: 975ECC737818C143DD1110ED04BFD8FB76AF836F360D8F776FF44C19AF4C56FC Response Status: SUCCESSFUL","title":"Ocsp response from cryptography"},{"location":"examples/ocsp_response_from_cryptography/#example","text":"crypto_res import datetime from cryptography.hazmat.primitives import hashes, serialization from cryptography.x509 import ocsp, load_pem_x509_certificate cert_private_key = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAqrALl8McEXwwKIgIo9sHhGht+VCVExRnBmkEmAKTnRc9iZVV Q+slFnobc2y5p3TlBtLEfXed5yzak1NhnzLkfDQYrtUk6X5RREcsOohHT7AxuW/i K3FyZo5PXM5asFf/DQSH6lp/XJPq0g/seUAvDNxbhLbjx5wjGe+6sCsLB/OSbBRz Vmflb8p1XwmYr4LthhPE3kkLfCENVQPLoJOdwMw2qlqG63Qdwvj+wq+smIAauZDO DtxfzWZ82ftH3+qMseiveMPR2Szxz9qi2kSnsHTjdHRlEe5WzHOwa6U/HlPBOVHt IANxm0PHo8Np47ajTG3BUif6C/XUE5Co/Dz5awIDAQABAoIBADYVKN8x2atqo6G8 FKzCglvAcRQdpdaRUOGVlfiKXHZafkuhTw6Bq9M25orIqPy3y7fBQbQVmik9K5ah xV1ZlU8LfMSs0ZDQTvSo7okvVBUaWW8N1eZ5AEwhjGD2G4MjprNbu6sUeKV/Utiz ZfS3UxEqoy7mej7tqKuXq5oVUV33mUwXiT+gx+X688iIlnSMt0XvwrVGfpDnGPqJ DUnNOli6dUDhvmfvs7KH8H8MLPHu9hK1Uq8zm7sMGS3WHb4E0krjNFZtkByy5cvk M4k1QpCl7Q4ym3lpOBoyXkFF/Mdi56Ufvo+75FwGqGamREoZect6TaMRvoDmpVcS I9EemdECgYEA269jlNFz/0fBgZX0mPgaJS7KTiUsTQ/HBMEW7lYLEwCPgQBATR2M mJAJtCdwWvyVu79cRu9ShqoK83tUVzsXYFu1lWE0m/r6qao7p9Pam9jLr6qmLngK wsAX44LatM6duNg6BSD2EteTWArJYOOeRrZnkeb8KKjDelqKcYxHAFsCgYEAxucw JAeQFxCoD+sgtfSapVulASyATTvTfFM6DyqcBMTsm5YU4lik2RuKV5T7hsRCsJGu rSYnstOVkx9B1gHaLYrUF6MYwUcKfJTFhOwutrYqXi1Vsoq3gUrDleGFT5s3+iPR VnHCjkJz/fDOdLgaCiLRBMoclFY1B2SLwzRWODECgYA9f0mXHVMlgUbQKdRBBiL7 ia+kVI+kOuhxkkQDEB8lgKCrchCOBdmX06qDvg6byd14o0cHrHMjs3JBWqLvkGEo 3kNkv8NkbsvAtyDgCFRIEFZkpJbEp2ILxo5pZ/YlazmHxy/mw6Ve/O4IVWyuLMnf 7avskgbAsw2VsMbUpnoxxQKBgHdhdTR60ZH2bli3kDeFq3gKLFwrAIramJGrRlKq CWCXbUfo6Xn9KFwiuoLcqab2jux5U/UazIL5mXHnNdWj4Paqt6fEPWxsHjAt/utL 8rG5Xm6OGTyDI6bXX9LKu//OsudQrimLN/G4kvPcn53Qjdh9kySjxkmGAGgCghxU gldRAoGAWqY4tm8+HjtU0iSnVm+SetjSPxeTeGe9HUU6oM8kalshKLHjs2SdLJAB 1Zc4hUoZuvfIfX63XdshcGZe8wD2P2+ZFxNwnS0XxpwfQto3sTZZWiy8VezPy+js o4E3mb1jZDQvmXey9tE73hGG4RrBNeHsjywfUs5pKHEOOEqKgEQ= -----END RSA PRIVATE KEY----- \"\"\" crypto_private_key = serialization.load_pem_private_key( cert_private_key, password=None ) pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUL/5wxBEYcnkrAfHje6sDrdv9knMwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTkyMzQ1MzlaFw0yNDAzMjEy MzQ1MzlaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQCqsAuXwxwRfDAoiAij2weEaG35UJUTFGcGaQSYApOdFz2JlVVD 6yUWehtzbLmndOUG0sR9d53nLNqTU2GfMuR8NBiu1STpflFERyw6iEdPsDG5b+Ir cXJmjk9czlqwV/8NBIfqWn9ck+rSD+x5QC8M3FuEtuPHnCMZ77qwKwsH85JsFHNW Z+VvynVfCZivgu2GE8TeSQt8IQ1VA8ugk53AzDaqWobrdB3C+P7Cr6yYgBq5kM4O 3F/NZnzZ+0ff6oyx6K94w9HZLPHP2qLaRKewdON0dGUR7lbMc7BrpT8eU8E5Ue0g A3GbQ8ejw2njtqNMbcFSJ/oL9dQTkKj8PPlrAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAKcfkel3elnmZN9vblXfc3nf6AkEpaRhAtjIkPLA9EY6vJCGm6ysjQinHlb+ oOsC+S+1c22Bc8z+b1K8GHkV8EZf9c70WmFTKwSB0JkyQ1xyx9jcPm0al0zxaXQX XertQuzhObayPy8hMbV6Kwmihf0BrR4kwUQFWMAzZ98J5c/jY5UTvEhLN8ntt5k5 IwJofRuEMBmEtRkFR2Qt1K3GJv4Aid94hD+bBOBKZV8MTvRjrU64HOKA25/TEmyf hIRtzvQkCh9z3S2/+zfYKsmDtENWD7dJLw2Ss9cqrJObeYcjjVvDgSQyt1csMtPr 6Y5Qqajflelt51pd55TqVc8d1Js= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPResponseBuilder() builder = builder.add_response( cert=cert, issuer=cert, algorithm=hashes.SHA256(), cert_status=ocsp.OCSPCertStatus.GOOD, this_update=datetime.datetime.now(), next_update=datetime.datetime.now(), revocation_time=None, revocation_reason=None, ).responder_id(ocsp.OCSPResponderEncoding.HASH, cert) crypto_res = builder.sign(crypto_private_key, hashes.SHA256()) from pki_tools import OCSPResponse res = OCSPResponse.from_cryptography(crypto_res) print(res) Print output Certificate Status: GOOD Issuer Key Hash: 975ECC737818C143DD1110ED04BFD8FB76AF836F360D8F776FF44C19AF4C56FC Response Status: SUCCESSFUL","title":"Example"},{"location":"funcs/check_revocation/","text":"is_revoked \u00b6 is_revoked(cert: Certificate , chain: Chain , crl_cache_seconds: int = 3600, ocsp_res_cache_seconds: int = 3600, revoke_mode: RevokeMode = RevokeMode . OCSP_FALLBACK_CRL , same_crl_domains: list [ list [ str ]] = None) -> bool Checks if a certificate is revoked using OCSP extension and/or CRL extension. By default, the OCSP is checked first with a fallback to CRL. If you only want to check OCSP or only CRL set the \"revoke_mode\" to either RevokeMode.OCSP_ONLY or RevokeMode.CRL_ONLY Parameters: cert ( Certificate ) \u2013 The Certificate to check revocation for. chain ( Chain ) \u2013 The CA chain including one or more certificates and the issuer of the cert , signer of the OCSP response and CRL issuer. See [Loading Chain][chain] for examples how the chain can be created crl_cache_seconds ( int , default: 3600 ) \u2013 [CRL Only] Specifies how long the CRL should be cached, default is 1 hour. ocsp_res_cache_seconds ( int , default: 3600 ) \u2013 [OCSP Only] Specifies how long the OCSP response should be cached, default is 1 hour. revoke_mode ( RevokeMode , default: RevokeMode . OCSP_FALLBACK_CRL ) \u2013 A RevokeMode specifying how to check for revocation, default is OCSP with CRL fallback same_crl_domains ( list [ list [ str ]] , default: None ) \u2013 A list of lists of domains that are considered to be the same hostname in CRL IDP and cert CDP check. Returns: bool \u2013 True if the certificate is revoked, False otherwise Raises: SignatureVerificationFailed \u2013 When the Chain contains more than one certificate and the trust fails either because of some certificate has expired or some signature in the chain is invalid RevokeCheckFailed \u2013 When both OCSP and CRL checks fail Examples \u00b6 from pki_tools import Certificate, Chain, is_revoked chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/2024/r11.pem\", \"https://letsencrypt.org/certs/2024/r10.pem\", ] ) valid_cert = Certificate.from_server( \"https://valid-isrgrootx1.letsencrypt.org\" ) revoked_cert = Certificate.from_server( \"https://revoked-isrgrootx1.letsencrypt.org\" ) if not is_revoked(valid_cert, chain): print(\"Valid cert not revoked\") if is_revoked(revoked_cert, chain): print(\"Cert revoked\") Print output Valid cert not revoked Cert revoked Only OCSP \u00b6 from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_server(\"https://crt.sh/?d=16907827965\") chain = Chain.from_uri( [ \"http://crt.sectigo.com/SectigoPublicServerAuthenticationCAOVR36.crt\", \"https://crt.sh/?d=4256644734\", ] ) if is_revoked(cert, chain, revoke_mode=RevokeMode.OCSP_ONLY): print(\"Cert revoked\") Print output Cert revoked Only CRL \u00b6 from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", ] ) if not is_revoked(cert, chain, revoke_mode=RevokeMode.CRL_ONLY): print(\"Cert not revoked\") Print output Cert not revoked For different ways of loading certificate and chain see: [Loading objects][loading-objects]. is_revoked_multiple_issuers \u00b6 is_revoked_multiple_issuers(cert: Certificate , cert_issuer: Chain , ocsp_issuer: Chain , crl_issuer: Chain , crl_cache_seconds: int = 3600, ocsp_res_cache_seconds: int = 3600, revoke_mode: RevokeMode = RevokeMode . OCSP_FALLBACK_CRL , same_crl_domains: list [ list [ str ]] = None) -> bool Checks if a certificate is revoked first using the OCSP extension and then the CRL extensions. Note that OCSP has precedence over CRL meaning that if OCSP check is successful this function will return the bool without checking CRL. Otherwise, if OCSP check fails, CRL will be tried next. Parameters: cert ( Certificate ) \u2013 The Certificate to check revocation for. cert_issuer ( Chain ) \u2013 The CA chain including one or more certificates and the issuer of the cert . See [Loading Chain][chain] for examples how the chain can be created. ocsp_issuer ( Chain ) \u2013 The CA chain including one or more certificates used for signing of the OCSP response crl_issuer ( Chain ) \u2013 The CA chain including one or more certificates used for signing the CRL crl_cache_seconds ( int , default: 3600 ) \u2013 [CRL Only] Specifies how long the CRL should be cached, default is 1 hour. ocsp_res_cache_seconds ( int , default: 3600 ) \u2013 [OCSP Only] Specifies how long the OCSP response should be cached, default is 1 hour. revoke_mode ( RevokeMode , default: RevokeMode . OCSP_FALLBACK_CRL ) \u2013 A RevokeMode specifying how to check for revocation, default is OCSP with CRL fallback same_crl_domains ( list [ list [ str ]] , default: None ) \u2013 A list of lists of domains that are considered to be the same hostname in CRL IDP and cert CDP check. Returns: bool \u2013 True if the certificate is revoked, False otherwise Raises: SignatureVerificationFailed \u2013 When the Chain contains more than one certificate and the trust fails either because of some certificate has expired or some signature in the chain is invalid RevokeCheckFailed \u2013 When both OCSP and CRL checks fail","title":"Checking Revocation"},{"location":"funcs/check_revocation/#pki_tools.funcs.check_revocation.is_revoked","text":"is_revoked(cert: Certificate , chain: Chain , crl_cache_seconds: int = 3600, ocsp_res_cache_seconds: int = 3600, revoke_mode: RevokeMode = RevokeMode . OCSP_FALLBACK_CRL , same_crl_domains: list [ list [ str ]] = None) -> bool Checks if a certificate is revoked using OCSP extension and/or CRL extension. By default, the OCSP is checked first with a fallback to CRL. If you only want to check OCSP or only CRL set the \"revoke_mode\" to either RevokeMode.OCSP_ONLY or RevokeMode.CRL_ONLY Parameters: cert ( Certificate ) \u2013 The Certificate to check revocation for. chain ( Chain ) \u2013 The CA chain including one or more certificates and the issuer of the cert , signer of the OCSP response and CRL issuer. See [Loading Chain][chain] for examples how the chain can be created crl_cache_seconds ( int , default: 3600 ) \u2013 [CRL Only] Specifies how long the CRL should be cached, default is 1 hour. ocsp_res_cache_seconds ( int , default: 3600 ) \u2013 [OCSP Only] Specifies how long the OCSP response should be cached, default is 1 hour. revoke_mode ( RevokeMode , default: RevokeMode . OCSP_FALLBACK_CRL ) \u2013 A RevokeMode specifying how to check for revocation, default is OCSP with CRL fallback same_crl_domains ( list [ list [ str ]] , default: None ) \u2013 A list of lists of domains that are considered to be the same hostname in CRL IDP and cert CDP check. Returns: bool \u2013 True if the certificate is revoked, False otherwise Raises: SignatureVerificationFailed \u2013 When the Chain contains more than one certificate and the trust fails either because of some certificate has expired or some signature in the chain is invalid RevokeCheckFailed \u2013 When both OCSP and CRL checks fail","title":"is_revoked"},{"location":"funcs/check_revocation/#pki_tools.funcs.check_revocation.is_revoked--examples","text":"from pki_tools import Certificate, Chain, is_revoked chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/2024/r11.pem\", \"https://letsencrypt.org/certs/2024/r10.pem\", ] ) valid_cert = Certificate.from_server( \"https://valid-isrgrootx1.letsencrypt.org\" ) revoked_cert = Certificate.from_server( \"https://revoked-isrgrootx1.letsencrypt.org\" ) if not is_revoked(valid_cert, chain): print(\"Valid cert not revoked\") if is_revoked(revoked_cert, chain): print(\"Cert revoked\") Print output Valid cert not revoked Cert revoked","title":"Examples"},{"location":"funcs/check_revocation/#pki_tools.funcs.check_revocation.is_revoked--only-ocsp","text":"from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_server(\"https://crt.sh/?d=16907827965\") chain = Chain.from_uri( [ \"http://crt.sectigo.com/SectigoPublicServerAuthenticationCAOVR36.crt\", \"https://crt.sh/?d=4256644734\", ] ) if is_revoked(cert, chain, revoke_mode=RevokeMode.OCSP_ONLY): print(\"Cert revoked\") Print output Cert revoked","title":"Only OCSP"},{"location":"funcs/check_revocation/#pki_tools.funcs.check_revocation.is_revoked--only-crl","text":"from pki_tools import Certificate, Chain, is_revoked, RevokeMode cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", ] ) if not is_revoked(cert, chain, revoke_mode=RevokeMode.CRL_ONLY): print(\"Cert not revoked\") Print output Cert not revoked For different ways of loading certificate and chain see: [Loading objects][loading-objects].","title":"Only CRL"},{"location":"funcs/check_revocation/#pki_tools.funcs.check_revocation.is_revoked_multiple_issuers","text":"is_revoked_multiple_issuers(cert: Certificate , cert_issuer: Chain , ocsp_issuer: Chain , crl_issuer: Chain , crl_cache_seconds: int = 3600, ocsp_res_cache_seconds: int = 3600, revoke_mode: RevokeMode = RevokeMode . OCSP_FALLBACK_CRL , same_crl_domains: list [ list [ str ]] = None) -> bool Checks if a certificate is revoked first using the OCSP extension and then the CRL extensions. Note that OCSP has precedence over CRL meaning that if OCSP check is successful this function will return the bool without checking CRL. Otherwise, if OCSP check fails, CRL will be tried next. Parameters: cert ( Certificate ) \u2013 The Certificate to check revocation for. cert_issuer ( Chain ) \u2013 The CA chain including one or more certificates and the issuer of the cert . See [Loading Chain][chain] for examples how the chain can be created. ocsp_issuer ( Chain ) \u2013 The CA chain including one or more certificates used for signing of the OCSP response crl_issuer ( Chain ) \u2013 The CA chain including one or more certificates used for signing the CRL crl_cache_seconds ( int , default: 3600 ) \u2013 [CRL Only] Specifies how long the CRL should be cached, default is 1 hour. ocsp_res_cache_seconds ( int , default: 3600 ) \u2013 [OCSP Only] Specifies how long the OCSP response should be cached, default is 1 hour. revoke_mode ( RevokeMode , default: RevokeMode . OCSP_FALLBACK_CRL ) \u2013 A RevokeMode specifying how to check for revocation, default is OCSP with CRL fallback same_crl_domains ( list [ list [ str ]] , default: None ) \u2013 A list of lists of domains that are considered to be the same hostname in CRL IDP and cert CDP check. Returns: bool \u2013 True if the certificate is revoked, False otherwise Raises: SignatureVerificationFailed \u2013 When the Chain contains more than one certificate and the trust fails either because of some certificate has expired or some signature in the chain is invalid RevokeCheckFailed \u2013 When both OCSP and CRL checks fail","title":"is_revoked_multiple_issuers"},{"location":"types/certificate/","text":"Certificate \u00b6 Bases: InitCryptoParser An object describing a x509 Certificate Attributes: issuer ( Name ) \u2013 Certificate issuer subject ( Name ) \u2013 Certificate subject validity ( Validity ) \u2013 Contains information about NotBefore and NotAfter extensions ( Optional [ Extensions ] ) \u2013 Certificate (v3) extensions serial_number ( Optional [ int ] ) \u2013 Serial number version ( Optional [ int ] ) \u2013 The version of the certificate signature_algorithm ( Optional [ SignatureAlgorithm ] ) \u2013 Describes the algorithm used to sign the certificate subject_public_key_info ( Optional [ SubjectPublicKeyInfo ] ) \u2013 The public key information Examples \u00b6 Create self signed certificate \u00b6 import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=name, validity=validity, ) cert.sign(RSAKeyPair.generate(), SHA512) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 000000000000000000000000D35C0881 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:29.527993+00:00' Not Before: '2024-03-18 19:33:29.527980+00:00' Create cross signed certificate \u00b6 import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) print(cert) Print output Issuer: 'CN: Issuer' Serial Number: 0000000000000000000000003C267E6C Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:25.178142+00:00' Not Before: '2024-03-18 19:33:25.178128+00:00' InitCryptoParser.from_pem_string \u00b6 cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2 InitCryptoParser.from_file \u00b6 cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- from pki_tools import Certificate cert = Certificate.from_file(\"cert.pem\") print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 243040E9C848CFB6A52091A3FFF0CD2FB3EAD07A Signature Algorithm: SHA512 Signature Value: |- 31DE88AF8907A676E5A7EA19549AD6820612F0A8F268B9D3FB5C4FE947D3726DE71F9B00A80F2462 3C19EC3FD24A3B254DCEF12CB79D3AD59CB720292262A2DEADEC332158E48A4DCB894C23ACAF6583 80942F178F7265F83E7F975F016C1792B693C2327446820737F2A9D1366F80095984A90714D9EA4F 695AB9B8CC233785EA4FF7A3A1D909F055F377EE61BCC12BAAD08F316497104DFA69765D7D5A04C2 9892A8DBB1F2E997B980294899E7C8F1BBAFC519387A3BC7DFAEBF73890051C01CAE94C046C738AD ABF114A1311E2AFB625F95854DEB44D7D104ECE8F3CBA73AAA4365C028CAE3D585EAC980D88064D9 33CBC951F82DE45CFD7422F8E8FB6A4D Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 public_exponent_e: '65537' Validity: Not After: '2024-03-17 13:43:57+00:00' Not Before: '2024-03-16 13:43:57+00:00' Version: 2 InitCryptoParser.to_file \u00b6 cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) cert.to_file(\"out_cert.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- hex_serial property \u00b6 hex_serial: str Parses the certificate serial into hex format Returns: str \u2013 String representing the hex value of the certificate serial number public_key property \u00b6 public_key: bytes Returns: bytes \u2013 The bytes of the public key in PEM format sign_alg_oid_name property \u00b6 sign_alg_oid_name: str Returns: str \u2013 The name of the signature algorithm such as: SHA512WITHRSA tbs_bytes property \u00b6 tbs_bytes: bytes Returns: bytes \u2013 The to be signed bytes of this certificate digest \u00b6 digest(algorithm: HashAlgorithm = HashAlgorithm ( name = HashAlgorithmName . SHA512 )) -> str Gets the base64 encoded fingerprint of the certificate Parameters: algorithm ( HashAlgorithm , default: HashAlgorithm ( name = HashAlgorithmName . SHA512 ) ) \u2013 The algorithm to use to hash the fingerprint with Returns: str \u2013 Hashed and base64 encoded certificate fingerprint from_cryptography classmethod \u00b6 from_cryptography(cert: x509 . Certificate ) -> Certificate Create a Certificate object from a cryptography.x509.Certificate object. Parameters: cert ( x509 . Certificate ) \u2013 The cryptography.x509.Certificate object. Returns: Certificate ( Certificate ) \u2013 The created Certificate object. Example \u00b6 crypto_cert from cryptography import x509 cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" crypto_cert = x509.load_pem_x509_certificate(cert_pem.encode()) from pki_tools import Certificate cert = Certificate.from_cryptography(crypto_cert) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2 from_server classmethod \u00b6 from_server(uri: str , cache_time_seconds: int = CACHE_TIME_SECONDS ) -> Certificate Loads a server certificate from a URI Parameters: uri ( str ) \u2013 The https URI of the server containing the certificate cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 How long the request should be cached in memory Returns: Certificate \u2013 The loaded Certificate object Example \u00b6 from pki_tools import Certificate cert = Certificate.from_server(\"https://revoked-isrgrootx1.letsencrypt.org\") print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://r3.o.lencr.org Access Method: OCSP - Access Location: name: UniformResourceIdentifier value: http://r3.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Basic Constraints (critical): CA: false Certificate Policies: - Policy 2.23.140.1.2.1: [] Extended Key Usage: - Server Authentication - Client Authentication Key Usage (critical): Digital Signature, Key Encipherment Subject Alternative Name: - name: DNSName value: revoked-isrgrootx1.letsencrypt.org Subject Key Identifier: Subject Key Identifier: 17580EEBFC5C74F8FCA9E7D26B7B46C2CAA4CB65 Issuer: 'C: US, CN: R3, O: Let''s Encrypt' Serial Number: 3AB360B2E141EE0A0A5D7E07405B788D012 Signature Algorithm: SHA256 Signature Value: |- 6524BFAA0418AC033CA8AE9B7D26270A0FD01D19C0D9C24DF62443049F751DAACC38DCD0F8D1B073 BA69A597430D81417621A83B1AFBF1DA8BB89A8A9A66C1872214219F1AF0F538E3492935FBED9B07 2753E1979754ADA825AE779F25A60E6168FE8B5A349A645CF53E8B92C4C89E48A10644B886DC5C45 F1BA190FA21F5D9D3797EEF438BB43A0C7F3AD24DC5A362573B93807C63E967C34412AF06484192E EABBE0F36E586457631452550F57EECCC70CA2D18033219970CA585B7F9E048D079267419A5853B0 91EC434E7486F0F2CEBB25A83E67906B25253D151C4648623AF65085D29CDA54A35AB69CF46FE5C5 233B8883E07F8084D1E4BD044D3AFA4F Subject: 'CN: revoked-isrgrootx1.letsencrypt.org' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 public_exponent_e: '65537' Validity: Not After: '2024-06-18 15:00:15+00:00' Not Before: '2024-03-20 15:00:16+00:00' Version: 2 from_uri classmethod \u00b6 from_uri(uri: str , cache_time_seconds: int = CACHE_TIME_SECONDS ) -> Certificate Loads Certificates from a URI. Parameters: uri ( str ) \u2013 URI where the certificate can be downloaded. cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 Specifies how long the certificate should be cached, default is 1 month. Returns: Certificate \u2013 Instance of Certificate containing the certificates Certificate \u2013 fetched from the URI. Example \u00b6 from pki_tools import Certificate cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 sign \u00b6 sign(key_pair: CryptoKeyPair , signature_algorithm: Optional [ SignatureAlgorithm ] = None, req_key: Optional [ CryptoPublicKey ] = None) -> None Signs a created Certificate object with a given CryptoKeyPair Parameters: key_pair ( CryptoKeyPair ) \u2013 Keypair containing the private key to sing the certificate with signature_algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 Algorithm to use for the signature req_key ( Optional [ CryptoPublicKey ] , default: None ) \u2013 Can be used to sign another public key, defaults to the public key part in key_pair verify_signature \u00b6 verify_signature(signed: InitCryptoParser ) -> None Verifies a signature of a signed entity against this issuer certificate Parameters: signed ( InitCryptoParser ) \u2013 The signed entity can either be a Certificate , CertificateRevocationList or a OCSPResponse Raises: InvalidSignedType \u2013 When the issuer has a non-supported type SignatureVerificationFailed \u2013 When the signature verification fails SubjectPublicKeyInfo \u00b6 Bases: CryptoParser Represents a certificate SubjectPublicKeyInfo. Attributes: algorithm ( CryptoPublicKey ) \u2013 The key algorithm in string format parameters ( Optional [ Dict [ str , str ]] ) \u2013 The dict representation of the key Validity \u00b6 Bases: BaseModel Describes the validity of a certificate Attributes: not_before ( datetime . datetime ) \u2013 The start date of when the certificate will be valid not_after ( datetime . datetime ) \u2013 The date of when the certificate expires","title":"Certificate"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate","text":"Bases: InitCryptoParser An object describing a x509 Certificate Attributes: issuer ( Name ) \u2013 Certificate issuer subject ( Name ) \u2013 Certificate subject validity ( Validity ) \u2013 Contains information about NotBefore and NotAfter extensions ( Optional [ Extensions ] ) \u2013 Certificate (v3) extensions serial_number ( Optional [ int ] ) \u2013 Serial number version ( Optional [ int ] ) \u2013 The version of the certificate signature_algorithm ( Optional [ SignatureAlgorithm ] ) \u2013 Describes the algorithm used to sign the certificate subject_public_key_info ( Optional [ SubjectPublicKeyInfo ] ) \u2013 The public key information","title":"Certificate"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate--examples","text":"","title":"Examples"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate--create-self-signed-certificate","text":"import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=name, validity=validity, ) cert.sign(RSAKeyPair.generate(), SHA512) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 000000000000000000000000D35C0881 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24651952656163458827909525106986168390362313244380531363179274081705687882652429 42724353284369423374164958731106228192983422927322035391927312930827505751347318 10433836284050568792288057907409152147114335732376331606070709493414131825009878 62483806985168774106048702295276425922168970742025356609804205385245796272234488 03262804756628532016588575221328645948176714781737845302802392421145534382840728 88871956041487370444145888612290281581252521370439236655085304445315900515237929 95090348261387175920426292996964832750356977399684053672351531777248194875874047 915774180897234671145523280260573598420850325221582548203 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:29.527993+00:00' Not Before: '2024-03-18 19:33:29.527980+00:00'","title":"Create self signed certificate"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate--create-cross-signed-certificate","text":"import datetime from pki_tools import Name, Certificate, Validity, RSAKeyPair, SHA512 issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) print(cert) Print output Issuer: 'CN: Issuer' Serial Number: 0000000000000000000000003C267E6C Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 25550756128772931813106243067085390318652289985739266496024024493670621116213956 90489287706264037119626214099882014292713209808252800751866447746720100929151964 46202070799749522898986797566961784783979561943444986102369066812692738828872782 98496590414399721427120456071151219636141450460402387454495822527621877200003696 17645095523313981050160559586782772916770185493147504794214581759473793032497010 11770801177016538979288420774380352730095192197516118893069722645898883305709857 14339419027910827270754661777912597663706493126575945938217017739081211471589786 628051978875616847991393413089023920982485319876048712079 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:25.178142+00:00' Not Before: '2024-03-18 19:33:25.178128+00:00'","title":"Create cross signed certificate"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate--initcryptoparserfrom_pem_string","text":"cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2","title":"InitCryptoParser.from_pem_string"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate--initcryptoparserfrom_file","text":"cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- from pki_tools import Certificate cert = Certificate.from_file(\"cert.pem\") print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 243040E9C848CFB6A52091A3FFF0CD2FB3EAD07A Signature Algorithm: SHA512 Signature Value: |- 31DE88AF8907A676E5A7EA19549AD6820612F0A8F268B9D3FB5C4FE947D3726DE71F9B00A80F2462 3C19EC3FD24A3B254DCEF12CB79D3AD59CB720292262A2DEADEC332158E48A4DCB894C23ACAF6583 80942F178F7265F83E7F975F016C1792B693C2327446820737F2A9D1366F80095984A90714D9EA4F 695AB9B8CC233785EA4FF7A3A1D909F055F377EE61BCC12BAAD08F316497104DFA69765D7D5A04C2 9892A8DBB1F2E997B980294899E7C8F1BBAFC519387A3BC7DFAEBF73890051C01CAE94C046C738AD ABF114A1311E2AFB625F95854DEB44D7D104ECE8F3CBA73AAA4365C028CAE3D585EAC980D88064D9 33CBC951F82DE45CFD7422F8E8FB6A4D Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24705275634373472397913959111842546457302915278710046458429196107971203620518900 85889996051958213090938989691323871611516168353538245753542340318167446221548635 67911269725300641515785009885189293940887358974053993148509318435178111484052410 72214344364244683088793223060590713951003322044817992841479781172826156997645163 70784993866039143556837669831378860817098024438537135253644970737965953760024566 22324555478329594901571378606988272402814596002534123398099376285556900954144977 87439286935923126574798824924322834080550238750285058369308645348104266890130421 563716816499870231348689769706202508344784145130254775919 public_exponent_e: '65537' Validity: Not After: '2024-03-17 13:43:57+00:00' Not Before: '2024-03-16 13:43:57+00:00' Version: 2","title":"InitCryptoParser.from_file"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate--initcryptoparserto_file","text":"cert_pem cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" from pki_tools import Certificate cert = Certificate.from_pem_string(cert_pem) cert.to_file(\"out_cert.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE-----","title":"InitCryptoParser.to_file"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.hex_serial","text":"hex_serial: str Parses the certificate serial into hex format Returns: str \u2013 String representing the hex value of the certificate serial number","title":"hex_serial"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.public_key","text":"public_key: bytes Returns: bytes \u2013 The bytes of the public key in PEM format","title":"public_key"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.sign_alg_oid_name","text":"sign_alg_oid_name: str Returns: str \u2013 The name of the signature algorithm such as: SHA512WITHRSA","title":"sign_alg_oid_name"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.tbs_bytes","text":"tbs_bytes: bytes Returns: bytes \u2013 The to be signed bytes of this certificate","title":"tbs_bytes"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.digest","text":"digest(algorithm: HashAlgorithm = HashAlgorithm ( name = HashAlgorithmName . SHA512 )) -> str Gets the base64 encoded fingerprint of the certificate Parameters: algorithm ( HashAlgorithm , default: HashAlgorithm ( name = HashAlgorithmName . SHA512 ) ) \u2013 The algorithm to use to hash the fingerprint with Returns: str \u2013 Hashed and base64 encoded certificate fingerprint","title":"digest"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.from_cryptography","text":"from_cryptography(cert: x509 . Certificate ) -> Certificate Create a Certificate object from a cryptography.x509.Certificate object. Parameters: cert ( x509 . Certificate ) \u2013 The cryptography.x509.Certificate object. Returns: Certificate ( Certificate ) \u2013 The created Certificate object.","title":"from_cryptography"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.from_cryptography--example","text":"crypto_cert from cryptography import x509 cert_pem = \"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUagjv68D6EIk/hIIA0mXliqJr/iIwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMDkxMzEwMTZaFw0yNDAzMTAx MzEwMTZaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDxw2sUZVazQcjpVN9NirPbQVLkPwIgFEQfOJwTXOhb2nofM0PA edmVu+Kb5aw9+lZ3aJaLFOS2nFAdJ0gxINXsqdjVQ1Ok+uftWvanxql8GxDeD3sY E92KyaRkzwyONq4dXefvRkB1j8w8gm9MbguFhZBMWlaKSqP/48mhWvJlca1zWAkY H8moxXLcAIuvbc+qMbfNqah1LIvMkxlw1eiYogX8JPpd+OcuyPihXwIUHdl9s24S ioqODCicBe8eegZZDfdlHQI/kyT88XqT5yHYXnhmgcjIDeCx1eAMXbVdUvzES/pi qS7pNxvfZwLHvQsGDv7OaW+AoF7+MrunjXvtAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAAa6G9Xl0piwxXfVdr5gTcyHBMNfq9KzgdstTrgV38QXctiyREJW2Nu3A8mm lsNBW+OyNOalKhYQSDrjG8D3VM6W5VfDlb2iYtBQRUfIkktSQ5/i8xifHulpHH5/ JTLMjePP+W2aOzu7o249PYnpizFsxwOWJGcF76Ouw98X/WKZMpJLSanS1hYmBrRi vrZ+4lE8Vh4EO/pLMxktBot4cYAAYWIU6are0C4CW7LzmPRmkKcLmjxPDapEOj/d iEEtcWJ2LNQ1UA0fzUEmrHGfasewdRpkY6K3/9psnnOOCH5T3cZfjawUq0cBpX81 C0c2MU/Ob0dcXJmIwbGA0PmIwVo= -----END CERTIFICATE----- \"\"\" crypto_cert = x509.load_pem_x509_certificate(cert_pem.encode()) from pki_tools import Certificate cert = Certificate.from_cryptography(crypto_cert) print(cert) Print output Issuer: 'CN: Cert CN' Serial Number: 6A08EFEBC0FA10893F848200D265E58AA26BFE22 Signature Algorithm: SHA512 Signature Value: |- 06BA1BD5E5D298B0C577D576BE604DCC8704C35FABD2B381DB2D4EB815DFC41772D8B2444256D8DB B703C9A696C3415BE3B234E6A52A1610483AE31BC0F754CE96E557C395BDA262D0504547C8924B52 439FE2F3189F1EE9691C7E7F2532CC8DE3CFF96D9A3B3BBBA36E3D3D89E98B316CC70396246705EF A3AEC3DF17FD629932924B49A9D2D6162606B462BEB67EE2513C561E043BFA4B33192D068B787180 00616214E9AADED02E025BB2F398F46690A70B9A3C4F0DAA443A3FDD88412D7162762CD435500D1F CD4126AC719F6AC7B0751A6463A2B7FFDA6C9E738E087E53DDC65F8DAC14AB4701A57F350B473631 4FCE6F475C5C9988C1B180D0F988C15A Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 30519795842219718524154211452339367525522541418306388322222479091833299116991140 09740263213211778932406753683969023225227261260389673597060169902106121179841034 31187219419109541663272149747295496520180159087432616126691772239668099488528148 13289122122347191908018216484406428594527992092037163959856854605762954418536599 19979935283394834106080349369124577624086693846677247163161103215836435379325851 79739035857994859657330621842935602784426350478700541817375449573933075543808561 18104621405966149397007798324741701052325470419784481031726708819614894503041371 625278920346237218103962726322958896412584334205897243629 public_exponent_e: '65537' Validity: Not After: '2024-03-10 13:10:16+00:00' Not Before: '2024-03-09 13:10:16+00:00' Version: 2","title":"Example"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.from_server","text":"from_server(uri: str , cache_time_seconds: int = CACHE_TIME_SECONDS ) -> Certificate Loads a server certificate from a URI Parameters: uri ( str ) \u2013 The https URI of the server containing the certificate cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 How long the request should be cached in memory Returns: Certificate \u2013 The loaded Certificate object","title":"from_server"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.from_server--example","text":"from pki_tools import Certificate cert = Certificate.from_server(\"https://revoked-isrgrootx1.letsencrypt.org\") print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://r3.o.lencr.org Access Method: OCSP - Access Location: name: UniformResourceIdentifier value: http://r3.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Basic Constraints (critical): CA: false Certificate Policies: - Policy 2.23.140.1.2.1: [] Extended Key Usage: - Server Authentication - Client Authentication Key Usage (critical): Digital Signature, Key Encipherment Subject Alternative Name: - name: DNSName value: revoked-isrgrootx1.letsencrypt.org Subject Key Identifier: Subject Key Identifier: 17580EEBFC5C74F8FCA9E7D26B7B46C2CAA4CB65 Issuer: 'C: US, CN: R3, O: Let''s Encrypt' Serial Number: 3AB360B2E141EE0A0A5D7E07405B788D012 Signature Algorithm: SHA256 Signature Value: |- 6524BFAA0418AC033CA8AE9B7D26270A0FD01D19C0D9C24DF62443049F751DAACC38DCD0F8D1B073 BA69A597430D81417621A83B1AFBF1DA8BB89A8A9A66C1872214219F1AF0F538E3492935FBED9B07 2753E1979754ADA825AE779F25A60E6168FE8B5A349A645CF53E8B92C4C89E48A10644B886DC5C45 F1BA190FA21F5D9D3797EEF438BB43A0C7F3AD24DC5A362573B93807C63E967C34412AF06484192E EABBE0F36E586457631452550F57EECCC70CA2D18033219970CA585B7F9E048D079267419A5853B0 91EC434E7486F0F2CEBB25A83E67906B25253D151C4648623AF65085D29CDA54A35AB69CF46FE5C5 233B8883E07F8084D1E4BD044D3AFA4F Subject: 'CN: revoked-isrgrootx1.letsencrypt.org' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23839174628835585737865497707674190474897415317191932275801797752886922576439929 23606111892535056472919273444108077458185259724177705966095207382680958653002768 64978318542280697487184872371692210563784780155639469440229752176892536277475999 75217593328595981266268943720688057618917965143208585315841050460997668640937715 31151802418019082127796674420946429622942844685649712201709165874476137292993834 39085956973880263992601153582729559608082829217959931969536985959906468775946948 85364834380352119964620287584172658764708891053901110224014921892529600757418230 858898666651845148139212940504939021007318913142493572379 public_exponent_e: '65537' Validity: Not After: '2024-06-18 15:00:15+00:00' Not Before: '2024-03-20 15:00:16+00:00' Version: 2","title":"Example"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.from_uri","text":"from_uri(uri: str , cache_time_seconds: int = CACHE_TIME_SECONDS ) -> Certificate Loads Certificates from a URI. Parameters: uri ( str ) \u2013 URI where the certificate can be downloaded. cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 Specifies how long the certificate should be cached, default is 1 month. Returns: Certificate \u2013 Instance of Certificate containing the certificates Certificate \u2013 fetched from the URI.","title":"from_uri"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.from_uri--example","text":"from pki_tools import Certificate cert = Certificate.from_uri( \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\" ) print(cert) Print output Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2","title":"Example"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.sign","text":"sign(key_pair: CryptoKeyPair , signature_algorithm: Optional [ SignatureAlgorithm ] = None, req_key: Optional [ CryptoPublicKey ] = None) -> None Signs a created Certificate object with a given CryptoKeyPair Parameters: key_pair ( CryptoKeyPair ) \u2013 Keypair containing the private key to sing the certificate with signature_algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 Algorithm to use for the signature req_key ( Optional [ CryptoPublicKey ] , default: None ) \u2013 Can be used to sign another public key, defaults to the public key part in key_pair","title":"sign"},{"location":"types/certificate/#pki_tools.types.certificate.Certificate.verify_signature","text":"verify_signature(signed: InitCryptoParser ) -> None Verifies a signature of a signed entity against this issuer certificate Parameters: signed ( InitCryptoParser ) \u2013 The signed entity can either be a Certificate , CertificateRevocationList or a OCSPResponse Raises: InvalidSignedType \u2013 When the issuer has a non-supported type SignatureVerificationFailed \u2013 When the signature verification fails","title":"verify_signature"},{"location":"types/certificate/#pki_tools.types.certificate.SubjectPublicKeyInfo","text":"Bases: CryptoParser Represents a certificate SubjectPublicKeyInfo. Attributes: algorithm ( CryptoPublicKey ) \u2013 The key algorithm in string format parameters ( Optional [ Dict [ str , str ]] ) \u2013 The dict representation of the key","title":"SubjectPublicKeyInfo"},{"location":"types/certificate/#pki_tools.types.certificate.Validity","text":"Bases: BaseModel Describes the validity of a certificate Attributes: not_before ( datetime . datetime ) \u2013 The start date of when the certificate will be valid not_after ( datetime . datetime ) \u2013 The date of when the certificate expires","title":"Validity"},{"location":"types/certificates/","text":"Certificates \u00b6 Bases: CryptoParser A list of one or more certificates Attributes: certificates ( List [ Certificate ] ) \u2013 a list of Certificate pem_string property \u00b6 pem_string: str Returns a string containing the PEM-encoded certificates. Returns: str \u2013 PEM string containing all the certificates. from_cryptography classmethod \u00b6 from_cryptography(crypto_certs: List [ x509 . Certificate ]) -> Certificates Create a Certificates object from a list of cryptography certificates. Parameters: crypto_certs ( List [ x509 . Certificate ] ) \u2013 List of cryptography certificates. Returns: Certificates \u2013 Instance of Certificates containing the provided certificates. from_file classmethod \u00b6 from_file(file_path: str ) -> Certificates Reads a file containing one or more PEM certificate(s) into a Certificates object. Parameters: file_path ( str ) \u2013 Path and filename of the PEM certificate. Returns: Certificates \u2013 A Certificates object representing the certificate(s) from file. from_pem_string classmethod \u00b6 from_pem_string(pem_string: str ) -> Certificates Create a Certificates object from a PEM string. Parameters: pem_string ( str ) \u2013 PEM string containing certificate(s). Returns: Certificates \u2013 Instance of Certificates containing the certificates from the PEM Certificates \u2013 string. from_uri classmethod \u00b6 from_uri(uris: [ str ], cache_time_seconds: int = CACHE_TIME_SECONDS ) -> Certificates Loads Certificates from one or more URI(s). Parameters: uris ( [ str ] ) \u2013 One or more URI(s) where the certificate(s) can be downloaded. cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 Specifies how long the certificates should be cached, default is 1 month. Defaults to CACHE_TIME_SECONDS. Returns: Certificates \u2013 Instance of Certificates containing the certificates Certificates \u2013 fetched from the URI. to_file \u00b6 to_file(file_path: str ) -> None Saves one or more certificate(s) into a file. Parameters: file_path ( str ) \u2013 Path and filename where to store the certificate(s).","title":"Certificates"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates","text":"Bases: CryptoParser A list of one or more certificates Attributes: certificates ( List [ Certificate ] ) \u2013 a list of Certificate","title":"Certificates"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates.pem_string","text":"pem_string: str Returns a string containing the PEM-encoded certificates. Returns: str \u2013 PEM string containing all the certificates.","title":"pem_string"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates.from_cryptography","text":"from_cryptography(crypto_certs: List [ x509 . Certificate ]) -> Certificates Create a Certificates object from a list of cryptography certificates. Parameters: crypto_certs ( List [ x509 . Certificate ] ) \u2013 List of cryptography certificates. Returns: Certificates \u2013 Instance of Certificates containing the provided certificates.","title":"from_cryptography"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates.from_file","text":"from_file(file_path: str ) -> Certificates Reads a file containing one or more PEM certificate(s) into a Certificates object. Parameters: file_path ( str ) \u2013 Path and filename of the PEM certificate. Returns: Certificates \u2013 A Certificates object representing the certificate(s) from file.","title":"from_file"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates.from_pem_string","text":"from_pem_string(pem_string: str ) -> Certificates Create a Certificates object from a PEM string. Parameters: pem_string ( str ) \u2013 PEM string containing certificate(s). Returns: Certificates \u2013 Instance of Certificates containing the certificates from the PEM Certificates \u2013 string.","title":"from_pem_string"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates.from_uri","text":"from_uri(uris: [ str ], cache_time_seconds: int = CACHE_TIME_SECONDS ) -> Certificates Loads Certificates from one or more URI(s). Parameters: uris ( [ str ] ) \u2013 One or more URI(s) where the certificate(s) can be downloaded. cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 Specifies how long the certificates should be cached, default is 1 month. Defaults to CACHE_TIME_SECONDS. Returns: Certificates \u2013 Instance of Certificates containing the certificates Certificates \u2013 fetched from the URI.","title":"from_uri"},{"location":"types/certificates/#pki_tools.types.certificates.Certificates.to_file","text":"to_file(file_path: str ) -> None Saves one or more certificate(s) into a file. Parameters: file_path ( str ) \u2013 Path and filename where to store the certificate(s).","title":"to_file"},{"location":"types/chain/","text":"Chain \u00b6 Bases: Certificates Chain holds a list of certificates in a chain of trust Examples \u00b6 Create chain \u00b6 import datetime from pki_tools import ( Name, RSAKeyPair, SHA512, Chain, Certificate, Validity, ) issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) # Create self-signed issuer cert issuer_cert = Certificate( subject=issuer, issuer=issuer, validity=validity, ) issuer_cert.sign(issuer_key, SHA512) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) # Create certificate singed by issuer key cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) chain = Chain(certificates=[issuer_cert, cert]) print(chain) Print output ----------Certificate #1---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000F324B06B Signature Algorithm: SHA512 Subject: 'CN: Issuer' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- ----------Certificate #2---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000803635E6 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- Chain certificate count: 2 InitCryptoParser.from_pem_string \u00b6 chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2 InitCryptoParser.from_file \u00b6 chain.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- from pki_tools import Chain chain = Chain.from_file(\"chain.pem\") print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2 InitCryptoParser.to_file \u00b6 chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) chain.to_file(\"out_chain.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- Certificates.from_cryptography \u00b6 chain_pem from cryptography import x509 chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" crypto_certs = x509.load_pem_x509_certificates(chain_pem.encode()) from pki_tools import Chain chain = Chain.from_cryptography(crypto_certs) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2 Certificates.from_uri \u00b6 from pki_tools import Chain chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\", ] ) print(chain) Print output check_chain \u00b6 check_chain() Validate the chain (if it contains more than one certificate) checking expiration and signatures of all certificates in the chain Raises: NotCompleteChain \u2013 When the chain contain only one not self-signed certificate CertExpired \u2013 If some certificate in the chain has expired InvalidSignedType \u2013 When the issuer has a non-supported type SignatureVerificationFailed \u2013 When the signature verification fails get_issuer \u00b6 get_issuer(signed: [ Certificate , CertificateRevocationList ]) -> Certificate Returns the issuer of a signed entity Parameters: signed ( [ Certificate , CertificateRevocationList ] ) \u2013 The signed entity can either be a Certificate or CertificateRevocationList Returns: The issuer of the signed entity Raises: CertIssuerMissingInChain \u2013 When the issuer of the entity is missing in the chain","title":"Chain"},{"location":"types/chain/#pki_tools.types.chain.Chain","text":"Bases: Certificates Chain holds a list of certificates in a chain of trust","title":"Chain"},{"location":"types/chain/#pki_tools.types.chain.Chain--examples","text":"","title":"Examples"},{"location":"types/chain/#pki_tools.types.chain.Chain--create-chain","text":"import datetime from pki_tools import ( Name, RSAKeyPair, SHA512, Chain, Certificate, Validity, ) issuer_key = RSAKeyPair.generate() issuer = Name(cn=[\"Issuer\"]) validity = Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ) # Create self-signed issuer cert issuer_cert = Certificate( subject=issuer, issuer=issuer, validity=validity, ) issuer_cert.sign(issuer_key, SHA512) cert_key = RSAKeyPair.generate() name = Name(cn=[\"Cert CN\"]) # Create certificate singed by issuer key cert = Certificate( subject=name, issuer=issuer, validity=validity, ) cert.sign(issuer_key, SHA512, req_key=cert_key.public_key) chain = Chain(certificates=[issuer_cert, cert]) print(chain) Print output ----------Certificate #1---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000F324B06B Signature Algorithm: SHA512 Subject: 'CN: Issuer' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 24512908490847419959148488546578707070361977414313095859803549266406631884467943 47736185510432352513271587231190286401974946318587796724342072653654191481860861 54934391020121010189615110080522347088148793634069809754960483000826386632203570 74720270852010035225315636529994239462493606316311687886543630281434421744491326 99111730259813825998131004835114120995481108520887460934191068529079773779999065 31595156496070224454783095279056429406983893698625734439655201026783277966361911 36803965509223476031606668074978340836583934819366549600757429589418053972419117 808170255864069660657928965745093887687188375095145919859 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- ----------Certificate #2---------- Issuer: 'CN: Issuer' Serial Number: 000000000000000000000000803635E6 Signature Algorithm: SHA512 Subject: 'CN: Cert CN' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 19722525837243147256729707527743424501691201966358125011176035630852019620432684 33888280452899997110070739130214603301492233663748271149582925009584034197398605 65529687610044811183554986390205164425813989860258205218774903363071682672036937 90000253019595505038363546573367958766989435918323824165029690193800047593345327 10740975096800488765378675539885938133592084071647692686980410524799633255683361 89145937767282660220211128492179314412670386243074846072009966825956121063566320 94722321854694457820606911775347912746675654229128937423685679272102158133109672 787437074247278159877057337119200281262914762865880161033 public_exponent_e: '65537' Validity: Not After: '2024-03-20 19:33:18.892956+00:00' Not Before: '2024-03-18 19:33:18.892942+00:00' ---------------------------------- Chain certificate count: 2","title":"Create chain"},{"location":"types/chain/#pki_tools.types.chain.Chain--initcryptoparserfrom_pem_string","text":"chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"InitCryptoParser.from_pem_string"},{"location":"types/chain/#pki_tools.types.chain.Chain--initcryptoparserfrom_file","text":"chain.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- from pki_tools import Chain chain = Chain.from_file(\"chain.pem\") print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"InitCryptoParser.from_file"},{"location":"types/chain/#pki_tools.types.chain.Chain--initcryptoparserto_file","text":"chain_pem chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" from pki_tools import Chain chain = Chain.from_pem_string(chain_pem) chain.to_file(\"out_chain.pem\") out_cert.pem -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE-----","title":"InitCryptoParser.to_file"},{"location":"types/chain/#pki_tools.types.chain.Chain--certificatesfrom_cryptography","text":"chain_pem from cryptography import x509 chain_pem = \"\"\" -----BEGIN CERTIFICATE----- MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4 WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+ 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5 ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4 avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2 yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+ HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX nLRbwHOoq7hHwg== -----END CERTIFICATE----- \"\"\" crypto_certs = x509.load_pem_x509_certificates(chain_pem.encode()) from pki_tools import Chain chain = Chain.from_cryptography(crypto_certs) print(chain) Print output ----------Certificate #1---------- Extensions: Basic Constraints (critical): CA: true Key Usage (critical): Key Cert Sign, Crl Sign Subject Key Identifier: Subject Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 8210CFB0D240E3594463E0BB63828B00 Signature Algorithm: SHA256 Signature Value: |- 551F58A9BCB2A850D00CB1D81A6920272908AC61755C8A6EF882E5692FD5F6564BB9B8731059D321 977EE74C71FBB2D260AD39A80BEA17215685F1500E59EBCEE059E9BAC915EF869D8F8480F6E4E991 90DC179B621B45F06695D27C6FC2EA3BEF1FCFCBD6AE27F1A9B0C8AEFD7D7E9AFA2204EBFFD97FEA 912B22B1170E8FF28A345B58D8FC01C954B9B826CC8A8833894C2D843C82DFEE965705BA2CBBF7C4 B7C74E3B82BE31C822737392D1C280A43939103323824C3C9F86B255981DBE29868C229B9EE26B3B 573A82704DDC09C789CB0A074D6CE85D8EC9EFCEABC7BBB52B4E45D64AD026CCE572CA086AA595E3 15A1F7A4EDC92C5FA5FBFFAC28022EBED77BBBE3717B9016D3075E46537C3707428CD3C4969CD599 B52AE0951A8048AE4C3907CECC47A452952BBAB8FBADD233537DE51D4D6DD5A1B1C7426FE6402735 5CA328B7078DE78D3390E7239FFB509C796C46D5B415B3966E7E9B0C963AB8522D3FD65BE1FB08C2 84FE24A8A389DAAC6AE1182AB1A843615BD31FDC3B8D76F22DE88D75DF17336C3D53FB7BCB415FFF DCA2D06138E196B8AC5D8B37D775D533C09911AE9D41C1727584BE0241425F67244894D19B27BE07 3FB9B84F817451E17AB7ED9D23E2BEE0D52804133C31039EDD7A6C8FC60718C67FDE478E3F289E04 06CFA5543477BDEC899BE91743DF5BDB5FFE8E1E57A2CD409D7E6222DADE1827 Subject: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Subject Public Key Info: Parameters: Key Size: '4096' Modulus N: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 Public Exponent E: '65537' Public Key Algorithm: key_size: '4096' modulus_n: |- 70947787041544537301535901656242666061055377068594452089329839660022676089997787 91910048985433508318421191741886136781365102624725505327222341317544391810900098 24131001234702144200501816519311599904090606194984753842587622398776018408050245 57411602855060870889647897710470310136457737755482389335033937689298408667684282 15066373765614712211786775130358118845898882309478554825547809248442806614129828 27405878164907670403886160896655313460186264922042760067692235383478494519985672 05969875291596599841244594625422741323225727652524000665148313079224811241742584 64519514387812606321376453589275681583619617101851155025771270109223443949930789 48994750404287047493247048147066090211292167313905862438457453781042040498702821 43201376550202410506577825775917835692549415644757032237331025699960908320177827 85885998547062417881194489430344773709593495168731620634615217078096898397109727 53590949570167489887658749686740890549110678989462474318310617765270337415238713 77080071123656361017110132805242414547822099301651526247854381379689967721519278 96126828451450089931445135474441311260295571475700053699431432135256711052888170 16183804256755470528641042403865830064493168693765438364296560479053823886598989 258655438933191724193029337334607 public_exponent_e: '65537' Validity: Not After: '2035-06-04 11:04:38+00:00' Not Before: '2015-06-04 11:04:38+00:00' Version: 2 ---------------------------------- ----------Certificate #2---------- Extensions: Authority Information Access: Access Description: - Access Location: name: UniformResourceIdentifier value: http://x1.i.lencr.org/ Access Method: CA_ISSUERS Authority Key Identifier: Key Identifier: 79B459E67BB6E5E40173800888C81A58F6E99B6E Basic Constraints (critical): CA: true Certificate Policies: - Policy 2.23.140.1.2.1: [] - Policy 1.3.6.1.4.1.44947.1.1.1: [] Crl Distribution Points: - Full Name: - name: UniformResourceIdentifier value: http://x1.c.lencr.org/ Extended Key Usage: - Client Authentication - Server Authentication Key Usage (critical): Digital Signature, Key Cert Sign, Crl Sign Path Lenght: 0 Subject Key Identifier: Subject Key Identifier: 142EB317B75856CBAE500940E61FAF9D8B14C2C6 Issuer: 'C: US, CN: ISRG Root X1, O: Internet Security Research Group' Serial Number: 912B084ACF0C18A753F6D62E25A75F5A Signature Algorithm: SHA256 Signature Value: |- 85CA4E473EA3F7854485BCD56778B29863AD754D1E963D336572542D81A0EAC3EDF820BF5FCCB770 00B76E3BF65E94DEE4209FA6EF8BB203E7A2B5163C91CEB4ED3902E77C258A47E6656E3F46F4D9F0 CE942BEE54CE12BC8C274BB8C1982FA2AFCD71914A08B7C8B8237B042D08F908573E83D904330A47 2178098227C32AC89BB9CE5CF264C8C0BE79C04F8E6D440C5E92BB2EF78B10E1E81D4429DB5920ED 63B921F81226949357A01D6504C10A22AE100D4397A1181F7EE0E08637B55AB1BD30BF876E2B2AFF 214E1B05C3F51897F05EACC3A5B86AF02EBC3B33B9EE4BDECCFCE4AF840B863FC0554336F668E136 176A8E99D1FFA540A734B7C0D063393539756EF2BA76C89302E9A94B6C17CE0C02D9BD81FB9FB768 D40665B3823D7753F88E7903AD0A3107752A43D8559772C4290EF7C45D4EC8AE468430D7F2855F18 A179BBE75E708B07E18693C3B98FDC6171252AAFDFED255052688B92DCE5D6B5E3DA7DD0876C8421 31AE82F5FBB9ABC889173DE14CE5380EF6BD2BBD968114EBD5DB3D20A77E59D3E2F858F95BB848CD FE5C4F1629FE1E5523AFC811B08DEA7C9390172FFDACA20947463FF0E9B0B7FF284D6832D6675E1E 69A393B8F59D8B2F0BD25243A66F3257654D3281DF3853855D7E5D6629EAB8DDE495B5CDB5561242 CDC44EC6253844506DECCE005518FEE94964D44ECA979CB45BC073A8ABB847C2 Subject: 'C: US, CN: R3, O: Let''s Encrypt' Subject Public Key Info: Parameters: Key Size: '2048' Modulus N: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 Public Exponent E: '65537' Public Key Algorithm: key_size: '2048' modulus_n: |- 23607590023527405233483514815960094733025362836439268915823566209453533788829410 72961269318866403396560128488938220067229162371221935157944246629213402577917087 19030296756413322277205133704994143921747776293784333332814927820066440035084066 69842374574620445942041275265465205367002253387972103578862358103547035353751037 98689289193893953701371227696203175830312817811815601999781845906479379770505161 19310429773226949916112639110772354331197195042061738975342154862253911562311683 13218127765624386188467360149426877213161912342004781300247624712380387337803861 727744706241919394251136381590874774264144198228326996757 public_exponent_e: '65537' Validity: Not After: '2025-09-15 16:00:00+00:00' Not Before: '2020-09-04 00:00:00+00:00' Version: 2 ---------------------------------- Chain certificate count: 2","title":"Certificates.from_cryptography"},{"location":"types/chain/#pki_tools.types.chain.Chain--certificatesfrom_uri","text":"from pki_tools import Chain chain = Chain.from_uri( [ \"https://letsencrypt.org/certs/isrgrootx1.pem\", \"https://letsencrypt.org/certs/lets-encrypt-r3.pem\", ] ) print(chain) Print output","title":"Certificates.from_uri"},{"location":"types/chain/#pki_tools.types.chain.Chain.check_chain","text":"check_chain() Validate the chain (if it contains more than one certificate) checking expiration and signatures of all certificates in the chain Raises: NotCompleteChain \u2013 When the chain contain only one not self-signed certificate CertExpired \u2013 If some certificate in the chain has expired InvalidSignedType \u2013 When the issuer has a non-supported type SignatureVerificationFailed \u2013 When the signature verification fails","title":"check_chain"},{"location":"types/chain/#pki_tools.types.chain.Chain.get_issuer","text":"get_issuer(signed: [ Certificate , CertificateRevocationList ]) -> Certificate Returns the issuer of a signed entity Parameters: signed ( [ Certificate , CertificateRevocationList ] ) \u2013 The signed entity can either be a Certificate or CertificateRevocationList Returns: The issuer of the signed entity Raises: CertIssuerMissingInChain \u2013 When the issuer of the entity is missing in the chain","title":"get_issuer"},{"location":"types/crl/","text":"CertificateRevocationList \u00b6 Bases: InitCryptoParser Represents a certificate revocation list (CRL). Attributes: issuer ( Name ) \u2013 The name of the issuer. last_update ( datetime ) \u2013 The last update time of the CRL. next_update ( datetime ) \u2013 The next update time of the CRL. revoked_certs ( Optional [ List [ RevokedCertificate ]] ) \u2013 List of revoked certificates. tbs_bytes property \u00b6 tbs_bytes: bytes Return the bytes to be signed of the CRL. Returns: bytes \u2013 TBS bytes of the CRL. from_cryptography classmethod \u00b6 from_cryptography(crypto_crl: x509 . CertificateRevocationList ) -> CertificateRevocationList Create a CertificateRevocationList object from a cryptography CertificateRevocationList. Parameters: crypto_crl ( x509 . CertificateRevocationList ) \u2013 Cryptography CertificateRevocationList. Returns: CertificateRevocationList \u2013 Instance of CertificateRevocationList. from_uri classmethod \u00b6 from_uri(uri: str , cache_time_seconds: int = CACHE_TIME_SECONDS ) -> CertificateRevocationList Loads CertificateRevocationList from a URI. Parameters: uri ( str ) \u2013 URI where the CRL can be downloaded. cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 Specifies how long the CRL should be cached, default is 1 month. Returns: CertificateRevocationList \u2013 Instance of CertificateRevocationList containing the revoked certificates fetched from the URI. get_revoked \u00b6 get_revoked(cert_serial: int ) -> Optional [ RevokedCertificate ] Get a revoked certificate by serial number. Parameters: cert_serial ( int ) \u2013 Serial number of the certificate. Returns: Optional [ RevokedCertificate ] \u2013 RevokedCertificate object if found, else None. sign \u00b6 sign(private_key: CryptoPrivateKey , algorithm: Optional [ SignatureAlgorithm ] = None) -> None Sign the CRL with the provided private key and algorithm. Parameters: private_key ( CryptoPrivateKey ) \u2013 Private key used to sign the CRL. algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 Signature algorithm to use for signing. RevokedCertificate \u00b6 Bases: CryptoParser Represents a revoked certificate. Attributes: serial ( int ) \u2013 The serial number of the certificate. date ( datetime ) \u2013 The revocation date of the certificate. extensions ( Optional [ Extensions ] ) \u2013 Extensions associated with the certificate. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: x509 . RevokedCertificate ) -> RevokedCertificate Create a RevokedCertificate object from a cryptography RevokedCertificate. Parameters: crypto_obj ( x509 . RevokedCertificate ) \u2013 Cryptography RevokedCertificate. Returns: RevokedCertificate ( RevokedCertificate ) \u2013 Instance of RevokedCertificate.","title":"CertificateRevocationList"},{"location":"types/crl/#pki_tools.types.crl.CertificateRevocationList","text":"Bases: InitCryptoParser Represents a certificate revocation list (CRL). Attributes: issuer ( Name ) \u2013 The name of the issuer. last_update ( datetime ) \u2013 The last update time of the CRL. next_update ( datetime ) \u2013 The next update time of the CRL. revoked_certs ( Optional [ List [ RevokedCertificate ]] ) \u2013 List of revoked certificates.","title":"CertificateRevocationList"},{"location":"types/crl/#pki_tools.types.crl.CertificateRevocationList.tbs_bytes","text":"tbs_bytes: bytes Return the bytes to be signed of the CRL. Returns: bytes \u2013 TBS bytes of the CRL.","title":"tbs_bytes"},{"location":"types/crl/#pki_tools.types.crl.CertificateRevocationList.from_cryptography","text":"from_cryptography(crypto_crl: x509 . CertificateRevocationList ) -> CertificateRevocationList Create a CertificateRevocationList object from a cryptography CertificateRevocationList. Parameters: crypto_crl ( x509 . CertificateRevocationList ) \u2013 Cryptography CertificateRevocationList. Returns: CertificateRevocationList \u2013 Instance of CertificateRevocationList.","title":"from_cryptography"},{"location":"types/crl/#pki_tools.types.crl.CertificateRevocationList.from_uri","text":"from_uri(uri: str , cache_time_seconds: int = CACHE_TIME_SECONDS ) -> CertificateRevocationList Loads CertificateRevocationList from a URI. Parameters: uri ( str ) \u2013 URI where the CRL can be downloaded. cache_time_seconds ( int , default: CACHE_TIME_SECONDS ) \u2013 Specifies how long the CRL should be cached, default is 1 month. Returns: CertificateRevocationList \u2013 Instance of CertificateRevocationList containing the revoked certificates fetched from the URI.","title":"from_uri"},{"location":"types/crl/#pki_tools.types.crl.CertificateRevocationList.get_revoked","text":"get_revoked(cert_serial: int ) -> Optional [ RevokedCertificate ] Get a revoked certificate by serial number. Parameters: cert_serial ( int ) \u2013 Serial number of the certificate. Returns: Optional [ RevokedCertificate ] \u2013 RevokedCertificate object if found, else None.","title":"get_revoked"},{"location":"types/crl/#pki_tools.types.crl.CertificateRevocationList.sign","text":"sign(private_key: CryptoPrivateKey , algorithm: Optional [ SignatureAlgorithm ] = None) -> None Sign the CRL with the provided private key and algorithm. Parameters: private_key ( CryptoPrivateKey ) \u2013 Private key used to sign the CRL. algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 Signature algorithm to use for signing.","title":"sign"},{"location":"types/crl/#pki_tools.types.crl.RevokedCertificate","text":"Bases: CryptoParser Represents a revoked certificate. Attributes: serial ( int ) \u2013 The serial number of the certificate. date ( datetime ) \u2013 The revocation date of the certificate. extensions ( Optional [ Extensions ] ) \u2013 Extensions associated with the certificate.","title":"RevokedCertificate"},{"location":"types/crl/#pki_tools.types.crl.RevokedCertificate.from_cryptography","text":"from_cryptography(crypto_obj: x509 . RevokedCertificate ) -> RevokedCertificate Create a RevokedCertificate object from a cryptography RevokedCertificate. Parameters: crypto_obj ( x509 . RevokedCertificate ) \u2013 Cryptography RevokedCertificate. Returns: RevokedCertificate ( RevokedCertificate ) \u2013 Instance of RevokedCertificate.","title":"from_cryptography"},{"location":"types/crypto_parser/","text":"CryptoParser \u00b6 Bases: BaseModel , abc . ABC CryptoParser is an abstract class used by all the types parsing cryptography objects into pki_tools pydantic classes. _string_dict abstractmethod \u00b6 _string_dict() -> Dict [ str , str ] Creates a dict representation of the object Returns: A dict containing all the keys in the CryptoParser _to_cryptography abstractmethod \u00b6 _to_cryptography() -> CryptoObject Creates a x509 cryptography object from this class Returns: A x509 cryptography object from_cryptography abstractmethod classmethod \u00b6 from_cryptography(crypto_obj: CryptoObject ) -> CryptoParser Parses a cryptography x509 object into a CryptoParser Parameters: crypto_obj ( CryptoObject ) \u2013 The cryptography object Returns: CryptoParser \u2013 CryptoParser object Encoding \u00b6 Bases: Enum Describes the encoding used for writing/reading InitCryptoParser objects. Attributes: PEM \u2013 PEM string format DER \u2013 DER binary format InitCryptoParser \u00b6 Bases: CryptoParser , abc . ABC Extends the CryptoParser into an object that requires initialization before it can be used (while created as a pki_tools object and not loaded from cryptography). This can, for example, be a Certificate that needs to be signed with a KeyPair containing the private key. Attempt to e.g. dumping a certificate to a PEM string without using the sign (init) function first will result in a MissingInit exception. Classes implementing the InitCryptoParser will also automatically get functions to load and write the objects with the supported Encoding as well as writing/reading the encoded content to/from files. der_bytes property \u00b6 der_bytes: bytes Returns the DER bytes of the object Returns: bytes \u2013 The DER bytes. pem_bytes property \u00b6 pem_bytes: bytes Returns the PEM bytes of the object Returns: bytes \u2013 The PEM bytes. pem_string property \u00b6 pem_string: str Returns: str \u2013 PEM decoded into a string from_der_bytes classmethod \u00b6 from_der_bytes(der: bytes ) -> InitCryptoParser Loads the object from DER bytes Parameters: der ( bytes ) \u2013 The DER encoded object Returns: InitCryptoParser \u2013 A created object from the DER bytes from_file classmethod \u00b6 from_file(file_path: str , encoding: Encoding = Encoding . PEM ) -> InitCryptoParser Reads a file containing one PEM into the object Parameters: file_path ( str ) \u2013 The path to the file (can be relative the caller or absolute) encoding ( Encoding , default: Encoding . PEM ) \u2013 The encoding to use for the dumped data Returns: The Certificate loaded from the specified file from_pem_string classmethod \u00b6 from_pem_string(pem: str ) -> InitCryptoParser Loads the object from a PEM string Parameters: pem ( str ) \u2013 The PEM encoded object in string format Returns: InitCryptoParser \u2013 A created object from the PEM to_file \u00b6 to_file(file_path: str , encoding: Encoding = Encoding . PEM ) -> None Saves the object with specified encoding to the specified file, creating it if it doesn't exist. Parameters: file_path ( str ) \u2013 The path to the file (can be relative the caller or absolute) encoding ( Encoding , default: Encoding . PEM ) \u2013 The encoding to use for the dumped data","title":"CryptoParser"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.CryptoParser","text":"Bases: BaseModel , abc . ABC CryptoParser is an abstract class used by all the types parsing cryptography objects into pki_tools pydantic classes.","title":"CryptoParser"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.CryptoParser._string_dict","text":"_string_dict() -> Dict [ str , str ] Creates a dict representation of the object Returns: A dict containing all the keys in the CryptoParser","title":"_string_dict"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.CryptoParser._to_cryptography","text":"_to_cryptography() -> CryptoObject Creates a x509 cryptography object from this class Returns: A x509 cryptography object","title":"_to_cryptography"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.CryptoParser.from_cryptography","text":"from_cryptography(crypto_obj: CryptoObject ) -> CryptoParser Parses a cryptography x509 object into a CryptoParser Parameters: crypto_obj ( CryptoObject ) \u2013 The cryptography object Returns: CryptoParser \u2013 CryptoParser object","title":"from_cryptography"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.Encoding","text":"Bases: Enum Describes the encoding used for writing/reading InitCryptoParser objects. Attributes: PEM \u2013 PEM string format DER \u2013 DER binary format","title":"Encoding"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser","text":"Bases: CryptoParser , abc . ABC Extends the CryptoParser into an object that requires initialization before it can be used (while created as a pki_tools object and not loaded from cryptography). This can, for example, be a Certificate that needs to be signed with a KeyPair containing the private key. Attempt to e.g. dumping a certificate to a PEM string without using the sign (init) function first will result in a MissingInit exception. Classes implementing the InitCryptoParser will also automatically get functions to load and write the objects with the supported Encoding as well as writing/reading the encoded content to/from files.","title":"InitCryptoParser"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.der_bytes","text":"der_bytes: bytes Returns the DER bytes of the object Returns: bytes \u2013 The DER bytes.","title":"der_bytes"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.pem_bytes","text":"pem_bytes: bytes Returns the PEM bytes of the object Returns: bytes \u2013 The PEM bytes.","title":"pem_bytes"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.pem_string","text":"pem_string: str Returns: str \u2013 PEM decoded into a string","title":"pem_string"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.from_der_bytes","text":"from_der_bytes(der: bytes ) -> InitCryptoParser Loads the object from DER bytes Parameters: der ( bytes ) \u2013 The DER encoded object Returns: InitCryptoParser \u2013 A created object from the DER bytes","title":"from_der_bytes"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.from_file","text":"from_file(file_path: str , encoding: Encoding = Encoding . PEM ) -> InitCryptoParser Reads a file containing one PEM into the object Parameters: file_path ( str ) \u2013 The path to the file (can be relative the caller or absolute) encoding ( Encoding , default: Encoding . PEM ) \u2013 The encoding to use for the dumped data Returns: The Certificate loaded from the specified file","title":"from_file"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.from_pem_string","text":"from_pem_string(pem: str ) -> InitCryptoParser Loads the object from a PEM string Parameters: pem ( str ) \u2013 The PEM encoded object in string format Returns: InitCryptoParser \u2013 A created object from the PEM","title":"from_pem_string"},{"location":"types/crypto_parser/#pki_tools.types.crypto_parser.InitCryptoParser.to_file","text":"to_file(file_path: str , encoding: Encoding = Encoding . PEM ) -> None Saves the object with specified encoding to the specified file, creating it if it doesn't exist. Parameters: file_path ( str ) \u2013 The path to the file (can be relative the caller or absolute) encoding ( Encoding , default: Encoding . PEM ) \u2013 The encoding to use for the dumped data","title":"to_file"},{"location":"types/csr/","text":"CertificateSigningRequest \u00b6 Bases: InitCryptoParser Represents a certificate signing request (CSR). Attributes: subject ( Name ) \u2013 The subject of the CSR. public_key ( Optional [ CryptoPublicKey ] ) \u2013 Public key associated with the CSR. extensions ( Optional [ Extensions ] ) \u2013 Extensions associated with the CSR. attributes ( Optional [ Dict [ str , bytes ]] ) \u2013 Attributes of the CSR. signature_algorithm ( Optional [ SignatureAlgorithm ] ) \u2013 Signature algorithm used while signing the CSR. Examples \u00b6 Create CSR \u00b6 from pki_tools import ( Name, CertificateSigningRequest, RSAKeyPair, SHA512, ) name = Name(cn=[\"Cert CN\"]) csr = CertificateSigningRequest(subject=name) csr.sign(RSAKeyPair.generate(), SHA512) print(csr.pem_string) Print output -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBALsMBs6Ty4ztSLrIj/2kEtUd+l/UkvD/oC8UTouZjfaP VbPcTuhi7RgeiKMafyHBGIp5PxgF+q5TlrIbNIvb7mQAuNhQfJOqNw/yVSVbEyo0 zw7mYyn58orObtKJYuK61JC/0XEklEreUom+BoLDwK3D22DUzgKkle9DYkybxJ/M wYcWqAe326qi/bBpLSSckGk7GF0l5UuKg0+Sgrok9oJY0MJgyrDlzhDVHlTAvI7s +mlFBSDZYj9Np2o/LI/7NZHXmq6m93W7wqo+eLkBlbnPu6QFjQKrPn7Y3Oy2D2gn SVtGhRRCjcbCDlcut7Jl6E9QTxDBdb0eHPpml5HoGt0CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQANicKRuvIhgbj0wM+EiDxtXzeR33Z8RM14bVJKnH7/hMwyyZ4B wBcSWwlmSYig5l9uBodHxKklDd9Avemzi0oREV2zDC6IGGvyvryPvaMlz8WgGMCr 5OMJid3YLMSDNhu4DhIia0mFNaV5cu1E6tQ4xVXeYmcJ6VTC44WgWUFvHYcILhZD XDuDKsTmWS04WmfPDjH9PCdsXgpPnC7jsWdhcfPFgaT0Q52VU3rXk1mL0gxXvmK3 6F/d5MdJTMDOfXo9yHMVul/YCROVaszFMTESatw1MEW8vxZCCMzDnRac8U85iUXb RdxgtpmC03zKviUxfCCAFLcsoYu+79bO0rwo -----END CERTIFICATE REQUEST----- InitCryptoParser.from_pem_string \u00b6 csr_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512 InitCryptoParser.from_file \u00b6 csr.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_file(\"csr.pem\") print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512 InitCryptoParser.to_file \u00b6 chain_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) csr.to_file(\"out_csr.pem\") out_cert.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- tbs_bytes property \u00b6 tbs_bytes: bytes Get the bytes to be signed of the CSR. Returns: bytes \u2013 TBS bytes of the CSR. from_cryptography classmethod \u00b6 from_cryptography(crypto_csr: x509 . CertificateSigningRequest ) -> CertificateSigningRequest Create a CertificateSigningRequest object from a cryptography CertificateSigningRequest. Parameters: crypto_csr ( x509 . CertificateSigningRequest ) \u2013 Cryptography CertificateSigningRequest. Returns: CertificateSigningRequest \u2013 Instance of CertificateSigningRequest. Example \u00b6 crypto_csr from cryptography import x509 csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" crypto_csr = x509.load_pem_x509_csr(csr_pem.encode()) from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_cryptography(crypto_csr) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512 sign \u00b6 sign(key_pair: CryptoKeyPair , signature_algorithm: Optional [ SignatureAlgorithm ] = None) Sign the CSR with the provided key pair and signature algorithm. Parameters: key_pair ( CryptoKeyPair ) \u2013 Key pair with the private key to use while signing the CSR signature_algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 Signature algorithm to use for signing.","title":"CertificateSigningRequest"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest","text":"Bases: InitCryptoParser Represents a certificate signing request (CSR). Attributes: subject ( Name ) \u2013 The subject of the CSR. public_key ( Optional [ CryptoPublicKey ] ) \u2013 Public key associated with the CSR. extensions ( Optional [ Extensions ] ) \u2013 Extensions associated with the CSR. attributes ( Optional [ Dict [ str , bytes ]] ) \u2013 Attributes of the CSR. signature_algorithm ( Optional [ SignatureAlgorithm ] ) \u2013 Signature algorithm used while signing the CSR.","title":"CertificateSigningRequest"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest--examples","text":"","title":"Examples"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest--create-csr","text":"from pki_tools import ( Name, CertificateSigningRequest, RSAKeyPair, SHA512, ) name = Name(cn=[\"Cert CN\"]) csr = CertificateSigningRequest(subject=name) csr.sign(RSAKeyPair.generate(), SHA512) print(csr.pem_string) Print output -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBALsMBs6Ty4ztSLrIj/2kEtUd+l/UkvD/oC8UTouZjfaP VbPcTuhi7RgeiKMafyHBGIp5PxgF+q5TlrIbNIvb7mQAuNhQfJOqNw/yVSVbEyo0 zw7mYyn58orObtKJYuK61JC/0XEklEreUom+BoLDwK3D22DUzgKkle9DYkybxJ/M wYcWqAe326qi/bBpLSSckGk7GF0l5UuKg0+Sgrok9oJY0MJgyrDlzhDVHlTAvI7s +mlFBSDZYj9Np2o/LI/7NZHXmq6m93W7wqo+eLkBlbnPu6QFjQKrPn7Y3Oy2D2gn SVtGhRRCjcbCDlcut7Jl6E9QTxDBdb0eHPpml5HoGt0CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQANicKRuvIhgbj0wM+EiDxtXzeR33Z8RM14bVJKnH7/hMwyyZ4B wBcSWwlmSYig5l9uBodHxKklDd9Avemzi0oREV2zDC6IGGvyvryPvaMlz8WgGMCr 5OMJid3YLMSDNhu4DhIia0mFNaV5cu1E6tQ4xVXeYmcJ6VTC44WgWUFvHYcILhZD XDuDKsTmWS04WmfPDjH9PCdsXgpPnC7jsWdhcfPFgaT0Q52VU3rXk1mL0gxXvmK3 6F/d5MdJTMDOfXo9yHMVul/YCROVaszFMTESatw1MEW8vxZCCMzDnRac8U85iUXb RdxgtpmC03zKviUxfCCAFLcsoYu+79bO0rwo -----END CERTIFICATE REQUEST-----","title":"Create CSR"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest--initcryptoparserfrom_pem_string","text":"csr_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"InitCryptoParser.from_pem_string"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest--initcryptoparserfrom_file","text":"csr.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_file(\"csr.pem\") print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"InitCryptoParser.from_file"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest--initcryptoparserto_file","text":"chain_pem csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_pem_string(csr_pem) csr.to_file(\"out_csr.pem\") out_cert.pem -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST-----","title":"InitCryptoParser.to_file"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest.tbs_bytes","text":"tbs_bytes: bytes Get the bytes to be signed of the CSR. Returns: bytes \u2013 TBS bytes of the CSR.","title":"tbs_bytes"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest.from_cryptography","text":"from_cryptography(crypto_csr: x509 . CertificateSigningRequest ) -> CertificateSigningRequest Create a CertificateSigningRequest object from a cryptography CertificateSigningRequest. Parameters: crypto_csr ( x509 . CertificateSigningRequest ) \u2013 Cryptography CertificateSigningRequest. Returns: CertificateSigningRequest \u2013 Instance of CertificateSigningRequest.","title":"from_cryptography"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest.from_cryptography--example","text":"crypto_csr from cryptography import x509 csr_pem = \"\"\" -----BEGIN CERTIFICATE REQUEST----- MIICVzCCAT8CAQAwEjEQMA4GA1UEAwwHQ2VydCBDTjCCASIwDQYJKoZIhvcNAQEB BQADggEPADCCAQoCggEBANOiYxJDZFLSPUpA98CtuDN4fL7UfQNIDrpqZJ4paQ6i YmkU1fFIjM/PtfCAPycV66JUOd0pVFQMajmZCaF0wfo6WONuhbqYlTojfUxD1l5S B9V9afhZqXt9L5AvHO6gf8bo6wHWGVtAL+FjYEa16BFwTiAqaFfXvRBcbgaAM2DD t5dmrYyOysAR0m6T5AkS2TANO4/+TF+cqIhHwwMc4PRDQigGTMwYgOa30qq7Cmn2 tnxFogjG1y3YhsuagIxUJHkCLEdY+Oizr2UTD8OM57UXrrrQ90yAmqfsSiBQ1p2A OJ9HCdzhsVIi1pneW3aR7hTBzxyVtDTrB8Uw817YBX8CAwEAAaAAMA0GCSqGSIb3 DQEBDQUAA4IBAQCoSEXDN9LObJnU+jpslg9IwciERem1kKjkkU5JHpX1ke9+8su/ qbFv8LUkwmmz09IQgQfYqaUJiMkuRwP9QX07o+0TJlMiog1XssCk3M/tJLDKjRSW auf4eI7124lv2LToRxOq7F5RWnnE5T4mAYlrcNgmjrJXQo8NcYhQrvAr2mRe3BaG 4n15VU4agfO9VB6DYE4tziiwsmiZTt3RAXM+GQ+uqnKz8gMyBgUxx+J6dmTO3RA0 E4/OFGv5Ujtx7iXFWxaiU2xbuWhsgB9KkcBMvKw53h2P+Src4aQxqPnpqc1+NtCL e59skp82bFTb8z71rtulJCrB5wVwmKu0vZRM -----END CERTIFICATE REQUEST----- \"\"\" crypto_csr = x509.load_pem_x509_csr(csr_pem.encode()) from pki_tools import CertificateSigningRequest csr = CertificateSigningRequest.from_cryptography(crypto_csr) print(csr) Print output --- Certificate Signing Request: Public Key: key_size: '2048' modulus_n: |- 26716358360742544711136558712918138457090578197784896616128362330453217873912769 38973797190331477144533828320851286368308484453249053131491260959451466856446960 43548112812652207234421352848628686980164413725264941098222269514216721188716622 65590866097496954872762228616694151448613403733748380224855089049580564759153027 66988474416809383902060297278802743411877979695292402720989981535491788799402318 64116191530708924188357355511896332177591494948825032722689481817669730807125787 41796163550115211562638399475127977459029514421310873620145663150204828820938017 426289749515165066297784261832441262414445871314870207871 public_exponent_e: '65537' Subject: 'CN: Cert CN' Extensions: {} Signature Algorithm: SHA512","title":"Example"},{"location":"types/csr/#pki_tools.types.csr.CertificateSigningRequest.sign","text":"sign(key_pair: CryptoKeyPair , signature_algorithm: Optional [ SignatureAlgorithm ] = None) Sign the CSR with the provided key pair and signature algorithm. Parameters: key_pair ( CryptoKeyPair ) \u2013 Key pair with the private key to use while signing the CSR signature_algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 Signature algorithm to use for signing.","title":"sign"},{"location":"types/enums/","text":"RevokeMode \u00b6 Bases: Enum Specifies in what precedence and protocols (OCSP, CRL) to check revocation status of a certificate Attributes: OCSP_FALLBACK_CRL \u2013 Check OCSP first and fallback to CRL if it fails OCSP_ONLY \u2013 Only check OCSP and ignore CRL CRL_ONLY \u2013 Only check CRL and ignore OCSP","title":"Enums"},{"location":"types/enums/#pki_tools.types.enums.RevokeMode","text":"Bases: Enum Specifies in what precedence and protocols (OCSP, CRL) to check revocation status of a certificate Attributes: OCSP_FALLBACK_CRL \u2013 Check OCSP first and fallback to CRL if it fails OCSP_ONLY \u2013 Only check OCSP and ignore CRL CRL_ONLY \u2013 Only check CRL and ignore OCSP","title":"RevokeMode"},{"location":"types/exceptions/","text":"CertExpired \u00b6 Bases: Error CertExpired CertIssuerMissingInChain \u00b6 Bases: Error CertIssuerMissingInChain CrlIdpInvalid \u00b6 Bases: Error CrlIdpInvalid Error \u00b6 Bases: Exception Error is the base pki_tools exception ExtensionMissing \u00b6 Bases: Error ExtensionMissing FetchFailure \u00b6 Bases: Error FetchFailure InvalidSignedType \u00b6 Bases: Error InvalidSignedType LoadError \u00b6 Bases: Error Risen when a IoCryptoParser implementing class could not be loaded properly. MissingBlockSize \u00b6 Bases: Error MissingBlockSize MissingInit \u00b6 Bases: Error Risen when the InitCryptoParser has not been initialized. NotCompleteChain \u00b6 Bases: Error NotCompleteChain OcspFetchFailure \u00b6 Bases: Error OcspFetchFailure OcspInvalidResponseStatus \u00b6 Bases: Error OcspInvalidResponseStatus OcspIssuerFetchFailure \u00b6 Bases: Error OcspIssuerFetchFailure RevokeCheckFailed \u00b6 Bases: Error RevokeCheckFailed SignatureVerificationFailed \u00b6 Bases: Error SignatureVerificationFailed","title":"Exceptions"},{"location":"types/exceptions/#pki_tools.exceptions.CertExpired","text":"Bases: Error CertExpired","title":"CertExpired"},{"location":"types/exceptions/#pki_tools.exceptions.CertIssuerMissingInChain","text":"Bases: Error CertIssuerMissingInChain","title":"CertIssuerMissingInChain"},{"location":"types/exceptions/#pki_tools.exceptions.CrlIdpInvalid","text":"Bases: Error CrlIdpInvalid","title":"CrlIdpInvalid"},{"location":"types/exceptions/#pki_tools.exceptions.Error","text":"Bases: Exception Error is the base pki_tools exception","title":"Error"},{"location":"types/exceptions/#pki_tools.exceptions.ExtensionMissing","text":"Bases: Error ExtensionMissing","title":"ExtensionMissing"},{"location":"types/exceptions/#pki_tools.exceptions.FetchFailure","text":"Bases: Error FetchFailure","title":"FetchFailure"},{"location":"types/exceptions/#pki_tools.exceptions.InvalidSignedType","text":"Bases: Error InvalidSignedType","title":"InvalidSignedType"},{"location":"types/exceptions/#pki_tools.exceptions.LoadError","text":"Bases: Error Risen when a IoCryptoParser implementing class could not be loaded properly.","title":"LoadError"},{"location":"types/exceptions/#pki_tools.exceptions.MissingBlockSize","text":"Bases: Error MissingBlockSize","title":"MissingBlockSize"},{"location":"types/exceptions/#pki_tools.exceptions.MissingInit","text":"Bases: Error Risen when the InitCryptoParser has not been initialized.","title":"MissingInit"},{"location":"types/exceptions/#pki_tools.exceptions.NotCompleteChain","text":"Bases: Error NotCompleteChain","title":"NotCompleteChain"},{"location":"types/exceptions/#pki_tools.exceptions.OcspFetchFailure","text":"Bases: Error OcspFetchFailure","title":"OcspFetchFailure"},{"location":"types/exceptions/#pki_tools.exceptions.OcspInvalidResponseStatus","text":"Bases: Error OcspInvalidResponseStatus","title":"OcspInvalidResponseStatus"},{"location":"types/exceptions/#pki_tools.exceptions.OcspIssuerFetchFailure","text":"Bases: Error OcspIssuerFetchFailure","title":"OcspIssuerFetchFailure"},{"location":"types/exceptions/#pki_tools.exceptions.RevokeCheckFailed","text":"Bases: Error RevokeCheckFailed","title":"RevokeCheckFailed"},{"location":"types/exceptions/#pki_tools.exceptions.SignatureVerificationFailed","text":"Bases: Error SignatureVerificationFailed","title":"SignatureVerificationFailed"},{"location":"types/extensions/","text":"AccessDescription \u00b6 Bases: CryptoParser Represents an Access Description in X.509 certificates. Attributes: access_method ( AccessDescriptionId ) \u2013 The access method identifier. access_location ( GeneralName ) \u2013 The access location. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . AccessDescription ) -> AccessDescription Constructs an AccessDescription object from a cryptography AccessDescription object. Parameters: extension ( x509 . AccessDescription ) \u2013 The cryptography AccessDescription object. Returns: AccessDescription \u2013 The constructed AccessDescription object. AccessDescriptionId \u00b6 Bases: Enum Enumeration of access description identifiers for X.509 certificates. AlternativeName \u00b6 Bases: Extension Represents an alternative name extension. Attributes: general_names ( List [ GeneralName ] ) \u2013 List of general names. from_cryptography classmethod \u00b6 from_cryptography(extension: Union [ x509 . SubjectAlternativeName , x509 . IssuerAlternativeName ]) -> AlternativeName Create an AlternativeName instance from a cryptography SubjectAlternativeName or IssuerAlternativeName object. Parameters: extension ( Union [ x509 . SubjectAlternativeName , x509 . IssuerAlternativeName ] ) \u2013 The cryptography SubjectAlternativeName or IssuerAlternativeName object. Returns: AlternativeName \u2013 The AlternativeName instance. AttributeTypeAndValue \u00b6 Bases: CryptoParser Represents an Attribute Type and Value in X.509 certificates. Attributes: oid ( str ) \u2013 The Object Identifier (OID) of the attribute. value ( str ) \u2013 The value of the attribute. from_cryptography classmethod \u00b6 from_cryptography(x509_obj: x509 . NameAttribute ) -> AttributeTypeAndValue Constructs an AttributeTypeAndValue object from a cryptography NameAttribute object. Parameters: x509_obj ( x509 . NameAttribute ) \u2013 The cryptography NameAttribute object. Returns: AttributeTypeAndValue \u2013 The constructed AttributeTypeAndValue object. AuthorityInformationAccess \u00b6 Bases: Extension Represents the Authority Information Access extension in X.509 certificates. Attributes: access_description ( List [ AccessDescription ] ) \u2013 List of access descriptions. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . AuthorityInformationAccess ) -> AuthorityInformationAccess Constructs an AuthorityInformationAccess object from a cryptography AuthorityInformationAccess object. Parameters: extension ( x509 . AuthorityInformationAccess ) \u2013 The cryptography AuthorityInformationAccess object. Returns: AuthorityInformationAccess \u2013 The constructed AuthorityInformationAccess object. AuthorityKeyIdentifier \u00b6 Bases: Extension Represents an authority key identifier extension. Attributes: key_identifier ( Optional [ bytes ] ) \u2013 The key identifier. authority_cert_issuer ( Optional [ List [ GeneralName ]] ) \u2013 The issuer of the authority certificate. authority_cert_serial_number ( Optional [ int ] ) \u2013 The serial number of the authority certificate. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . AuthorityKeyIdentifier ) -> AuthorityKeyIdentifier Create an AuthorityKeyIdentifier instance from a cryptography AuthorityKeyIdentifier object. Parameters: extension ( x509 . AuthorityKeyIdentifier ) \u2013 The cryptography AuthorityKeyIdentifier object. Returns: AuthorityKeyIdentifier \u2013 The AuthorityKeyIdentifier instance. BasicConstraints \u00b6 Bases: Extension Represents a basic constraints extension. Attributes: ca ( bool ) \u2013 Indicates if the certificate is a CA. path_len_constrain ( bool ) \u2013 The path length constraint. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . BasicConstraints ) -> BasicConstraints Create a BasicConstraints instance from a cryptography BasicConstraints object. Parameters: extension ( x509 . BasicConstraints ) \u2013 The cryptography BasicConstraints object. Returns: BasicConstraints \u2013 The BasicConstraints instance. CertificatePolicies \u00b6 Bases: Extension Represents a certificate policies extension. Attributes: policy_information ( List [ PolicyInformation ] ) \u2013 List of policy information. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . CertificatePolicies ) -> CertificatePolicies Create a CertificatePolicies instance from a cryptography CertificatePolicies object. Parameters: extension ( x509 . CertificatePolicies ) \u2013 The cryptography CertificatePolicies object. Returns: CertificatePolicies \u2013 The CertificatePolicies instance. CrlDistributionPoints \u00b6 Bases: Extension Represents the CRL Distribution Points extension in X.509 certificates. Attributes: crl_distribution_points ( List [ DistributionPoint ] ) \u2013 List of CRL distribution points. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . CRLDistributionPoints ) -> CrlDistributionPoints Constructs a CrlDistributionPoints object from a cryptography CRLDistributionPoints object. Parameters: extension ( x509 . CRLDistributionPoints ) \u2013 The cryptography CRLDistributionPoints object. Returns: CrlDistributionPoints \u2013 The constructed CrlDistributionPoints object. DirectoryName \u00b6 Bases: GeneralName Represents a directory name. Attributes: value ( Union [ str , Name ] ) \u2013 The directory name value. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: x509 . GeneralName ) -> DirectoryName Create a DirectoryName instance from a cryptography DirectoryName object. Parameters: crypto_obj ( x509 . GeneralName ) \u2013 The cryptography DirectoryName object. Returns: DirectoryName \u2013 The DirectoryName instance. DistributionPoint \u00b6 Bases: CryptoParser Represents a Distribution Point in X.509 certificates. Attributes: full_name ( Optional [ List [ GeneralName ]] ) \u2013 List of full names associated with the distribution point. name_relative_to_crl_issuer ( Optional [ RelativeDistinguishedName ] ) \u2013 Relative name to the CRL issuer. reasons ( Optional [ List [ Reason ]] ) \u2013 List of reasons for the distribution point. crl_issuer ( Optional [ List [ GeneralName ]] ) \u2013 List of CRL issuers associated with the distribution point. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . DistributionPoint ) -> DistributionPoint Constructs a DistributionPoint object from a cryptography DistributionPoint object. Parameters: extension ( x509 . DistributionPoint ) \u2013 The cryptography DistributionPoint object. Returns: DistributionPoint ( DistributionPoint ) \u2013 The constructed DistributionPoint object. DnsName \u00b6 Bases: GeneralName Represents a DNS name. Attributes: value ( Union [ str , Name ] ) \u2013 The DNS name value. ExtendedKeyUsage \u00b6 Bases: Extension Represents the Extended Key Usage extension in X.509 certificates. Attributes: ext_key_usage_syntax ( List [ str ] ) \u2013 List of extended key usage OIDs. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . ExtendedKeyUsage ) -> ExtendedKeyUsage Constructs an ExtendedKeyUsage object from a cryptography ExtendedKeyUsage object. Parameters: extension ( x509 . ExtendedKeyUsage ) \u2013 The cryptography ExtendedKeyUsage object. Returns: ExtendedKeyUsage \u2013 The constructed ExtendedKeyUsage object. Extension \u00b6 Bases: CryptoParser Represents a cryptographic extension. Attributes: critical ( Optional [ bool ] ) \u2013 Indicates whether the extension is critical. name property \u00b6 name: str Get the name of the extension. Returns: str ( str ) \u2013 The name of the extension. Extensions \u00b6 Bases: CryptoParser Extensions in X.509 certificates. Attributes: authority_key_identifier ( Optional [ AuthorityKeyIdentifier ] ) \u2013 Authority Key Identifier extension. subject_key_identifier ( Optional [ SubjectKeyIdentifier ] ) \u2013 Subject Key Identifier extension. key_usage ( Optional [ KeyUsage ] ) \u2013 Key Usage extension. certificate_policies ( Optional [ CertificatePolicies ] ) \u2013 Certificate Policies extension. subject_alternative_name ( Optional [ SubjectAlternativeName ] ) \u2013 Subject Alternative Name extension. issuer_alternative_name ( Optional [ IssuerAlternativeName ] ) \u2013 Issuer Alternative Name extension. subject_directory_attributes ( Optional [ SubjectDirectoryAttributes ] ) \u2013 Subject Directory Attributes extension. basic_constraints ( Optional [ BasicConstraints ] ) \u2013 Basic Constraints extension. name_constraints ( Optional [ NameConstraints ] ) \u2013 Name Constraints extension. policy_constraints ( Optional [ PolicyConstraints ] ) \u2013 Policy Constraints extension. extended_key_usage ( Optional [ ExtendedKeyUsage ] ) \u2013 Extended Key Usage extension. crl_distribution_points ( Optional [ CrlDistributionPoints ] ) \u2013 CRL Distribution Points extension. issuing_distribution_point ( Optional [ IssuingDistributionPoint ] ) \u2013 Issuer Distribution Points extension. inhibit_any_policy ( Optional [ InhibitAnyPolicy ] ) \u2013 Inhibit Any Policy extension. freshest_crl ( Optional [ FreshestCrl ] ) \u2013 Freshest CRL extension. authority_information_access ( Optional [ AuthorityInformationAccess ] ) \u2013 Authority Information Access extension. subject_information_access ( Optional [ SubjectInformationAccess ] ) \u2013 Subject Information Access extension. from_cryptography classmethod \u00b6 from_cryptography(cert_extensions: x509 . Extensions ) -> Extensions Constructs an Extensions object from cryptography X.509 Extensions. Parameters: cert_extensions ( x509 . Extensions ) \u2013 The cryptography X.509 Extensions. Returns: Extensions \u2013 The constructed Extensions object. FreshestCrl \u00b6 Bases: CrlDistributionPoints Represents the Freshest CRL extension in X.509 certificates. GeneralName \u00b6 Bases: CryptoParser Represents a general name. Attributes: name ( str ) \u2013 The name of the general name. value ( Union [ str , Name ] ) \u2013 The value of the general name. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: x509 . GeneralName ) -> GeneralName Create a GeneralName instance from a cryptography GeneralName object. Parameters: crypto_obj ( x509 . GeneralName ) \u2013 The cryptography GeneralName object. Returns: GeneralName \u2013 The GeneralName instance. InhibitAnyPolicy \u00b6 Bases: Extension Represents the Inhibit Any Policy extension in X.509 certificates. Attributes: skip_certs ( int ) \u2013 Number of certificates to skip. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . InhibitAnyPolicy ) -> InhibitAnyPolicy Constructs an InhibitAnyPolicy object from a cryptography InhibitAnyPolicy object. Parameters: extension ( x509 . InhibitAnyPolicy ) \u2013 The cryptography InhibitAnyPolicy object. Returns: InhibitAnyPolicy \u2013 The constructed InhibitAnyPolicy object. IpAddress \u00b6 Bases: GeneralName Represents an IP address. Can either be a IPv4/IPv6 single address or network. Attributes: value ( Union [ str , Name ] ) \u2013 The IP address or network IssuerAlternativeName \u00b6 Bases: AlternativeName Represents an issuer alternative name extension. IssuingDistributionPoint \u00b6 Bases: Extension Represents the Issuing Distribution Points extension in X.509 certificates. Attributes: full_name ( Optional [ List [ GeneralName ]] ) \u2013 List of full names associated with the distribution point. name_relative_to_crl_issuer ( Optional [ RelativeDistinguishedName ] ) \u2013 Relative name to the CRL issuer. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . IssuingDistributionPoint ) -> IssuingDistributionPoint Constructs a IssuingDistributionPoint object from a cryptography IssuingDistributionPoint object. Parameters: extension ( x509 . IssuingDistributionPoint ) \u2013 The cryptography IssuingDistributionPoint object. Returns: IssuingDistributionPoint ( IssuingDistributionPoint ) \u2013 The constructed IssuingDistributionPoint IssuingDistributionPoint \u2013 object. KeyUsage \u00b6 Bases: Extension Represents a key usage extension. Attributes: digital_signature ( bool ) \u2013 Indicates if digital signature is allowed. content_commitment ( bool ) \u2013 Indicates if content commitment is allowed. key_encipherment ( bool ) \u2013 Indicates if key encipherment is allowed. data_encipherment ( bool ) \u2013 Indicates if data encipherment is allowed. key_agreement ( bool ) \u2013 Indicates if key agreement is allowed. key_cert_sign ( bool ) \u2013 Indicates if key certificate signing is allowed. crl_sign ( bool ) \u2013 Indicates if CRL signing is allowed. encipher_only ( bool ) \u2013 Indicates if encipher only is allowed. decipher_only ( bool ) \u2013 Indicates if decipher only is allowed. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . KeyUsage ) -> KeyUsage Create a KeyUsage instance from a cryptography KeyUsage object. Parameters: extension ( x509 . KeyUsage ) \u2013 The cryptography KeyUsage object. Returns: KeyUsage \u2013 The KeyUsage instance. NameConstraints \u00b6 Bases: Extension Represents a name constraints extension. Attributes: permitted_subtrees ( Optional [ List [ GeneralName ]] ) \u2013 List of permitted subtrees. excluded_subtrees ( Optional [ List [ GeneralName ]] ) \u2013 List of excluded subtrees. NoticeReference \u00b6 Bases: Extension Represents a notice reference extension. Attributes: organization ( str ) \u2013 The organization associated with the notice. notice_numbers ( List [ int ] ) \u2013 List of notice numbers. OtherName \u00b6 Bases: GeneralName Represents an other name. Attributes: value ( Union [ str , Name ] ) \u2013 The other name value. oid ( str ) \u2013 The object identifier (OID) of the other name. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: x509 . OtherName ) -> OtherName Create a OtherName instance from a cryptography OtherName object. Parameters: crypto_obj ( x509 . OtherName ) \u2013 The cryptography OtherName object. Returns: OtherName \u2013 The OtherName instance. PolicyConstraints \u00b6 Bases: Extension Represents a policy constraints extension. Attributes: require_explicit_policy ( Optional [ int ] ) \u2013 The require explicit policy value. inhibit_policy_mapping ( Optional [ int ] ) \u2013 The inhibit policy mapping value. PolicyInformation \u00b6 Bases: Extension Represents a policy information extension. Attributes: policy_identifier ( str ) \u2013 The policy identifier associated with the policy information. policy_qualifiers ( Optional [ List [ Union [ str , UserNotice ]]] ) \u2013 List of policy qualifiers. from_cryptography classmethod \u00b6 from_cryptography(policy_info: x509 . PolicyInformation ) -> PolicyInformation Create a PolicyInformation instance from a cryptography PolicyInformation object. Parameters: policy_info ( x509 . PolicyInformation ) \u2013 The cryptography PolicyInformation object. Returns: PolicyInformation \u2013 The PolicyInformation instance. RFC822Name \u00b6 Bases: GeneralName Represents an RFC822 name. Attributes: value ( Union [ str , Name ] ) \u2013 The RFC822 name value. Reason \u00b6 Bases: Enum Reasons for the DistributionPoint extension RegisteredId \u00b6 Bases: GeneralName Represents a registered ID. Attributes: value ( Union [ str , Name ] ) \u2013 The registered ID value. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: x509 . RegisteredID ) -> RegisteredId Create a RegisteredId instance from a cryptography RegisteredId object. Parameters: crypto_obj ( x509 . RegisteredID ) \u2013 The cryptography RegisteredId object. Returns: RegisteredId \u2013 The RegisteredId instance. RelativeDistinguishedName \u00b6 Bases: CryptoParser Represents a Relative Distinguished Name in X.509 certificates. Attributes: attributes ( List [ AttributeTypeAndValue ] ) \u2013 List of attributes in the RDN. from_cryptography classmethod \u00b6 from_cryptography(x509_obj: x509 . RelativeDistinguishedName ) -> RelativeDistinguishedName Constructs a RelativeDistinguishedName object from a cryptography RelativeDistinguishedName object. Parameters: x509_obj ( x509 . RelativeDistinguishedName ) \u2013 The cryptography RelativeDistinguishedName object. Returns: RelativeDistinguishedName \u2013 The constructed RelativeDistinguishedName object. SubjectAlternativeName \u00b6 Bases: AlternativeName Represents a subject alternative name extension. SubjectDirectoryAttributes \u00b6 Bases: Extension Represents a subject directory attributes extension. Attributes: attributes ( List [ str ] ) \u2013 List of attributes. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . UnrecognizedExtension ) -> SubjectDirectoryAttributes Create a SubjectDirectoryAttributes instance from a cryptography UnrecognizedExtension object. Parameters: extension ( x509 . UnrecognizedExtension ) \u2013 The cryptography UnrecognizedExtension object. Returns: SubjectDirectoryAttributes \u2013 The SubjectDirectoryAttributes instance. SubjectInformationAccess \u00b6 Bases: AuthorityInformationAccess Represents the Subject Information Access extension in X.509 certificates. SubjectKeyIdentifier \u00b6 Bases: Extension Represents a subject key identifier extension. Attributes: subject_key_identifier ( bytes ) \u2013 The subject key identifier. from_cryptography classmethod \u00b6 from_cryptography(extension: x509 . SubjectKeyIdentifier ) -> SubjectKeyIdentifier Create a SubjectKeyIdentifier instance from a cryptography SubjectKeyIdentifier object. Parameters: extension ( x509 . SubjectKeyIdentifier ) \u2013 The cryptography SubjectKeyIdentifier object. Returns: SubjectKeyIdentifier \u2013 The SubjectKeyIdentifier instance. UniformResourceIdentifier \u00b6 Bases: GeneralName Represents a uniform resource identifier (URI). Attributes: value ( Union [ str , Name ] ) \u2013 The URI value. UserNotice \u00b6 Bases: Extension Represents a user notice extension. Attributes: notice_reference ( Optional [ NoticeReference ] ) \u2013 The notice reference associated with the user notice. explicit_text ( Optional [ str ] ) \u2013 The explicit text of the user notice. from_cryptography classmethod \u00b6 from_cryptography(policy_info: x509 . UserNotice ) -> UserNotice Create a UserNotice instance from a cryptography UserNotice object. Parameters: policy_info ( x509 . UserNotice ) \u2013 The cryptography UserNotice object. Returns: UserNotice \u2013 The UserNotice instance.","title":"Extensions"},{"location":"types/extensions/#pki_tools.types.extensions.AccessDescription","text":"Bases: CryptoParser Represents an Access Description in X.509 certificates. Attributes: access_method ( AccessDescriptionId ) \u2013 The access method identifier. access_location ( GeneralName ) \u2013 The access location.","title":"AccessDescription"},{"location":"types/extensions/#pki_tools.types.extensions.AccessDescription.from_cryptography","text":"from_cryptography(extension: x509 . AccessDescription ) -> AccessDescription Constructs an AccessDescription object from a cryptography AccessDescription object. Parameters: extension ( x509 . AccessDescription ) \u2013 The cryptography AccessDescription object. Returns: AccessDescription \u2013 The constructed AccessDescription object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.AccessDescriptionId","text":"Bases: Enum Enumeration of access description identifiers for X.509 certificates.","title":"AccessDescriptionId"},{"location":"types/extensions/#pki_tools.types.extensions.AlternativeName","text":"Bases: Extension Represents an alternative name extension. Attributes: general_names ( List [ GeneralName ] ) \u2013 List of general names.","title":"AlternativeName"},{"location":"types/extensions/#pki_tools.types.extensions.AlternativeName.from_cryptography","text":"from_cryptography(extension: Union [ x509 . SubjectAlternativeName , x509 . IssuerAlternativeName ]) -> AlternativeName Create an AlternativeName instance from a cryptography SubjectAlternativeName or IssuerAlternativeName object. Parameters: extension ( Union [ x509 . SubjectAlternativeName , x509 . IssuerAlternativeName ] ) \u2013 The cryptography SubjectAlternativeName or IssuerAlternativeName object. Returns: AlternativeName \u2013 The AlternativeName instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.AttributeTypeAndValue","text":"Bases: CryptoParser Represents an Attribute Type and Value in X.509 certificates. Attributes: oid ( str ) \u2013 The Object Identifier (OID) of the attribute. value ( str ) \u2013 The value of the attribute.","title":"AttributeTypeAndValue"},{"location":"types/extensions/#pki_tools.types.extensions.AttributeTypeAndValue.from_cryptography","text":"from_cryptography(x509_obj: x509 . NameAttribute ) -> AttributeTypeAndValue Constructs an AttributeTypeAndValue object from a cryptography NameAttribute object. Parameters: x509_obj ( x509 . NameAttribute ) \u2013 The cryptography NameAttribute object. Returns: AttributeTypeAndValue \u2013 The constructed AttributeTypeAndValue object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.AuthorityInformationAccess","text":"Bases: Extension Represents the Authority Information Access extension in X.509 certificates. Attributes: access_description ( List [ AccessDescription ] ) \u2013 List of access descriptions.","title":"AuthorityInformationAccess"},{"location":"types/extensions/#pki_tools.types.extensions.AuthorityInformationAccess.from_cryptography","text":"from_cryptography(extension: x509 . AuthorityInformationAccess ) -> AuthorityInformationAccess Constructs an AuthorityInformationAccess object from a cryptography AuthorityInformationAccess object. Parameters: extension ( x509 . AuthorityInformationAccess ) \u2013 The cryptography AuthorityInformationAccess object. Returns: AuthorityInformationAccess \u2013 The constructed AuthorityInformationAccess object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.AuthorityKeyIdentifier","text":"Bases: Extension Represents an authority key identifier extension. Attributes: key_identifier ( Optional [ bytes ] ) \u2013 The key identifier. authority_cert_issuer ( Optional [ List [ GeneralName ]] ) \u2013 The issuer of the authority certificate. authority_cert_serial_number ( Optional [ int ] ) \u2013 The serial number of the authority certificate.","title":"AuthorityKeyIdentifier"},{"location":"types/extensions/#pki_tools.types.extensions.AuthorityKeyIdentifier.from_cryptography","text":"from_cryptography(extension: x509 . AuthorityKeyIdentifier ) -> AuthorityKeyIdentifier Create an AuthorityKeyIdentifier instance from a cryptography AuthorityKeyIdentifier object. Parameters: extension ( x509 . AuthorityKeyIdentifier ) \u2013 The cryptography AuthorityKeyIdentifier object. Returns: AuthorityKeyIdentifier \u2013 The AuthorityKeyIdentifier instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.BasicConstraints","text":"Bases: Extension Represents a basic constraints extension. Attributes: ca ( bool ) \u2013 Indicates if the certificate is a CA. path_len_constrain ( bool ) \u2013 The path length constraint.","title":"BasicConstraints"},{"location":"types/extensions/#pki_tools.types.extensions.BasicConstraints.from_cryptography","text":"from_cryptography(extension: x509 . BasicConstraints ) -> BasicConstraints Create a BasicConstraints instance from a cryptography BasicConstraints object. Parameters: extension ( x509 . BasicConstraints ) \u2013 The cryptography BasicConstraints object. Returns: BasicConstraints \u2013 The BasicConstraints instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.CertificatePolicies","text":"Bases: Extension Represents a certificate policies extension. Attributes: policy_information ( List [ PolicyInformation ] ) \u2013 List of policy information.","title":"CertificatePolicies"},{"location":"types/extensions/#pki_tools.types.extensions.CertificatePolicies.from_cryptography","text":"from_cryptography(extension: x509 . CertificatePolicies ) -> CertificatePolicies Create a CertificatePolicies instance from a cryptography CertificatePolicies object. Parameters: extension ( x509 . CertificatePolicies ) \u2013 The cryptography CertificatePolicies object. Returns: CertificatePolicies \u2013 The CertificatePolicies instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.CrlDistributionPoints","text":"Bases: Extension Represents the CRL Distribution Points extension in X.509 certificates. Attributes: crl_distribution_points ( List [ DistributionPoint ] ) \u2013 List of CRL distribution points.","title":"CrlDistributionPoints"},{"location":"types/extensions/#pki_tools.types.extensions.CrlDistributionPoints.from_cryptography","text":"from_cryptography(extension: x509 . CRLDistributionPoints ) -> CrlDistributionPoints Constructs a CrlDistributionPoints object from a cryptography CRLDistributionPoints object. Parameters: extension ( x509 . CRLDistributionPoints ) \u2013 The cryptography CRLDistributionPoints object. Returns: CrlDistributionPoints \u2013 The constructed CrlDistributionPoints object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.DirectoryName","text":"Bases: GeneralName Represents a directory name. Attributes: value ( Union [ str , Name ] ) \u2013 The directory name value.","title":"DirectoryName"},{"location":"types/extensions/#pki_tools.types.extensions.DirectoryName.from_cryptography","text":"from_cryptography(crypto_obj: x509 . GeneralName ) -> DirectoryName Create a DirectoryName instance from a cryptography DirectoryName object. Parameters: crypto_obj ( x509 . GeneralName ) \u2013 The cryptography DirectoryName object. Returns: DirectoryName \u2013 The DirectoryName instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.DistributionPoint","text":"Bases: CryptoParser Represents a Distribution Point in X.509 certificates. Attributes: full_name ( Optional [ List [ GeneralName ]] ) \u2013 List of full names associated with the distribution point. name_relative_to_crl_issuer ( Optional [ RelativeDistinguishedName ] ) \u2013 Relative name to the CRL issuer. reasons ( Optional [ List [ Reason ]] ) \u2013 List of reasons for the distribution point. crl_issuer ( Optional [ List [ GeneralName ]] ) \u2013 List of CRL issuers associated with the distribution point.","title":"DistributionPoint"},{"location":"types/extensions/#pki_tools.types.extensions.DistributionPoint.from_cryptography","text":"from_cryptography(extension: x509 . DistributionPoint ) -> DistributionPoint Constructs a DistributionPoint object from a cryptography DistributionPoint object. Parameters: extension ( x509 . DistributionPoint ) \u2013 The cryptography DistributionPoint object. Returns: DistributionPoint ( DistributionPoint ) \u2013 The constructed DistributionPoint object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.DnsName","text":"Bases: GeneralName Represents a DNS name. Attributes: value ( Union [ str , Name ] ) \u2013 The DNS name value.","title":"DnsName"},{"location":"types/extensions/#pki_tools.types.extensions.ExtendedKeyUsage","text":"Bases: Extension Represents the Extended Key Usage extension in X.509 certificates. Attributes: ext_key_usage_syntax ( List [ str ] ) \u2013 List of extended key usage OIDs.","title":"ExtendedKeyUsage"},{"location":"types/extensions/#pki_tools.types.extensions.ExtendedKeyUsage.from_cryptography","text":"from_cryptography(extension: x509 . ExtendedKeyUsage ) -> ExtendedKeyUsage Constructs an ExtendedKeyUsage object from a cryptography ExtendedKeyUsage object. Parameters: extension ( x509 . ExtendedKeyUsage ) \u2013 The cryptography ExtendedKeyUsage object. Returns: ExtendedKeyUsage \u2013 The constructed ExtendedKeyUsage object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.Extension","text":"Bases: CryptoParser Represents a cryptographic extension. Attributes: critical ( Optional [ bool ] ) \u2013 Indicates whether the extension is critical.","title":"Extension"},{"location":"types/extensions/#pki_tools.types.extensions.Extension.name","text":"name: str Get the name of the extension. Returns: str ( str ) \u2013 The name of the extension.","title":"name"},{"location":"types/extensions/#pki_tools.types.extensions.Extensions","text":"Bases: CryptoParser Extensions in X.509 certificates. Attributes: authority_key_identifier ( Optional [ AuthorityKeyIdentifier ] ) \u2013 Authority Key Identifier extension. subject_key_identifier ( Optional [ SubjectKeyIdentifier ] ) \u2013 Subject Key Identifier extension. key_usage ( Optional [ KeyUsage ] ) \u2013 Key Usage extension. certificate_policies ( Optional [ CertificatePolicies ] ) \u2013 Certificate Policies extension. subject_alternative_name ( Optional [ SubjectAlternativeName ] ) \u2013 Subject Alternative Name extension. issuer_alternative_name ( Optional [ IssuerAlternativeName ] ) \u2013 Issuer Alternative Name extension. subject_directory_attributes ( Optional [ SubjectDirectoryAttributes ] ) \u2013 Subject Directory Attributes extension. basic_constraints ( Optional [ BasicConstraints ] ) \u2013 Basic Constraints extension. name_constraints ( Optional [ NameConstraints ] ) \u2013 Name Constraints extension. policy_constraints ( Optional [ PolicyConstraints ] ) \u2013 Policy Constraints extension. extended_key_usage ( Optional [ ExtendedKeyUsage ] ) \u2013 Extended Key Usage extension. crl_distribution_points ( Optional [ CrlDistributionPoints ] ) \u2013 CRL Distribution Points extension. issuing_distribution_point ( Optional [ IssuingDistributionPoint ] ) \u2013 Issuer Distribution Points extension. inhibit_any_policy ( Optional [ InhibitAnyPolicy ] ) \u2013 Inhibit Any Policy extension. freshest_crl ( Optional [ FreshestCrl ] ) \u2013 Freshest CRL extension. authority_information_access ( Optional [ AuthorityInformationAccess ] ) \u2013 Authority Information Access extension. subject_information_access ( Optional [ SubjectInformationAccess ] ) \u2013 Subject Information Access extension.","title":"Extensions"},{"location":"types/extensions/#pki_tools.types.extensions.Extensions.from_cryptography","text":"from_cryptography(cert_extensions: x509 . Extensions ) -> Extensions Constructs an Extensions object from cryptography X.509 Extensions. Parameters: cert_extensions ( x509 . Extensions ) \u2013 The cryptography X.509 Extensions. Returns: Extensions \u2013 The constructed Extensions object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.FreshestCrl","text":"Bases: CrlDistributionPoints Represents the Freshest CRL extension in X.509 certificates.","title":"FreshestCrl"},{"location":"types/extensions/#pki_tools.types.extensions.GeneralName","text":"Bases: CryptoParser Represents a general name. Attributes: name ( str ) \u2013 The name of the general name. value ( Union [ str , Name ] ) \u2013 The value of the general name.","title":"GeneralName"},{"location":"types/extensions/#pki_tools.types.extensions.GeneralName.from_cryptography","text":"from_cryptography(crypto_obj: x509 . GeneralName ) -> GeneralName Create a GeneralName instance from a cryptography GeneralName object. Parameters: crypto_obj ( x509 . GeneralName ) \u2013 The cryptography GeneralName object. Returns: GeneralName \u2013 The GeneralName instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.InhibitAnyPolicy","text":"Bases: Extension Represents the Inhibit Any Policy extension in X.509 certificates. Attributes: skip_certs ( int ) \u2013 Number of certificates to skip.","title":"InhibitAnyPolicy"},{"location":"types/extensions/#pki_tools.types.extensions.InhibitAnyPolicy.from_cryptography","text":"from_cryptography(extension: x509 . InhibitAnyPolicy ) -> InhibitAnyPolicy Constructs an InhibitAnyPolicy object from a cryptography InhibitAnyPolicy object. Parameters: extension ( x509 . InhibitAnyPolicy ) \u2013 The cryptography InhibitAnyPolicy object. Returns: InhibitAnyPolicy \u2013 The constructed InhibitAnyPolicy object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.IpAddress","text":"Bases: GeneralName Represents an IP address. Can either be a IPv4/IPv6 single address or network. Attributes: value ( Union [ str , Name ] ) \u2013 The IP address or network","title":"IpAddress"},{"location":"types/extensions/#pki_tools.types.extensions.IssuerAlternativeName","text":"Bases: AlternativeName Represents an issuer alternative name extension.","title":"IssuerAlternativeName"},{"location":"types/extensions/#pki_tools.types.extensions.IssuingDistributionPoint","text":"Bases: Extension Represents the Issuing Distribution Points extension in X.509 certificates. Attributes: full_name ( Optional [ List [ GeneralName ]] ) \u2013 List of full names associated with the distribution point. name_relative_to_crl_issuer ( Optional [ RelativeDistinguishedName ] ) \u2013 Relative name to the CRL issuer.","title":"IssuingDistributionPoint"},{"location":"types/extensions/#pki_tools.types.extensions.IssuingDistributionPoint.from_cryptography","text":"from_cryptography(extension: x509 . IssuingDistributionPoint ) -> IssuingDistributionPoint Constructs a IssuingDistributionPoint object from a cryptography IssuingDistributionPoint object. Parameters: extension ( x509 . IssuingDistributionPoint ) \u2013 The cryptography IssuingDistributionPoint object. Returns: IssuingDistributionPoint ( IssuingDistributionPoint ) \u2013 The constructed IssuingDistributionPoint IssuingDistributionPoint \u2013 object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.KeyUsage","text":"Bases: Extension Represents a key usage extension. Attributes: digital_signature ( bool ) \u2013 Indicates if digital signature is allowed. content_commitment ( bool ) \u2013 Indicates if content commitment is allowed. key_encipherment ( bool ) \u2013 Indicates if key encipherment is allowed. data_encipherment ( bool ) \u2013 Indicates if data encipherment is allowed. key_agreement ( bool ) \u2013 Indicates if key agreement is allowed. key_cert_sign ( bool ) \u2013 Indicates if key certificate signing is allowed. crl_sign ( bool ) \u2013 Indicates if CRL signing is allowed. encipher_only ( bool ) \u2013 Indicates if encipher only is allowed. decipher_only ( bool ) \u2013 Indicates if decipher only is allowed.","title":"KeyUsage"},{"location":"types/extensions/#pki_tools.types.extensions.KeyUsage.from_cryptography","text":"from_cryptography(extension: x509 . KeyUsage ) -> KeyUsage Create a KeyUsage instance from a cryptography KeyUsage object. Parameters: extension ( x509 . KeyUsage ) \u2013 The cryptography KeyUsage object. Returns: KeyUsage \u2013 The KeyUsage instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.NameConstraints","text":"Bases: Extension Represents a name constraints extension. Attributes: permitted_subtrees ( Optional [ List [ GeneralName ]] ) \u2013 List of permitted subtrees. excluded_subtrees ( Optional [ List [ GeneralName ]] ) \u2013 List of excluded subtrees.","title":"NameConstraints"},{"location":"types/extensions/#pki_tools.types.extensions.NoticeReference","text":"Bases: Extension Represents a notice reference extension. Attributes: organization ( str ) \u2013 The organization associated with the notice. notice_numbers ( List [ int ] ) \u2013 List of notice numbers.","title":"NoticeReference"},{"location":"types/extensions/#pki_tools.types.extensions.OtherName","text":"Bases: GeneralName Represents an other name. Attributes: value ( Union [ str , Name ] ) \u2013 The other name value. oid ( str ) \u2013 The object identifier (OID) of the other name.","title":"OtherName"},{"location":"types/extensions/#pki_tools.types.extensions.OtherName.from_cryptography","text":"from_cryptography(crypto_obj: x509 . OtherName ) -> OtherName Create a OtherName instance from a cryptography OtherName object. Parameters: crypto_obj ( x509 . OtherName ) \u2013 The cryptography OtherName object. Returns: OtherName \u2013 The OtherName instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.PolicyConstraints","text":"Bases: Extension Represents a policy constraints extension. Attributes: require_explicit_policy ( Optional [ int ] ) \u2013 The require explicit policy value. inhibit_policy_mapping ( Optional [ int ] ) \u2013 The inhibit policy mapping value.","title":"PolicyConstraints"},{"location":"types/extensions/#pki_tools.types.extensions.PolicyInformation","text":"Bases: Extension Represents a policy information extension. Attributes: policy_identifier ( str ) \u2013 The policy identifier associated with the policy information. policy_qualifiers ( Optional [ List [ Union [ str , UserNotice ]]] ) \u2013 List of policy qualifiers.","title":"PolicyInformation"},{"location":"types/extensions/#pki_tools.types.extensions.PolicyInformation.from_cryptography","text":"from_cryptography(policy_info: x509 . PolicyInformation ) -> PolicyInformation Create a PolicyInformation instance from a cryptography PolicyInformation object. Parameters: policy_info ( x509 . PolicyInformation ) \u2013 The cryptography PolicyInformation object. Returns: PolicyInformation \u2013 The PolicyInformation instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.RFC822Name","text":"Bases: GeneralName Represents an RFC822 name. Attributes: value ( Union [ str , Name ] ) \u2013 The RFC822 name value.","title":"RFC822Name"},{"location":"types/extensions/#pki_tools.types.extensions.Reason","text":"Bases: Enum Reasons for the DistributionPoint extension","title":"Reason"},{"location":"types/extensions/#pki_tools.types.extensions.RegisteredId","text":"Bases: GeneralName Represents a registered ID. Attributes: value ( Union [ str , Name ] ) \u2013 The registered ID value.","title":"RegisteredId"},{"location":"types/extensions/#pki_tools.types.extensions.RegisteredId.from_cryptography","text":"from_cryptography(crypto_obj: x509 . RegisteredID ) -> RegisteredId Create a RegisteredId instance from a cryptography RegisteredId object. Parameters: crypto_obj ( x509 . RegisteredID ) \u2013 The cryptography RegisteredId object. Returns: RegisteredId \u2013 The RegisteredId instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.RelativeDistinguishedName","text":"Bases: CryptoParser Represents a Relative Distinguished Name in X.509 certificates. Attributes: attributes ( List [ AttributeTypeAndValue ] ) \u2013 List of attributes in the RDN.","title":"RelativeDistinguishedName"},{"location":"types/extensions/#pki_tools.types.extensions.RelativeDistinguishedName.from_cryptography","text":"from_cryptography(x509_obj: x509 . RelativeDistinguishedName ) -> RelativeDistinguishedName Constructs a RelativeDistinguishedName object from a cryptography RelativeDistinguishedName object. Parameters: x509_obj ( x509 . RelativeDistinguishedName ) \u2013 The cryptography RelativeDistinguishedName object. Returns: RelativeDistinguishedName \u2013 The constructed RelativeDistinguishedName object.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.SubjectAlternativeName","text":"Bases: AlternativeName Represents a subject alternative name extension.","title":"SubjectAlternativeName"},{"location":"types/extensions/#pki_tools.types.extensions.SubjectDirectoryAttributes","text":"Bases: Extension Represents a subject directory attributes extension. Attributes: attributes ( List [ str ] ) \u2013 List of attributes.","title":"SubjectDirectoryAttributes"},{"location":"types/extensions/#pki_tools.types.extensions.SubjectDirectoryAttributes.from_cryptography","text":"from_cryptography(extension: x509 . UnrecognizedExtension ) -> SubjectDirectoryAttributes Create a SubjectDirectoryAttributes instance from a cryptography UnrecognizedExtension object. Parameters: extension ( x509 . UnrecognizedExtension ) \u2013 The cryptography UnrecognizedExtension object. Returns: SubjectDirectoryAttributes \u2013 The SubjectDirectoryAttributes instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.SubjectInformationAccess","text":"Bases: AuthorityInformationAccess Represents the Subject Information Access extension in X.509 certificates.","title":"SubjectInformationAccess"},{"location":"types/extensions/#pki_tools.types.extensions.SubjectKeyIdentifier","text":"Bases: Extension Represents a subject key identifier extension. Attributes: subject_key_identifier ( bytes ) \u2013 The subject key identifier.","title":"SubjectKeyIdentifier"},{"location":"types/extensions/#pki_tools.types.extensions.SubjectKeyIdentifier.from_cryptography","text":"from_cryptography(extension: x509 . SubjectKeyIdentifier ) -> SubjectKeyIdentifier Create a SubjectKeyIdentifier instance from a cryptography SubjectKeyIdentifier object. Parameters: extension ( x509 . SubjectKeyIdentifier ) \u2013 The cryptography SubjectKeyIdentifier object. Returns: SubjectKeyIdentifier \u2013 The SubjectKeyIdentifier instance.","title":"from_cryptography"},{"location":"types/extensions/#pki_tools.types.extensions.UniformResourceIdentifier","text":"Bases: GeneralName Represents a uniform resource identifier (URI). Attributes: value ( Union [ str , Name ] ) \u2013 The URI value.","title":"UniformResourceIdentifier"},{"location":"types/extensions/#pki_tools.types.extensions.UserNotice","text":"Bases: Extension Represents a user notice extension. Attributes: notice_reference ( Optional [ NoticeReference ] ) \u2013 The notice reference associated with the user notice. explicit_text ( Optional [ str ] ) \u2013 The explicit text of the user notice.","title":"UserNotice"},{"location":"types/extensions/#pki_tools.types.extensions.UserNotice.from_cryptography","text":"from_cryptography(policy_info: x509 . UserNotice ) -> UserNotice Create a UserNotice instance from a cryptography UserNotice object. Parameters: policy_info ( x509 . UserNotice ) \u2013 The cryptography UserNotice object. Returns: UserNotice \u2013 The UserNotice instance.","title":"from_cryptography"},{"location":"types/key_pair/","text":"CryptoKeyPair \u00b6 Bases: BaseModel Represents a cryptographic key pair. Parameters: private_key \u2013 The private key public_key \u2013 The public key generate abstractmethod classmethod \u00b6 generate(*args) -> CryptoKeyPair Abstract method to generate a cryptographic key pair. Returns: CryptoKeyPair \u2013 The generated cryptographic key pair. CryptoPrivateKey \u00b6 Bases: InitCryptoParser , abc . ABC Represents a cryptographic private key. der_bytes property \u00b6 der_bytes: bytes Property to get the DER encoding of the public key. Returns: bytes ( bytes ) \u2013 The DER encoded public key. pem_bytes property \u00b6 pem_bytes: bytes Property to get the PEM encoding of the private key. Returns: bytes ( bytes ) \u2013 The PEM encoded private key. from_cryptography classmethod \u00b6 from_cryptography(key: CertificateIssuerPrivateKeyTypes ) -> CryptoPrivateKey Create a CryptoPrivateKey from a cryptography private key. Parameters: key ( CertificateIssuerPrivateKeyTypes ) \u2013 The cryptography private key. Returns: CryptoPrivateKey \u2013 The CryptoPrivateKey object. CryptoPublicKey \u00b6 Bases: InitCryptoParser , abc . ABC Represents a cryptographic public key. der_bytes property \u00b6 der_bytes: bytes Property to get the DER encoding of the public key. Returns: bytes ( bytes ) \u2013 The DER encoded public key. ocsp_bytes property \u00b6 ocsp_bytes: bytes The bytes used for the OCSP Response hash Returns: bytes ( bytes ) \u2013 The bytes used for the OCSP Response hash pem_bytes property \u00b6 pem_bytes: bytes Property to get the PEM encoding of the public key. Returns: bytes ( bytes ) \u2013 The PEM encoded public key. from_cryptography classmethod \u00b6 from_cryptography(key: CertificateIssuerPublicKeyTypes ) -> CryptoPublicKey Create a CryptoPublicKey from a cryptography public key. Parameters: key ( CertificateIssuerPublicKeyTypes ) \u2013 The cryptography public key. Returns: CryptoPublicKey \u2013 The created CryptoPublicKey. verify abstractmethod \u00b6 verify(signed: InitCryptoParser ) -> None Verifies the signature of a signed object. Parameters: signed ( InitCryptoParser ) \u2013 the signed object to verify. DSAKeyPair \u00b6 Bases: CryptoKeyPair Describes a DSA Key Pair including the public and private DSA keys. Note DSA is an old and legacy algorithm. Consider using EllipticCurveKeyPair or RSAKeyPair instead. Examples \u00b6 Generate keypair \u00b6 from pki_tools import DSAKeyPair key_pair = DSAKeyPair.generate(key_size=1024) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_cryptography(crypto_public_key), private_key=DSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443' InitCryptoParser.from_file \u00b6 private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_file(\"public.pem\"), private_key=DSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443' InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443' InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- generate classmethod \u00b6 generate(key_size: int ) -> DSAKeyPair Generate a DSA cryptographic key pair. Parameters: key_size ( int ) \u2013 The size of the key. Returns: DSAKeyPair \u2013 The generated DSA key pair. DSAPrivateKey \u00b6 Bases: CryptoPrivateKey Represents a DSA cryptographic private key. from_cryptography classmethod \u00b6 from_cryptography(key: dsa . DSAPrivateKey ) -> DSAPrivateKey Create a DSAPrivateKey from a cryptography key. Parameters: key ( dsa . DSAPrivateKey ) \u2013 The cryptography.hazmat.primitives.asymmetric.dsa private key. Returns: DSAKeyPair ( DSAPrivateKey ) \u2013 The DSA private key. DSAPublicKey \u00b6 Bases: CryptoPublicKey Represents a DSA cryptographic key pair. ocsp_bytes property \u00b6 ocsp_bytes: bytes The bytes used for the OCSP Response hash Returns: bytes ( bytes ) \u2013 The bytes used for the OCSP Response hash from_cryptography classmethod \u00b6 from_cryptography(key: dsa . DSAPublicKey ) -> DSAPublicKey Create a DSAKeyPair from a cryptography key. Parameters: key ( dsa . DSAPublicKey ) \u2013 The cryptography.hazmat.primitives.asymmetric.dsa public key. Returns: DSAKeyPair ( DSAPublicKey ) \u2013 The DSA key pair. Ed25519KeyPair \u00b6 Bases: CryptoKeyPair Represents an Ed25519 cryptographic key pair. Examples \u00b6 Generate keypair \u00b6 from pki_tools import Ed25519KeyPair key_pair = Ed25519KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_cryptography(crypto_public_key), private_key=Ed25519PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A InitCryptoParser.from_file \u00b6 private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_file(\"public.pem\"), private_key=Ed25519PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- generate classmethod \u00b6 generate() -> Ed25519KeyPair Generate an Ed25519KeyPair cryptographic key pair. Returns: Ed25519KeyPair \u2013 The generated Ed25519 key pair. Ed25519PrivateKey \u00b6 Bases: CryptoPrivateKey from_cryptography classmethod \u00b6 from_cryptography(key: ed25519 . Ed25519PrivateKey ) -> Ed25519PrivateKey Create an Ed25519 private key from a cryptography private key. Parameters: key ( ed25519 . Ed25519PrivateKey ) \u2013 The cryptography private key. Returns: Ed25519PrivateKey \u2013 The created Ed25519PrivateKey object. Ed25519PublicKey \u00b6 Bases: CryptoPublicKey from_cryptography classmethod \u00b6 from_cryptography(key: ed25519 . Ed25519PublicKey ) -> Ed25519PublicKey Create an Ed25519PublicKey from a cryptography public key. Parameters: key ( ed25519 . Ed25519PublicKey ) \u2013 The cryptography public key. Returns: Ed25519PublicKey \u2013 The Ed25519PublicKey object. Ed448KeyPair \u00b6 Bases: CryptoKeyPair Represents an Ed448 cryptographic key pair. Examples \u00b6 Generate keypair \u00b6 from pki_tools import Ed448KeyPair key_pair = Ed448KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_cryptography(crypto_public_key), private_key=Ed448PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580 InitCryptoParser.from_file \u00b6 private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_file(\"public.pem\"), private_key=Ed448PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580 InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580 InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- generate classmethod \u00b6 generate() -> Ed448KeyPair Generate an Ed448 cryptographic key pair. Returns: Ed448KeyPair \u2013 The generated Ed448 key pair. Ed448PrivateKey \u00b6 Bases: CryptoPrivateKey from_cryptography classmethod \u00b6 from_cryptography(key: ed448 . Ed448PrivateKey ) -> Ed448PrivateKey Create an Ed25519KeyPair from a cryptography private key. Parameters: key ( ed448 . Ed448PrivateKey ) \u2013 The cryptography private key. Returns: Ed448PrivateKey \u2013 The created Ed448PrivateKey object. Ed448PublicKey \u00b6 Bases: CryptoPublicKey from_cryptography classmethod \u00b6 from_cryptography(key: ed448 . Ed448PublicKey ) -> Ed448PublicKey Create an Ed448PublicKey from a cryptography public key. Parameters: key ( ed448 . Ed448PublicKey ) \u2013 The cryptography public key. Returns: Ed448PublicKey \u2013 The Ed448PublicKey object. EllipticCurveKeyPair \u00b6 Bases: CryptoKeyPair Describes an elliptic curve Key Pair including the public and private keys. Examples \u00b6 Generate keypair \u00b6 from pki_tools import EllipticCurveKeyPair, EllipticCurveName key_pair = EllipticCurveKeyPair.generate( curve_name=EllipticCurveName.SECP521R1 ) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_cryptography(crypto_public_key), private_key=EllipticCurvePrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282' InitCryptoParser.from_file \u00b6 private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_file(\"public.pem\"), private_key=EllipticCurvePrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282' InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282' InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- generate classmethod \u00b6 generate(curve_name: EllipticCurveName ) -> EllipticCurveKeyPair Generate an elliptic curve cryptographic key pair. Parameters: curve_name ( EllipticCurveName ) \u2013 The name of the curve. Returns: EllipticCurveKeyPair \u2013 The generated elliptic curve key pair. EllipticCurveName \u00b6 Bases: Enum Elliptic Curve Names EllipticCurvePrivateKey \u00b6 Bases: CryptoPrivateKey Represents an elliptic curve cryptographic private key. from_cryptography classmethod \u00b6 from_cryptography(key: ec . EllipticCurvePrivateKey ) -> EllipticCurvePrivateKey Create an EllipticCurvePrivateKey from a cryptography private key. Parameters: key ( ec . EllipticCurvePrivateKey ) \u2013 The cryptography private key. Returns: EllipticCurvePrivateKey \u2013 The EllipticCurvePrivateKey created object EllipticCurvePublicKey \u00b6 Bases: CryptoPublicKey Represents an elliptic curve cryptographic public key. ocsp_bytes property \u00b6 ocsp_bytes: bytes The bytes used for the OCSP Response hash Returns: bytes ( bytes ) \u2013 The bytes used for the OCSP Response hash from_cryptography classmethod \u00b6 from_cryptography(key: ec . EllipticCurvePublicKey ) -> EllipticCurvePublicKey Create an EllipticCurvePublicKey from a cryptography public key. Parameters: key ( ec . EllipticCurvePublicKey ) \u2013 The cryptography public key. Returns: EllipticCurvePublicKey \u2013 The created EllipticCurvePublicKey object RSAKeyPair \u00b6 Bases: CryptoKeyPair Describes an RSA Key Pair including the public and private RSA keys. Examples \u00b6 Generate keypair \u00b6 from pki_tools import RSAKeyPair key_pair = RSAKeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- InitCryptoParser.from_cryptography \u00b6 crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_cryptography(crypto_public_key), private_key=RSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537' InitCryptoParser.from_file \u00b6 private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_file(\"public.pem\"), private_key=RSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537' InitCryptoParser.from_pem_string \u00b6 private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537' InitCryptoParser.to_file \u00b6 private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- generate classmethod \u00b6 generate(key_size: int = 2048, exponent: int = 65537) -> RSAKeyPair Generate an RSA cryptographic key pair. Parameters: key_size ( int , default: 2048 ) \u2013 The size of the key. Defaults to 2048 . exponent ( int , default: 65537 ) \u2013 The public exponent. Defaults to 65537 . Returns: RSAKeyPair \u2013 The generated RSA key pair. RSAPrivateKey \u00b6 Bases: CryptoPrivateKey Represents an RSA cryptographic key pair. from_cryptography classmethod \u00b6 from_cryptography(key: rsa . RSAPrivateKey ) -> RSAPrivateKey Create an RSA private key from a cryptography key. Parameters: key ( rsa . RSAPrivateKey ) \u2013 The cryptography private key. Returns: RSAPrivateKey \u2013 An RSAPrivateKey object RSAPublicKey \u00b6 Bases: CryptoPublicKey Represents an RSA cryptographic key pair. der_bytes property \u00b6 der_bytes: bytes Property to get the DER encoding of the public key. Returns: bytes ( bytes ) \u2013 The DER encoded public key. from_cryptography classmethod \u00b6 from_cryptography(key: rsa . RSAPublicKey ) -> RSAPublicKey Create an RSA public key from a cryptography public key. Parameters: key ( rsa . RSAPublicKey ) \u2013 The public cryptography key. Returns: RSAPublicKey \u2013 The RSA public key","title":"KeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoKeyPair","text":"Bases: BaseModel Represents a cryptographic key pair. Parameters: private_key \u2013 The private key public_key \u2013 The public key","title":"CryptoKeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoKeyPair.generate","text":"generate(*args) -> CryptoKeyPair Abstract method to generate a cryptographic key pair. Returns: CryptoKeyPair \u2013 The generated cryptographic key pair.","title":"generate"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPrivateKey","text":"Bases: InitCryptoParser , abc . ABC Represents a cryptographic private key.","title":"CryptoPrivateKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPrivateKey.der_bytes","text":"der_bytes: bytes Property to get the DER encoding of the public key. Returns: bytes ( bytes ) \u2013 The DER encoded public key.","title":"der_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPrivateKey.pem_bytes","text":"pem_bytes: bytes Property to get the PEM encoding of the private key. Returns: bytes ( bytes ) \u2013 The PEM encoded private key.","title":"pem_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPrivateKey.from_cryptography","text":"from_cryptography(key: CertificateIssuerPrivateKeyTypes ) -> CryptoPrivateKey Create a CryptoPrivateKey from a cryptography private key. Parameters: key ( CertificateIssuerPrivateKeyTypes ) \u2013 The cryptography private key. Returns: CryptoPrivateKey \u2013 The CryptoPrivateKey object.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPublicKey","text":"Bases: InitCryptoParser , abc . ABC Represents a cryptographic public key.","title":"CryptoPublicKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPublicKey.der_bytes","text":"der_bytes: bytes Property to get the DER encoding of the public key. Returns: bytes ( bytes ) \u2013 The DER encoded public key.","title":"der_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPublicKey.ocsp_bytes","text":"ocsp_bytes: bytes The bytes used for the OCSP Response hash Returns: bytes ( bytes ) \u2013 The bytes used for the OCSP Response hash","title":"ocsp_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPublicKey.pem_bytes","text":"pem_bytes: bytes Property to get the PEM encoding of the public key. Returns: bytes ( bytes ) \u2013 The PEM encoded public key.","title":"pem_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPublicKey.from_cryptography","text":"from_cryptography(key: CertificateIssuerPublicKeyTypes ) -> CryptoPublicKey Create a CryptoPublicKey from a cryptography public key. Parameters: key ( CertificateIssuerPublicKeyTypes ) \u2013 The cryptography public key. Returns: CryptoPublicKey \u2013 The created CryptoPublicKey.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.CryptoPublicKey.verify","text":"verify(signed: InitCryptoParser ) -> None Verifies the signature of a signed object. Parameters: signed ( InitCryptoParser ) \u2013 the signed object to verify.","title":"verify"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair","text":"Bases: CryptoKeyPair Describes a DSA Key Pair including the public and private DSA keys. Note DSA is an old and legacy algorithm. Consider using EllipticCurveKeyPair or RSAKeyPair instead.","title":"DSAKeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair--examples","text":"","title":"Examples"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair--generate-keypair","text":"from pki_tools import DSAKeyPair key_pair = DSAKeyPair.generate(key_size=1024) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair--initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_cryptography(crypto_public_key), private_key=DSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443'","title":"InitCryptoParser.from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair--initcryptoparserfrom_file","text":"private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_file(\"public.pem\"), private_key=DSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443'","title":"InitCryptoParser.from_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair--initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output DSAKeyPair: generator_g: '113777026571325530148150394408467299305589997194470431376564940585605453797253843240385953561624361715300637770674134020122595656184354455315207866000987394828535805614606024021315033549457672053549361497135203471795738563110933341121849876449932177135069371874058966749891793319752800046614670106059201138656' key_size: '1024' prime_p: '174757476342306797247563317256894129844245132954515284483435018210595536104310937495384232315831853480443453499620885651911198721759647573944694709015221077111398208541814382944481887170189910067356212345671285839418487207597130726845228782300695389126938410647911854140920564564816908606042285402918736359701' public_key_y: '149332052542478152219821166226616716616977242473328582848563249300540754897324006416792998195121332611269937769202630005073559668943384310360257482112770686017742010665852185709674377535585104122942880303444668338707692502260752201470105621604193468478471725786623824002451061035867177729841769129384287123018' subprime_q: '1187488220291981039175259798988933546327060643443'","title":"InitCryptoParser.from_pem_string"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair--initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY----- \"\"\" from pki_tools import DSAKeyPair, DSAPublicKey, DSAPrivateKey key_pair = DSAKeyPair( public_key=DSAPublicKey.from_pem_string(public_pem), private_key=DSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN DSA PRIVATE KEY----- MIIBvAIBAAKBgQD43Od5Ib9Gf7zn3BqonOwCMvmWw3QBVSkcIIPtfjoPCF5eZUkE +NxkC+8TVLFP6BirpwifJsUyD2SOZre2JtF3SUmKFiPhS3934suqEWHpedeZy8Dy 2g7yuqU3OiOMU06iRemDhcWJmCp3MEF5N321Eh66t9yq5oN1iYbnRkvxFQIVANAA 0DyNl0WkdNjOwKRXKtRtgf5zAoGBAKIGG/O5f1FbUmhBK0z2jZLYvup3CKSMYvJL ztDMSjDW1NTuht0qQLszEso82SwtuYRRAvpezwkWKhQSj2fo+Dg+A8+4Rc6N9oMO f0ZM4BOGdkm4WEKpIArx9wEYamHpGuIYSER0ygbw/vQD0fjG24FxhBKCkd7F1pf9 +ervHU/gAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjUDXaHq3/1cCaAuKJF5jR7OlTf e+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6k3yuI65VieTAtvnh9zg+y53+ XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62uFDny0lY6Ow+47ZKAhRtGeN4 19EKC+vetSlF1/ORPoDQ2A== -----END DSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBuDCCASwGByqGSM44BAEwggEfAoGBAPjc53khv0Z/vOfcGqic7AIy+ZbDdAFV KRwgg+1+Og8IXl5lSQT43GQL7xNUsU/oGKunCJ8mxTIPZI5mt7Ym0XdJSYoWI+FL f3fiy6oRYel515nLwPLaDvK6pTc6I4xTTqJF6YOFxYmYKncwQXk3fbUSHrq33Krm g3WJhudGS/EVAhUA0ADQPI2XRaR02M7ApFcq1G2B/nMCgYEAogYb87l/UVtSaEEr TPaNkti+6ncIpIxi8kvO0MxKMNbU1O6G3SpAuzMSyjzZLC25hFEC+l7PCRYqFBKP Z+j4OD4Dz7hFzo32gw5/RkzgE4Z2SbhYQqkgCvH3ARhqYeka4hhIRHTKBvD+9APR +MbbgXGEEoKR3sXWl/356u8dT+ADgYUAAoGBANSn6Svi4CZns0W5Uv3yzR9+4jjU DXaHq3/1cCaAuKJF5jR7OlTfe+n1IZCrPSshMF210wKl2LVp1NXxZLMA7sKy+2g6 k3yuI65VieTAtvnh9zg+y53+XxyYrJYvKRUmYqIluUvVDiJCJlYZdcZfgOP68v62 uFDny0lY6Ow+47ZK -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAKeyPair.generate","text":"generate(key_size: int ) -> DSAKeyPair Generate a DSA cryptographic key pair. Parameters: key_size ( int ) \u2013 The size of the key. Returns: DSAKeyPair \u2013 The generated DSA key pair.","title":"generate"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAPrivateKey","text":"Bases: CryptoPrivateKey Represents a DSA cryptographic private key.","title":"DSAPrivateKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAPrivateKey.from_cryptography","text":"from_cryptography(key: dsa . DSAPrivateKey ) -> DSAPrivateKey Create a DSAPrivateKey from a cryptography key. Parameters: key ( dsa . DSAPrivateKey ) \u2013 The cryptography.hazmat.primitives.asymmetric.dsa private key. Returns: DSAKeyPair ( DSAPrivateKey ) \u2013 The DSA private key.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAPublicKey","text":"Bases: CryptoPublicKey Represents a DSA cryptographic key pair.","title":"DSAPublicKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAPublicKey.ocsp_bytes","text":"ocsp_bytes: bytes The bytes used for the OCSP Response hash Returns: bytes ( bytes ) \u2013 The bytes used for the OCSP Response hash","title":"ocsp_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.DSAPublicKey.from_cryptography","text":"from_cryptography(key: dsa . DSAPublicKey ) -> DSAPublicKey Create a DSAKeyPair from a cryptography key. Parameters: key ( dsa . DSAPublicKey ) \u2013 The cryptography.hazmat.primitives.asymmetric.dsa public key. Returns: DSAKeyPair ( DSAPublicKey ) \u2013 The DSA key pair.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair","text":"Bases: CryptoKeyPair Represents an Ed25519 cryptographic key pair.","title":"Ed25519KeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair--examples","text":"","title":"Examples"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair--generate-keypair","text":"from pki_tools import Ed25519KeyPair key_pair = Ed25519KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair--initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_cryptography(crypto_public_key), private_key=Ed25519PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A","title":"InitCryptoParser.from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair--initcryptoparserfrom_file","text":"private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_file(\"public.pem\"), private_key=Ed25519PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A","title":"InitCryptoParser.from_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair--initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed25519KeyPair: public_bytes: C33F6E0D4277A9E61CA24D42A0C01B7E226B653ECF953DF0B4B6707FEC25861A","title":"InitCryptoParser.from_pem_string"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair--initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed25519KeyPair, Ed25519PublicKey, Ed25519PrivateKey key_pair = Ed25519KeyPair( public_key=Ed25519PublicKey.from_pem_string(public_pem), private_key=Ed25519PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MC4CAQAwBQYDK2VwBCIEIK1Rmqg3vSeNU/VcGCcp6v9jg2Wc4oQOsZUX7UboRrIL -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAwz9uDUJ3qeYcok1CoMAbfiJrZT7PlT3wtLZwf+wlhho= -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519KeyPair.generate","text":"generate() -> Ed25519KeyPair Generate an Ed25519KeyPair cryptographic key pair. Returns: Ed25519KeyPair \u2013 The generated Ed25519 key pair.","title":"generate"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519PrivateKey","text":"Bases: CryptoPrivateKey","title":"Ed25519PrivateKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519PrivateKey.from_cryptography","text":"from_cryptography(key: ed25519 . Ed25519PrivateKey ) -> Ed25519PrivateKey Create an Ed25519 private key from a cryptography private key. Parameters: key ( ed25519 . Ed25519PrivateKey ) \u2013 The cryptography private key. Returns: Ed25519PrivateKey \u2013 The created Ed25519PrivateKey object.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519PublicKey","text":"Bases: CryptoPublicKey","title":"Ed25519PublicKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed25519PublicKey.from_cryptography","text":"from_cryptography(key: ed25519 . Ed25519PublicKey ) -> Ed25519PublicKey Create an Ed25519PublicKey from a cryptography public key. Parameters: key ( ed25519 . Ed25519PublicKey ) \u2013 The cryptography public key. Returns: Ed25519PublicKey \u2013 The Ed25519PublicKey object.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair","text":"Bases: CryptoKeyPair Represents an Ed448 cryptographic key pair.","title":"Ed448KeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair--examples","text":"","title":"Examples"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair--generate-keypair","text":"from pki_tools import Ed448KeyPair key_pair = Ed448KeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair--initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_cryptography(crypto_public_key), private_key=Ed448PrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580","title":"InitCryptoParser.from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair--initcryptoparserfrom_file","text":"private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_file(\"public.pem\"), private_key=Ed448PrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580","title":"InitCryptoParser.from_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair--initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output Ed448KeyPair: public_bytes: 7C275A8FB1D748F32A5BE4E5FA55C4CC8B4ECCAD80A198E4BDC08C47E81EA6781DD260F229B0B853E7D59F19DB7F552E2711620114948D4580","title":"InitCryptoParser.from_pem_string"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair--initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY----- \"\"\" from pki_tools import Ed448KeyPair, Ed448PublicKey, Ed448PrivateKey key_pair = Ed448KeyPair( public_key=Ed448PublicKey.from_pem_string(public_pem), private_key=Ed448PrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN PRIVATE KEY----- MEcCAQAwBQYDK2VxBDsEOddX4ESZ5SsmiX/VMUPbnpPs/OOG4/zGvm4H5mN3nDTn aueR56mFimzXxc7tj3z+N1lmNeO23ZNFPA== -----END PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEMwBQYDK2VxAzoAfCdaj7HXSPMqW+Tl+lXEzItOzK2AoZjkvcCMR+gepngd0mDy KbC4U+fVnxnbf1UuJxFiARSUjUWA -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448KeyPair.generate","text":"generate() -> Ed448KeyPair Generate an Ed448 cryptographic key pair. Returns: Ed448KeyPair \u2013 The generated Ed448 key pair.","title":"generate"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448PrivateKey","text":"Bases: CryptoPrivateKey","title":"Ed448PrivateKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448PrivateKey.from_cryptography","text":"from_cryptography(key: ed448 . Ed448PrivateKey ) -> Ed448PrivateKey Create an Ed25519KeyPair from a cryptography private key. Parameters: key ( ed448 . Ed448PrivateKey ) \u2013 The cryptography private key. Returns: Ed448PrivateKey \u2013 The created Ed448PrivateKey object.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448PublicKey","text":"Bases: CryptoPublicKey","title":"Ed448PublicKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.Ed448PublicKey.from_cryptography","text":"from_cryptography(key: ed448 . Ed448PublicKey ) -> Ed448PublicKey Create an Ed448PublicKey from a cryptography public key. Parameters: key ( ed448 . Ed448PublicKey ) \u2013 The cryptography public key. Returns: Ed448PublicKey \u2013 The Ed448PublicKey object.","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair","text":"Bases: CryptoKeyPair Describes an elliptic curve Key Pair including the public and private keys.","title":"EllipticCurveKeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair--examples","text":"","title":"Examples"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair--generate-keypair","text":"from pki_tools import EllipticCurveKeyPair, EllipticCurveName key_pair = EllipticCurveKeyPair.generate( curve_name=EllipticCurveName.SECP521R1 ) print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair--initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_cryptography(crypto_public_key), private_key=EllipticCurvePrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282'","title":"InitCryptoParser.from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair--initcryptoparserfrom_file","text":"private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_file(\"public.pem\"), private_key=EllipticCurvePrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282'","title":"InitCryptoParser.from_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair--initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output EllipticCurveKeyPair: curve_name: SECP192R1 x_coordinate: '3873244018496539881359912556942920160767430416289115521073' y_coordinate: '1927529413795754362028696442258815769538381786197708411282'","title":"InitCryptoParser.from_pem_string"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair--initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY----- \"\"\" from pki_tools import ( EllipticCurveKeyPair, EllipticCurvePublicKey, EllipticCurvePrivateKey, ) key_pair = EllipticCurveKeyPair( public_key=EllipticCurvePublicKey.from_pem_string(public_pem), private_key=EllipticCurvePrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN EC PRIVATE KEY----- MF8CAQEEGKjPz1HxOsCzWDldL2lBRkhNn8BeANbriaAKBggqhkjOPQMBAaE0AzIA BJ32je0cT4KuCA13aM56xkUnEFGukuHAMU6cWJhInPl95dkcRhs+U8ZrUGO9jFaR kg== -----END EC PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEnfaN7RxPgq4IDXdoznrGRScQUa6S 4cAxTpxYmEic+X3l2RxGGz5TxmtQY72MVpGS -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveKeyPair.generate","text":"generate(curve_name: EllipticCurveName ) -> EllipticCurveKeyPair Generate an elliptic curve cryptographic key pair. Parameters: curve_name ( EllipticCurveName ) \u2013 The name of the curve. Returns: EllipticCurveKeyPair \u2013 The generated elliptic curve key pair.","title":"generate"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurveName","text":"Bases: Enum Elliptic Curve Names","title":"EllipticCurveName"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurvePrivateKey","text":"Bases: CryptoPrivateKey Represents an elliptic curve cryptographic private key.","title":"EllipticCurvePrivateKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurvePrivateKey.from_cryptography","text":"from_cryptography(key: ec . EllipticCurvePrivateKey ) -> EllipticCurvePrivateKey Create an EllipticCurvePrivateKey from a cryptography private key. Parameters: key ( ec . EllipticCurvePrivateKey ) \u2013 The cryptography private key. Returns: EllipticCurvePrivateKey \u2013 The EllipticCurvePrivateKey created object","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurvePublicKey","text":"Bases: CryptoPublicKey Represents an elliptic curve cryptographic public key.","title":"EllipticCurvePublicKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurvePublicKey.ocsp_bytes","text":"ocsp_bytes: bytes The bytes used for the OCSP Response hash Returns: bytes ( bytes ) \u2013 The bytes used for the OCSP Response hash","title":"ocsp_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.EllipticCurvePublicKey.from_cryptography","text":"from_cryptography(key: ec . EllipticCurvePublicKey ) -> EllipticCurvePublicKey Create an EllipticCurvePublicKey from a cryptography public key. Parameters: key ( ec . EllipticCurvePublicKey ) \u2013 The cryptography public key. Returns: EllipticCurvePublicKey \u2013 The created EllipticCurvePublicKey object","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair","text":"Bases: CryptoKeyPair Describes an RSA Key Pair including the public and private RSA keys.","title":"RSAKeyPair"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair--examples","text":"","title":"Examples"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair--generate-keypair","text":"from pki_tools import RSAKeyPair key_pair = RSAKeyPair.generate() print(key_pair.private_key.pem_string) print(key_pair.public_key.pem_string) Print output -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY-----","title":"Generate keypair"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair--initcryptoparserfrom_cryptography","text":"crypto_keys from cryptography.hazmat.primitives import serialization private_key_pem = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_key_pem = b\"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" crypto_public_key = serialization.load_pem_public_key(public_key_pem) crypto_private_key = serialization.load_pem_private_key( private_key_pem, password=None ) from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_cryptography(crypto_public_key), private_key=RSAPrivateKey.from_cryptography(crypto_private_key), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537'","title":"InitCryptoParser.from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair--initcryptoparserfrom_file","text":"private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_file(\"public.pem\"), private_key=RSAPrivateKey.from_file(\"private.pem\"), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537'","title":"InitCryptoParser.from_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair--initcryptoparserfrom_pem_string","text":"private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) print(key_pair) Print output RSAKeyPair: dmp1: '112228686098578289968206530398533832532087447182265458927579178422537594762937437642180841888657547745928845047872078923698573703206852833875325942746947034409646092798142300954781253256688565019637511208816685001820432660240910353920670244495107288979659625476528077796586331820727653559440906169349663093669' dmq1: '29954878721454193261115798178826603818564585216011358474569809730587326380303847036263030712995464073115054903542089837665013809425951577679466246151951773611972881297374240238476709888387164594515787280324519624175913491034621711981569648269575792417502609736379495957362666551513872949291463489602901607213' iqmp: '113377739742320119075874747148659403125690780467991563336450504742031829267730903383652084524673224369283355331374717321716590128967084240861243830597409710918961110635224262440163815022166491483352235666413036113542326814623174124611744543083546867929277477340240796140818812558974821133824541207302920805236' key_size: '2048' modulus_n: '28269656161865858123598576035899875440122191213127364861509154025675355610082799347921618153416712864686169355750843304814668229249598039750263836357726360127321991959996391367551966285361434131739675397279349625052844820155099922051021052083407166079301922726938201362153520404989534743429708886900189879132341366465692866810432101374364468049365637897193476795370556936116855076384721475999879171937784754794982370604637315116047432437846177894536884658616747452048948621460614753796193156319447575695952338495057296511722488852144978958149957659056926325939653530635680524483195710921326970123267059095715678683999' prime_p: '176343988128282274560558905337666014113390755615913385162357203871534832961198562678453231553308631389506790330681446124875528657773322644361822060222174297971780095032531395566268646927128401200987402529243546595802001852219150348004003112361261272096189140829442581566445573582081282968306089036435034888629' prime_q: '160309724544173073963232571063674598600136144153334672574545289916176842151394187752373856266338700715314498874198754016907725790327338604146593122167276121771016390787687047403972573571388992816493642903040016544962995464799608291534879147365930810686417486060191329949181535014418152170318033865597367518531' private_exponent_d: '11631032985161832223701298567709908011771285897596262662705537774818961634958460131183278329626443775018659238422047681020228483657875117015214521316961923409266676704904751466113359154652878678124244433102528087796586778928881613412022699366418829457593375412502275989580046755270119395484057409194450766756418131355912574189524935045679200576802226542785707366549488966278026499105874223053296922290636700877634060131880477412241318572951128535689940811404135636039231063146125793446617452698102772766197719549943252614774826460673259451470604957009429087881450367160663455331454289837597840202113495148183100561953' public_exponent_e: '65537'","title":"InitCryptoParser.from_pem_string"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair--initcryptoparserto_file","text":"private_pem private_pem = \"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- \"\"\" public_pem public_pem = \"\"\" -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY----- \"\"\" from pki_tools import RSAKeyPair, RSAPublicKey, RSAPrivateKey key_pair = RSAKeyPair( public_key=RSAPublicKey.from_pem_string(public_pem), private_key=RSAPrivateKey.from_pem_string(private_pem), ) key_pair.public_key.to_file(\"out_public.pem\") key_pair.private_key.to_file(\"out_private.pem\") out_private.pem -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3/BWC4F4xtU+dSJ2oGbibuA8CWLNUJ13Y6ZjsYBE8eJyJklU F2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9b+Zn1QWr78Lb5vlRAXSJzIF5JoDr DdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72OrG02C2Yw6+odAwJ+mcKHgqpAv3ERP Z5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZMfdbSpGAY43gOQ9Apk+VsmB98Ws2K Nq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF4gRcAh1FC00tZXlBLiO+XP2gy1Vc p3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKDXwIDAQABAoIBAFwisgRB3MNR8USY TV5pdjhQIeNqtza30us5BkN9luA+XuDJwsNvkAT+6JMj6FYYngcwEEVrW6qYjI3z GD9o5BgqIAZRMxCOh5NceKu0mw19J69j01H6cNPC/kYhKB2/MQJL/DKE71wtrGl9 jQSFaVzuYyvGum1hQI8AIKaus5T4wLjawIfoKAHwt3T5JP3bHbifiTOordw+n3/z B1ZnYAkot1ySzhNm8fKJuyFkowmWxUnJiHZU5T66n7MMlh4ABXtoV4ULcBns1/Qg 7yiizwrLSIfUO6/Lt66UWNNIhJjkfaUdTfYj5upfBOJoMWHUTkmW8wzneb9g9F+K 40pHmiECgYEA+x9G2J/WmkGDCQuo1/MQxf2pf3erElaSZYm9wQUHMAq96mDosQRN Dk6MgwhmavZEqrad2pwflnY8u6kuQYtbMu1nv7TsjsdBAf2Vp5XbyM1mEcjzPZ8U 4QN6/XSQ2npaYvqqmaCO3KdaZP7Q9RAO2nQTJYAE/s8LWTwz4p7aWbUCgYEA5Enj XGY7MCdslA8xVTrfac8ZIYryXliFGSn+gq0CIX7TLWgX3pp/JKEcexuoSGZAm1Re 6E3UPzQRM3JZQHqI8uc/mJbPL3R9ArpMmdATS5djNG7kzWTvH1vXOvSwx2O1rIod 1u6S2Vg3abAj1LqpmU9FSYQnOFZEuiaBNIGqhUMCgYEAn9Gm+AS5wpCBAYe/HDig azFl5y7U3CXmo+KGtkop6eRcO8cTMF1pYPqSqG33KIm05+SzD8cev1Zejpw8SRCU qRO4XKSbjL6427h0vyQ7rU8zb4wxaf1Nf2sEojvGWJVX4vhfDMjHQxzrBa26dMyU d2k6KjqQc053jYIoD0lD86UCgYAqqDvZyiiJKPS6/dPED0or5UzW3bXIN1Y3i4dJ N7bMN3ySYX8EU24qlAhUYKijTqgH3k4VrmVYogwMxvMyfzMT4G4bvyJbxbKOTe1+ WEkiuNkKtSX/0zpza5/eHlbiCxmpce19efrqrfc8wnMPjwmd4hgaUp1Zg5U4C3Xd L9WDLQKBgQChdIv3B9cxyU2yGpET3/bxdLIInhJQ6vi2vGtlaIsuzPEMgxRyJZG3 TNgNLW052w0tnMGq4BWjZM2GpONwDwHzWyqVMrWXzdzU6XJTQRKxQZg4p/QVZBW0 8iQGzFv2pa+taKWUXM16eYVcs4MuRoigvosKRJNGLlJAIRB7qHEbdA== -----END RSA PRIVATE KEY----- out_public.pem -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3/BWC4F4xtU+dSJ2oGbi buA8CWLNUJ13Y6ZjsYBE8eJyJklUF2pnuCNe/7NldFTNhv0SF0avR8caYSQFy9S9 b+Zn1QWr78Lb5vlRAXSJzIF5JoDrDdcWgMbdVosNsvoaEOi0wRVmDbgnaWdR72Or G02C2Yw6+odAwJ+mcKHgqpAv3ERPZ5mOWdQEm2ibdDIl4q9HOdnMokxbGsB5GqZM fdbSpGAY43gOQ9Apk+VsmB98Ws2KNq2S79aYw8SpRwDaZ1/c4pq24Py8TmSyvDKF 4gRcAh1FC00tZXlBLiO+XP2gy1Vcp3RR6ec/X5htYEnKI8eY3XXqRTNmrELOyvKD XwIDAQAB -----END PUBLIC KEY-----","title":"InitCryptoParser.to_file"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAKeyPair.generate","text":"generate(key_size: int = 2048, exponent: int = 65537) -> RSAKeyPair Generate an RSA cryptographic key pair. Parameters: key_size ( int , default: 2048 ) \u2013 The size of the key. Defaults to 2048 . exponent ( int , default: 65537 ) \u2013 The public exponent. Defaults to 65537 . Returns: RSAKeyPair \u2013 The generated RSA key pair.","title":"generate"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAPrivateKey","text":"Bases: CryptoPrivateKey Represents an RSA cryptographic key pair.","title":"RSAPrivateKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAPrivateKey.from_cryptography","text":"from_cryptography(key: rsa . RSAPrivateKey ) -> RSAPrivateKey Create an RSA private key from a cryptography key. Parameters: key ( rsa . RSAPrivateKey ) \u2013 The cryptography private key. Returns: RSAPrivateKey \u2013 An RSAPrivateKey object","title":"from_cryptography"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAPublicKey","text":"Bases: CryptoPublicKey Represents an RSA cryptographic key pair.","title":"RSAPublicKey"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAPublicKey.der_bytes","text":"der_bytes: bytes Property to get the DER encoding of the public key. Returns: bytes ( bytes ) \u2013 The DER encoded public key.","title":"der_bytes"},{"location":"types/key_pair/#pki_tools.types.key_pair.RSAPublicKey.from_cryptography","text":"from_cryptography(key: rsa . RSAPublicKey ) -> RSAPublicKey Create an RSA public key from a cryptography public key. Parameters: key ( rsa . RSAPublicKey ) \u2013 The public cryptography key. Returns: RSAPublicKey \u2013 The RSA public key","title":"from_cryptography"},{"location":"types/name/","text":"Name \u00b6 Bases: CryptoParser Name type describes e.g. certificate subject or issuer. The attributes are following the RFC5280#Section-4.1.2.4 Note that every attribute is a list of string in order to support multivalued RDNs. Attributes: c ( List [ str ] ) \u2013 Country Name (2.5.4.6) o ( List [ str ] ) \u2013 Organization Name (2.5.4.10) ou ( List [ str ] ) \u2013 Organizational Unit Name (2.5.4.11) dnq ( List [ str ] ) \u2013 Distinguished Name Qualifier (2.5.4.46) s ( List [ str ] ) \u2013 State Or Province Name (2.5.4.8) cn ( List [ str ] ) \u2013 Common Name (2.5.4.3) serial ( List [ str ] ) \u2013 Serial Number (2.5.4.5) ln ( List [ str ] ) \u2013 Locality Name (2.5.4.7) t ( List [ str ] ) \u2013 Title (2.5.4.12) sn ( List [ str ] ) \u2013 Surname (2.5.4.4) gn ( List [ str ] ) \u2013 Given Name (2.5.4.42) i ( List [ str ] ) \u2013 Initials (2.5.4.43) p ( List [ str ] ) \u2013 Pseudonym (2.5.4.65) gq ( List [ str ] ) \u2013 Generation Qualifier (2.5.4.44) dc ( List [ str ] ) \u2013 Domain Component (0.9.2342.19200300.100.1.25) from_cryptography classmethod \u00b6 from_cryptography(name: x509 . Name ) -> Name Create a Name instance from a cryptography Name object. Parameters: name ( x509 . Name ) \u2013 The cryptography Name object. Returns: Name \u2013 The Name instance.","title":"Name"},{"location":"types/name/#pki_tools.types.name.Name","text":"Bases: CryptoParser Name type describes e.g. certificate subject or issuer. The attributes are following the RFC5280#Section-4.1.2.4 Note that every attribute is a list of string in order to support multivalued RDNs. Attributes: c ( List [ str ] ) \u2013 Country Name (2.5.4.6) o ( List [ str ] ) \u2013 Organization Name (2.5.4.10) ou ( List [ str ] ) \u2013 Organizational Unit Name (2.5.4.11) dnq ( List [ str ] ) \u2013 Distinguished Name Qualifier (2.5.4.46) s ( List [ str ] ) \u2013 State Or Province Name (2.5.4.8) cn ( List [ str ] ) \u2013 Common Name (2.5.4.3) serial ( List [ str ] ) \u2013 Serial Number (2.5.4.5) ln ( List [ str ] ) \u2013 Locality Name (2.5.4.7) t ( List [ str ] ) \u2013 Title (2.5.4.12) sn ( List [ str ] ) \u2013 Surname (2.5.4.4) gn ( List [ str ] ) \u2013 Given Name (2.5.4.42) i ( List [ str ] ) \u2013 Initials (2.5.4.43) p ( List [ str ] ) \u2013 Pseudonym (2.5.4.65) gq ( List [ str ] ) \u2013 Generation Qualifier (2.5.4.44) dc ( List [ str ] ) \u2013 Domain Component (0.9.2342.19200300.100.1.25)","title":"Name"},{"location":"types/name/#pki_tools.types.name.Name.from_cryptography","text":"from_cryptography(name: x509 . Name ) -> Name Create a Name instance from a cryptography Name object. Parameters: name ( x509 . Name ) \u2013 The cryptography Name object. Returns: Name \u2013 The Name instance.","title":"from_cryptography"},{"location":"types/ocsp/","text":"OCSPRequest \u00b6 Bases: InitCryptoParser Represents an OCSP request. Attributes: hash_algorithm ( HashAlgorithm ) \u2013 The hash algorithm. serial_number ( Optional [ int ] ) \u2013 The serial number. extensions ( Optional [ Extensions ] ) \u2013 The extensions. Examples \u00b6 Create OCSP Request \u00b6 cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(RSAKeyPair.generate(), SHA512) from pki_tools import OCSPRequest req = OCSPRequest( hash_algorithm=SHA512.algorithm, serial_number=cert.serial_number ) req.create(cert, cert) print(req.pem_string) Print output Serial Number: '1419969360' algorithm: SHA512 InitCryptoParser.from_file \u00b6 req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- from pki_tools import OCSPRequest req = OCSPRequest.from_file(\"req.pem\") print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512 InitCryptoParser.from_pem_string \u00b6 pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512 InitCryptoParser.to_file \u00b6 pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) req.to_file(\"out_req.pem\") out_req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST----- pem_bytes property \u00b6 pem_bytes: bytes Returns the PEM bytes of the object Returns: bytes \u2013 The PEM bytes. request_path property \u00b6 request_path: str The request path of the OCSP Response. Returns: str \u2013 The request path. create \u00b6 create(cert: Certificate , issuer_cert: Certificate ) Creates an OCSP request. Parameters: cert ( Certificate ) \u2013 The certificate. issuer_cert ( Certificate ) \u2013 The issuer of the OCSP Response. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: ocsp . OCSPRequest ) -> OCSPRequest Constructs an OCSPRequest object from a cryptography OCSPRequest object. Parameters: crypto_obj ( ocsp . OCSPRequest ) \u2013 The cryptography OCSPRequest object. Returns: OCSPRequest \u2013 The constructed OCSPRequest object. Example \u00b6 crypto_ocsp_request from cryptography.hazmat.primitives.hashes import SHA256 from cryptography.x509 import ocsp, load_pem_x509_certificate pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPRequestBuilder() builder = builder.add_certificate(cert, cert, SHA256()) crypto_ocsp_request = builder.build() from pki_tools import OCSPRequest ocsp_request = OCSPRequest.from_cryptography(crypto_ocsp_request) print(ocsp_request) Print output Extensions: {} Serial Number: '206599758257502475477849880650720292246800486522' algorithm: SHA256 OCSPResponse \u00b6 Bases: InitCryptoParser Represents an OCSP response. Attributes: response_status ( OcspResponseStatus ) \u2013 The OCSP response status. certificate_status ( Optional [ OcspCertificateStatus ] ) \u2013 The OCSP certificate status. issuer_key_hash ( Optional [ str ] ) \u2013 The issuer key hash. revocation_time ( Optional [ datetime ] ) \u2013 The revocation time. Examples \u00b6 Create OCSP Response \u00b6 cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert_key_pair = RSAKeyPair.generate() cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(cert_key_pair, SHA512) from pki_tools import OCSPResponse, OcspResponseStatus, OcspCertificateStatus res = OCSPResponse( response_status=OcspResponseStatus.SUCCESSFUL, certificate_status=OcspCertificateStatus.REVOKED, issuer_key_hash=\"ISSUER_HASH\", revocation_time=datetime.datetime.now(), ) res.sign(cert, cert, SHA512, cert_key_pair.private_key, SHA512) print(res) Print output Certificate Status: REVOKED Issuer Key Hash: ISSUER_HASH Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:44:07.812235 InitCryptoParser.from_file \u00b6 res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- from pki_tools import OCSPResponse req = OCSPResponse.from_file(\"res.pem\") print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00 InitCryptoParser.from_pem_string \u00b6 pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00 InitCryptoParser.to_file \u00b6 pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) req.to_file(\"out_res.pem\") out_res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- is_revoked property \u00b6 is_revoked: bool Checks if the certificate is revoked. Returns: bool \u2013 True if the certificate is revoked, False otherwise. is_successful property \u00b6 is_successful: bool Checks if the OCSP response is successful. Returns: bool \u2013 True if the response is successful, False otherwise. pem_bytes property \u00b6 pem_bytes: bytes Returns the PEM bytes of the object Returns: bytes \u2013 The PEM bytes. tbs_bytes property \u00b6 tbs_bytes: bytes Returns the bytes to be singed of the OCSP response. Returns: bytes ( bytes ) \u2013 The TBS bytes. from_cryptography classmethod \u00b6 from_cryptography(crypto_ocsp_response: ocsp . OCSPResponse ) -> OCSPResponse Constructs an OCSPResponse object from a cryptography OCSPResponse object. Parameters: crypto_ocsp_response ( ocsp . OCSPResponse ) \u2013 The cryptography OCSPResponse object. Returns: OCSPResponse ( OCSPResponse ) \u2013 The constructed OCSPResponse object. Example \u00b6 crypto_res import datetime from cryptography.hazmat.primitives import hashes, serialization from cryptography.x509 import ocsp, load_pem_x509_certificate cert_private_key = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAqrALl8McEXwwKIgIo9sHhGht+VCVExRnBmkEmAKTnRc9iZVV Q+slFnobc2y5p3TlBtLEfXed5yzak1NhnzLkfDQYrtUk6X5RREcsOohHT7AxuW/i K3FyZo5PXM5asFf/DQSH6lp/XJPq0g/seUAvDNxbhLbjx5wjGe+6sCsLB/OSbBRz Vmflb8p1XwmYr4LthhPE3kkLfCENVQPLoJOdwMw2qlqG63Qdwvj+wq+smIAauZDO DtxfzWZ82ftH3+qMseiveMPR2Szxz9qi2kSnsHTjdHRlEe5WzHOwa6U/HlPBOVHt IANxm0PHo8Np47ajTG3BUif6C/XUE5Co/Dz5awIDAQABAoIBADYVKN8x2atqo6G8 FKzCglvAcRQdpdaRUOGVlfiKXHZafkuhTw6Bq9M25orIqPy3y7fBQbQVmik9K5ah xV1ZlU8LfMSs0ZDQTvSo7okvVBUaWW8N1eZ5AEwhjGD2G4MjprNbu6sUeKV/Utiz ZfS3UxEqoy7mej7tqKuXq5oVUV33mUwXiT+gx+X688iIlnSMt0XvwrVGfpDnGPqJ DUnNOli6dUDhvmfvs7KH8H8MLPHu9hK1Uq8zm7sMGS3WHb4E0krjNFZtkByy5cvk M4k1QpCl7Q4ym3lpOBoyXkFF/Mdi56Ufvo+75FwGqGamREoZect6TaMRvoDmpVcS I9EemdECgYEA269jlNFz/0fBgZX0mPgaJS7KTiUsTQ/HBMEW7lYLEwCPgQBATR2M mJAJtCdwWvyVu79cRu9ShqoK83tUVzsXYFu1lWE0m/r6qao7p9Pam9jLr6qmLngK wsAX44LatM6duNg6BSD2EteTWArJYOOeRrZnkeb8KKjDelqKcYxHAFsCgYEAxucw JAeQFxCoD+sgtfSapVulASyATTvTfFM6DyqcBMTsm5YU4lik2RuKV5T7hsRCsJGu rSYnstOVkx9B1gHaLYrUF6MYwUcKfJTFhOwutrYqXi1Vsoq3gUrDleGFT5s3+iPR VnHCjkJz/fDOdLgaCiLRBMoclFY1B2SLwzRWODECgYA9f0mXHVMlgUbQKdRBBiL7 ia+kVI+kOuhxkkQDEB8lgKCrchCOBdmX06qDvg6byd14o0cHrHMjs3JBWqLvkGEo 3kNkv8NkbsvAtyDgCFRIEFZkpJbEp2ILxo5pZ/YlazmHxy/mw6Ve/O4IVWyuLMnf 7avskgbAsw2VsMbUpnoxxQKBgHdhdTR60ZH2bli3kDeFq3gKLFwrAIramJGrRlKq CWCXbUfo6Xn9KFwiuoLcqab2jux5U/UazIL5mXHnNdWj4Paqt6fEPWxsHjAt/utL 8rG5Xm6OGTyDI6bXX9LKu//OsudQrimLN/G4kvPcn53Qjdh9kySjxkmGAGgCghxU gldRAoGAWqY4tm8+HjtU0iSnVm+SetjSPxeTeGe9HUU6oM8kalshKLHjs2SdLJAB 1Zc4hUoZuvfIfX63XdshcGZe8wD2P2+ZFxNwnS0XxpwfQto3sTZZWiy8VezPy+js o4E3mb1jZDQvmXey9tE73hGG4RrBNeHsjywfUs5pKHEOOEqKgEQ= -----END RSA PRIVATE KEY----- \"\"\" crypto_private_key = serialization.load_pem_private_key( cert_private_key, password=None ) pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUL/5wxBEYcnkrAfHje6sDrdv9knMwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTkyMzQ1MzlaFw0yNDAzMjEy MzQ1MzlaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQCqsAuXwxwRfDAoiAij2weEaG35UJUTFGcGaQSYApOdFz2JlVVD 6yUWehtzbLmndOUG0sR9d53nLNqTU2GfMuR8NBiu1STpflFERyw6iEdPsDG5b+Ir cXJmjk9czlqwV/8NBIfqWn9ck+rSD+x5QC8M3FuEtuPHnCMZ77qwKwsH85JsFHNW Z+VvynVfCZivgu2GE8TeSQt8IQ1VA8ugk53AzDaqWobrdB3C+P7Cr6yYgBq5kM4O 3F/NZnzZ+0ff6oyx6K94w9HZLPHP2qLaRKewdON0dGUR7lbMc7BrpT8eU8E5Ue0g A3GbQ8ejw2njtqNMbcFSJ/oL9dQTkKj8PPlrAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAKcfkel3elnmZN9vblXfc3nf6AkEpaRhAtjIkPLA9EY6vJCGm6ysjQinHlb+ oOsC+S+1c22Bc8z+b1K8GHkV8EZf9c70WmFTKwSB0JkyQ1xyx9jcPm0al0zxaXQX XertQuzhObayPy8hMbV6Kwmihf0BrR4kwUQFWMAzZ98J5c/jY5UTvEhLN8ntt5k5 IwJofRuEMBmEtRkFR2Qt1K3GJv4Aid94hD+bBOBKZV8MTvRjrU64HOKA25/TEmyf hIRtzvQkCh9z3S2/+zfYKsmDtENWD7dJLw2Ss9cqrJObeYcjjVvDgSQyt1csMtPr 6Y5Qqajflelt51pd55TqVc8d1Js= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPResponseBuilder() builder = builder.add_response( cert=cert, issuer=cert, algorithm=hashes.SHA256(), cert_status=ocsp.OCSPCertStatus.GOOD, this_update=datetime.datetime.now(), next_update=datetime.datetime.now(), revocation_time=None, revocation_reason=None, ).responder_id(ocsp.OCSPResponderEncoding.HASH, cert) crypto_res = builder.sign(crypto_private_key, hashes.SHA256()) from pki_tools import OCSPResponse res = OCSPResponse.from_cryptography(crypto_res) print(res) Print output Certificate Status: GOOD Issuer Key Hash: 975ECC737818C143DD1110ED04BFD8FB76AF836F360D8F776FF44C19AF4C56FC Response Status: SUCCESSFUL hash_with_alg \u00b6 hash_with_alg(der_key: bytes ) -> str Hashes a DER key bytes with the algorithm of the OCSP response. Parameters: der_key ( bytes ) \u2013 The DER key. Returns: str ( str ) \u2013 The hashed key. sign \u00b6 sign(cert: Certificate , issuer: Certificate , response_algorithm: SignatureAlgorithm , private_key: CryptoPrivateKey , signature_algorithm: Optional [ SignatureAlgorithm ] = None) Signs the OCSP response. Parameters: cert ( Certificate ) \u2013 The certificate. issuer ( Certificate ) \u2013 The issuer certificate. response_algorithm ( SignatureAlgorithm ) \u2013 The signature algorithm for the response. private_key ( CryptoPrivateKey ) \u2013 The private key to sign the response. signature_algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 The signature algorithm. OcspCertificateStatus \u00b6 Bases: Enum Enumeration of OCSP certificate statuses. OcspResponseStatus \u00b6 Bases: Enum Enumeration of OCSP response statuses.","title":"OCSP"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest","text":"Bases: InitCryptoParser Represents an OCSP request. Attributes: hash_algorithm ( HashAlgorithm ) \u2013 The hash algorithm. serial_number ( Optional [ int ] ) \u2013 The serial number. extensions ( Optional [ Extensions ] ) \u2013 The extensions.","title":"OCSPRequest"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest--examples","text":"","title":"Examples"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest--create-ocsp-request","text":"cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(RSAKeyPair.generate(), SHA512) from pki_tools import OCSPRequest req = OCSPRequest( hash_algorithm=SHA512.algorithm, serial_number=cert.serial_number ) req.create(cert, cert) print(req.pem_string) Print output Serial Number: '1419969360' algorithm: SHA512","title":"Create OCSP Request"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest--initcryptoparserfrom_file","text":"req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- from pki_tools import OCSPRequest req = OCSPRequest.from_file(\"req.pem\") print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512","title":"InitCryptoParser.from_file"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest--initcryptoparserfrom_pem_string","text":"pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDxuEQwiwNp5nD/Qc/BXaFEWVE7EPBp9WA/65jQSZcEmCO665C+92G+BPaoI/EE Fl+npz50sv7HrqDeJrU+WZCFAhRPA+Kc1W3fBuNfGzu5tzF2tjo7Yw== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) print(req) Print output Extensions: {} Serial Number: '451096913875044778748831451124639911061942319971' algorithm: SHA512","title":"InitCryptoParser.from_pem_string"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest--initcryptoparserto_file","text":"pem pem = \"\"\" -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST----- \"\"\" from pki_tools import OCSPRequest req = OCSPRequest.from_pem_string(pem) req.to_file(\"out_req.pem\") out_req.pem -----BEGIN OCSP REQUEST----- MIG1MIGyMIGvMIGsMIGpMA0GCWCGSAFlAwQCAwUABEB6/1zxTH1hbenJdMcinslv asdow/1VPLNqVdaDuD7gesgzTv6pMU1PVc1OwtvuncM+afDNXnWEWgiAoFXSDfFQ BEDnCmRUwFymLe1CkhH/iY+y03tK/R5ACKvX2BSe/sWnXrHtW4whiQowmpxQPlvN od+22kNsyj67c0Rb/m76j/gSAhRX1AhPCGDVeO5pEcsQ+BDt4x5LMQ== -----END OCSP REQUEST-----","title":"InitCryptoParser.to_file"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest.pem_bytes","text":"pem_bytes: bytes Returns the PEM bytes of the object Returns: bytes \u2013 The PEM bytes.","title":"pem_bytes"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest.request_path","text":"request_path: str The request path of the OCSP Response. Returns: str \u2013 The request path.","title":"request_path"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest.create","text":"create(cert: Certificate , issuer_cert: Certificate ) Creates an OCSP request. Parameters: cert ( Certificate ) \u2013 The certificate. issuer_cert ( Certificate ) \u2013 The issuer of the OCSP Response.","title":"create"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest.from_cryptography","text":"from_cryptography(crypto_obj: ocsp . OCSPRequest ) -> OCSPRequest Constructs an OCSPRequest object from a cryptography OCSPRequest object. Parameters: crypto_obj ( ocsp . OCSPRequest ) \u2013 The cryptography OCSPRequest object. Returns: OCSPRequest \u2013 The constructed OCSPRequest object.","title":"from_cryptography"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPRequest.from_cryptography--example","text":"crypto_ocsp_request from cryptography.hazmat.primitives.hashes import SHA256 from cryptography.x509 import ocsp, load_pem_x509_certificate pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUJDBA6chIz7alIJGj//DNL7Pq0HowDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTYxMzQzNTdaFw0yNDAzMTcx MzQzNTdaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQDDtBdJp6oYQSIBuefvRphiau2GFGlPNvnyAm7DcVHLREiSSPX2 Ov8Krkg9/iqoZS3lcmEgj/BQMyySpJt+5Ggo60pbJBWHR86+jLBCwu687OAsfGtz DQPN5xSWnC4K0OaUDm2doaGMcffzLL65ry/HV1XaRxxkK6HuZDt9VtyyrvSyXvMT N0CuenLPx2b+t3owjg9wrCZghBsIQWkhCQiCN35UbEuZ3Wv3H1ezulNe0/r782NB TXEmL6qGe/yx+//23vbmzIDar8UYEKrFNZ1yiugNWXLJKxwmxIyNtLr29MX5jrY+ yFxup5D0JTDyKRINq+dtzzLgxzPoOzMzEDZvAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBADHeiK+JB6Z25afqGVSa1oIGEvCo8mi50/tcT+lH03Jt5x+bAKgPJGI8Gew/ 0ko7JU3O8Sy3nTrVnLcgKSJiot6t7DMhWOSKTcuJTCOsr2WDgJQvF49yZfg+f5df AWwXkraTwjJ0RoIHN/Kp0TZvgAlZhKkHFNnqT2laubjMIzeF6k/3o6HZCfBV83fu YbzBK6rQjzFklxBN+ml2XX1aBMKYkqjbsfLpl7mAKUiZ58jxu6/FGTh6O8ffrr9z iQBRwByulMBGxzitq/EUoTEeKvtiX5WFTetE19EE7Ojzy6c6qkNlwCjK49WF6smA 2IBk2TPLyVH4LeRc/XQi+Oj7ak0= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPRequestBuilder() builder = builder.add_certificate(cert, cert, SHA256()) crypto_ocsp_request = builder.build() from pki_tools import OCSPRequest ocsp_request = OCSPRequest.from_cryptography(crypto_ocsp_request) print(ocsp_request) Print output Extensions: {} Serial Number: '206599758257502475477849880650720292246800486522' algorithm: SHA256","title":"Example"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse","text":"Bases: InitCryptoParser Represents an OCSP response. Attributes: response_status ( OcspResponseStatus ) \u2013 The OCSP response status. certificate_status ( Optional [ OcspCertificateStatus ] ) \u2013 The OCSP certificate status. issuer_key_hash ( Optional [ str ] ) \u2013 The issuer key hash. revocation_time ( Optional [ datetime ] ) \u2013 The revocation time.","title":"OCSPResponse"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse--examples","text":"","title":"Examples"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse--create-ocsp-response","text":"cert import datetime from pki_tools import SHA512, Validity, Name, Certificate, RSAKeyPair cert_key_pair = RSAKeyPair.generate() cert = Certificate( subject=Name(cn=[\"Cert CN\"]), issuer=Name(cn=[\"Cert CN\"]), validity=Validity( not_before=datetime.datetime.today() - datetime.timedelta(days=1), not_after=datetime.datetime.today() + datetime.timedelta(days=1), ), ) cert.sign(cert_key_pair, SHA512) from pki_tools import OCSPResponse, OcspResponseStatus, OcspCertificateStatus res = OCSPResponse( response_status=OcspResponseStatus.SUCCESSFUL, certificate_status=OcspCertificateStatus.REVOKED, issuer_key_hash=\"ISSUER_HASH\", revocation_time=datetime.datetime.now(), ) res.sign(cert, cert, SHA512, cert_key_pair.private_key, SHA512) print(res) Print output Certificate Status: REVOKED Issuer Key Hash: ISSUER_HASH Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:44:07.812235","title":"Create OCSP Response"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse--initcryptoparserfrom_file","text":"res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- from pki_tools import OCSPResponse req = OCSPResponse.from_file(\"res.pem\") print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00","title":"InitCryptoParser.from_file"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse--initcryptoparserfrom_pem_string","text":"pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) print(req) Print output Certificate Status: REVOKED Issuer Key Hash: |- D9C3E4CD74C0AF517F3D2D331A0EC837DEB655A26721DA83F52E01CC60AA317A94C110B7CDEF06FC A308A541ECC7BAFDDEFC52D8620903B6E2B1CFE3759F8B27 Response Status: SUCCESSFUL Revocation Time: 2024-03-20 23:51:38+00:00","title":"InitCryptoParser.from_pem_string"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse--initcryptoparserto_file","text":"pem pem = \"\"\" -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE----- \"\"\" from pki_tools import OCSPResponse req = OCSPResponse.from_pem_string(pem) req.to_file(\"out_res.pem\") out_res.pem -----BEGIN OCSP RESPONSE----- MIICSAoBAKCCAkEwggI9BgkrBgEFBQcwAQEEggIuMIICKjCCARKiFgQU6+kUZ57c x5S+dU8cqKswIZDbKxEYDzIwMjQwMzIwMjI1MTM4WjCB5jCB4zCBqTANBglghkgB ZQMEAgMFAARAev9c8Ux9YW3pyXTHIp7Jb2rHaMP9VTyzalXWg7g+4HrIM07+qTFN T1XNTsLb7p3DPmnwzV51hFoIgKBV0g3xUARA2cPkzXTAr1F/PS0zGg7IN962VaJn IdqD9S4BzGCqMXqUwRC3ze8G/KMIpUHsx7r93vxS2GIJA7bisc/jdZ+LJwIUUYcX KtFyhNcL/COZA2Hu+ur4u/ChERgPMjAyNDAzMjAyMzUxMzhaGA8yMDI0MDMyMDIz NTEzOFqgERgPMjAyNDAzMjAyMzUxMzhaMA0GCSqGSIb3DQEBDQUAA4IBAQAoNRSK vPnJEB8++zC1FsfMByUAUUVDKjLjkH2ObhPtcgtd4kBVtRYhpQnLu4vS/lImhRdh 99N13uoKgfdOs7GPQjkuWLiCwirmYeHjYJ4TNzQ3wkVdpLtCQPfkx5WtU5IcD8lM aOOi+PN/rXuFo/sM0E3RV0PWu+X0zL6x1jYnVfXwc0HFHjmcALM498v2Qoet4On5 kW/Lh6+i6EUTzNWiVZ2evN7XSExqsvaXNxShAkGN1AH6M3a6DTVhDoF/948C3B/G j40SrfyIpgfKiShWP5jUS9o5U1Vk54R6PJ22mmI1ZJZGfEj9pqbcfNgUnlC7UdML 1X93HfFsCrnOMcAh -----END OCSP RESPONSE-----","title":"InitCryptoParser.to_file"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.is_revoked","text":"is_revoked: bool Checks if the certificate is revoked. Returns: bool \u2013 True if the certificate is revoked, False otherwise.","title":"is_revoked"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.is_successful","text":"is_successful: bool Checks if the OCSP response is successful. Returns: bool \u2013 True if the response is successful, False otherwise.","title":"is_successful"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.pem_bytes","text":"pem_bytes: bytes Returns the PEM bytes of the object Returns: bytes \u2013 The PEM bytes.","title":"pem_bytes"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.tbs_bytes","text":"tbs_bytes: bytes Returns the bytes to be singed of the OCSP response. Returns: bytes ( bytes ) \u2013 The TBS bytes.","title":"tbs_bytes"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.from_cryptography","text":"from_cryptography(crypto_ocsp_response: ocsp . OCSPResponse ) -> OCSPResponse Constructs an OCSPResponse object from a cryptography OCSPResponse object. Parameters: crypto_ocsp_response ( ocsp . OCSPResponse ) \u2013 The cryptography OCSPResponse object. Returns: OCSPResponse ( OCSPResponse ) \u2013 The constructed OCSPResponse object.","title":"from_cryptography"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.from_cryptography--example","text":"crypto_res import datetime from cryptography.hazmat.primitives import hashes, serialization from cryptography.x509 import ocsp, load_pem_x509_certificate cert_private_key = b\"\"\" -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEAqrALl8McEXwwKIgIo9sHhGht+VCVExRnBmkEmAKTnRc9iZVV Q+slFnobc2y5p3TlBtLEfXed5yzak1NhnzLkfDQYrtUk6X5RREcsOohHT7AxuW/i K3FyZo5PXM5asFf/DQSH6lp/XJPq0g/seUAvDNxbhLbjx5wjGe+6sCsLB/OSbBRz Vmflb8p1XwmYr4LthhPE3kkLfCENVQPLoJOdwMw2qlqG63Qdwvj+wq+smIAauZDO DtxfzWZ82ftH3+qMseiveMPR2Szxz9qi2kSnsHTjdHRlEe5WzHOwa6U/HlPBOVHt IANxm0PHo8Np47ajTG3BUif6C/XUE5Co/Dz5awIDAQABAoIBADYVKN8x2atqo6G8 FKzCglvAcRQdpdaRUOGVlfiKXHZafkuhTw6Bq9M25orIqPy3y7fBQbQVmik9K5ah xV1ZlU8LfMSs0ZDQTvSo7okvVBUaWW8N1eZ5AEwhjGD2G4MjprNbu6sUeKV/Utiz ZfS3UxEqoy7mej7tqKuXq5oVUV33mUwXiT+gx+X688iIlnSMt0XvwrVGfpDnGPqJ DUnNOli6dUDhvmfvs7KH8H8MLPHu9hK1Uq8zm7sMGS3WHb4E0krjNFZtkByy5cvk M4k1QpCl7Q4ym3lpOBoyXkFF/Mdi56Ufvo+75FwGqGamREoZect6TaMRvoDmpVcS I9EemdECgYEA269jlNFz/0fBgZX0mPgaJS7KTiUsTQ/HBMEW7lYLEwCPgQBATR2M mJAJtCdwWvyVu79cRu9ShqoK83tUVzsXYFu1lWE0m/r6qao7p9Pam9jLr6qmLngK wsAX44LatM6duNg6BSD2EteTWArJYOOeRrZnkeb8KKjDelqKcYxHAFsCgYEAxucw JAeQFxCoD+sgtfSapVulASyATTvTfFM6DyqcBMTsm5YU4lik2RuKV5T7hsRCsJGu rSYnstOVkx9B1gHaLYrUF6MYwUcKfJTFhOwutrYqXi1Vsoq3gUrDleGFT5s3+iPR VnHCjkJz/fDOdLgaCiLRBMoclFY1B2SLwzRWODECgYA9f0mXHVMlgUbQKdRBBiL7 ia+kVI+kOuhxkkQDEB8lgKCrchCOBdmX06qDvg6byd14o0cHrHMjs3JBWqLvkGEo 3kNkv8NkbsvAtyDgCFRIEFZkpJbEp2ILxo5pZ/YlazmHxy/mw6Ve/O4IVWyuLMnf 7avskgbAsw2VsMbUpnoxxQKBgHdhdTR60ZH2bli3kDeFq3gKLFwrAIramJGrRlKq CWCXbUfo6Xn9KFwiuoLcqab2jux5U/UazIL5mXHnNdWj4Paqt6fEPWxsHjAt/utL 8rG5Xm6OGTyDI6bXX9LKu//OsudQrimLN/G4kvPcn53Qjdh9kySjxkmGAGgCghxU gldRAoGAWqY4tm8+HjtU0iSnVm+SetjSPxeTeGe9HUU6oM8kalshKLHjs2SdLJAB 1Zc4hUoZuvfIfX63XdshcGZe8wD2P2+ZFxNwnS0XxpwfQto3sTZZWiy8VezPy+js o4E3mb1jZDQvmXey9tE73hGG4RrBNeHsjywfUs5pKHEOOEqKgEQ= -----END RSA PRIVATE KEY----- \"\"\" crypto_private_key = serialization.load_pem_private_key( cert_private_key, password=None ) pem_cert = b\"\"\" -----BEGIN CERTIFICATE----- MIICsDCCAZigAwIBAgIUL/5wxBEYcnkrAfHje6sDrdv9knMwDQYJKoZIhvcNAQEN BQAwEjEQMA4GA1UEAwwHQ2VydCBDTjAeFw0yNDAzMTkyMzQ1MzlaFw0yNDAzMjEy MzQ1MzlaMBIxEDAOBgNVBAMMB0NlcnQgQ04wggEiMA0GCSqGSIb3DQEBAQUAA4IB DwAwggEKAoIBAQCqsAuXwxwRfDAoiAij2weEaG35UJUTFGcGaQSYApOdFz2JlVVD 6yUWehtzbLmndOUG0sR9d53nLNqTU2GfMuR8NBiu1STpflFERyw6iEdPsDG5b+Ir cXJmjk9czlqwV/8NBIfqWn9ck+rSD+x5QC8M3FuEtuPHnCMZ77qwKwsH85JsFHNW Z+VvynVfCZivgu2GE8TeSQt8IQ1VA8ugk53AzDaqWobrdB3C+P7Cr6yYgBq5kM4O 3F/NZnzZ+0ff6oyx6K94w9HZLPHP2qLaRKewdON0dGUR7lbMc7BrpT8eU8E5Ue0g A3GbQ8ejw2njtqNMbcFSJ/oL9dQTkKj8PPlrAgMBAAEwDQYJKoZIhvcNAQENBQAD ggEBAKcfkel3elnmZN9vblXfc3nf6AkEpaRhAtjIkPLA9EY6vJCGm6ysjQinHlb+ oOsC+S+1c22Bc8z+b1K8GHkV8EZf9c70WmFTKwSB0JkyQ1xyx9jcPm0al0zxaXQX XertQuzhObayPy8hMbV6Kwmihf0BrR4kwUQFWMAzZ98J5c/jY5UTvEhLN8ntt5k5 IwJofRuEMBmEtRkFR2Qt1K3GJv4Aid94hD+bBOBKZV8MTvRjrU64HOKA25/TEmyf hIRtzvQkCh9z3S2/+zfYKsmDtENWD7dJLw2Ss9cqrJObeYcjjVvDgSQyt1csMtPr 6Y5Qqajflelt51pd55TqVc8d1Js= -----END CERTIFICATE----- \"\"\" cert = load_pem_x509_certificate(pem_cert) builder = ocsp.OCSPResponseBuilder() builder = builder.add_response( cert=cert, issuer=cert, algorithm=hashes.SHA256(), cert_status=ocsp.OCSPCertStatus.GOOD, this_update=datetime.datetime.now(), next_update=datetime.datetime.now(), revocation_time=None, revocation_reason=None, ).responder_id(ocsp.OCSPResponderEncoding.HASH, cert) crypto_res = builder.sign(crypto_private_key, hashes.SHA256()) from pki_tools import OCSPResponse res = OCSPResponse.from_cryptography(crypto_res) print(res) Print output Certificate Status: GOOD Issuer Key Hash: 975ECC737818C143DD1110ED04BFD8FB76AF836F360D8F776FF44C19AF4C56FC Response Status: SUCCESSFUL","title":"Example"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.hash_with_alg","text":"hash_with_alg(der_key: bytes ) -> str Hashes a DER key bytes with the algorithm of the OCSP response. Parameters: der_key ( bytes ) \u2013 The DER key. Returns: str ( str ) \u2013 The hashed key.","title":"hash_with_alg"},{"location":"types/ocsp/#pki_tools.types.ocsp.OCSPResponse.sign","text":"sign(cert: Certificate , issuer: Certificate , response_algorithm: SignatureAlgorithm , private_key: CryptoPrivateKey , signature_algorithm: Optional [ SignatureAlgorithm ] = None) Signs the OCSP response. Parameters: cert ( Certificate ) \u2013 The certificate. issuer ( Certificate ) \u2013 The issuer certificate. response_algorithm ( SignatureAlgorithm ) \u2013 The signature algorithm for the response. private_key ( CryptoPrivateKey ) \u2013 The private key to sign the response. signature_algorithm ( Optional [ SignatureAlgorithm ] , default: None ) \u2013 The signature algorithm.","title":"sign"},{"location":"types/ocsp/#pki_tools.types.ocsp.OcspCertificateStatus","text":"Bases: Enum Enumeration of OCSP certificate statuses.","title":"OcspCertificateStatus"},{"location":"types/ocsp/#pki_tools.types.ocsp.OcspResponseStatus","text":"Bases: Enum Enumeration of OCSP response statuses.","title":"OcspResponseStatus"},{"location":"types/signature_algorithm/","text":"ECDSAPadding \u00b6 Bases: Padding Represents ECDSA padding. Attributes: algorithm ( HashAlgorithm ) \u2013 The hash algorithm. prehashed ( bool ) \u2013 Indicates if the data is prehashed. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: ec . ECDSA ) -> ECDSAPadding Constructs an ECDSAPadding object from a cryptography ECDSA object. Parameters: crypto_obj ( ec . ECDSA ) \u2013 The cryptography ECDSA object. Returns: ECDSAPadding \u2013 The constructed ECDSAPadding object. HashAlgorithm \u00b6 Bases: CryptoParser Represents a hash algorithm. Attributes: name ( HashAlgorithmName ) \u2013 The name of the hash algorithm. block_size ( Optional [ int ] ) \u2013 The block size of the hash algorithm. from_cryptography classmethod \u00b6 from_cryptography(x509_obj: hashes . HashAlgorithm ) -> HashAlgorithm Constructs a HashAlgorithm object from a cryptography HashAlgorithm object. Parameters: x509_obj ( hashes . HashAlgorithm ) \u2013 The cryptography HashAlgorithm object. Returns: HashAlgorithm \u2013 The constructed HashAlgorithm object. HashAlgorithmName \u00b6 Bases: Enum Enumeration of hash algorithm names. PKCS1v15Padding \u00b6 Bases: Padding Represents PKCS1v15 padding. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: padding . PKCS1v15 ) -> PKCS1v15Padding Constructs a PKCS1v15Padding object from a cryptography PKCS1v15 object. Parameters: crypto_obj ( padding . PKCS1v15 ) \u2013 The cryptography PKCS1v15 object. Returns: PKCS1v15Padding \u2013 The constructed PKCS1v15Padding object. PSSPadding \u00b6 Bases: Padding Represents PSS padding. Attributes: mgf ( HashAlgorithm ) \u2013 The mask generation function. length ( Union [ int , PSSPaddingLenght ] ) \u2013 The length of the padding. from_cryptography classmethod \u00b6 from_cryptography(crypto_obj: padding . PSS ) -> PSSPadding Constructs a PSSPadding object from a cryptography PSS object. Parameters: crypto_obj ( padding . PSS ) \u2013 The cryptography PSS object. Returns: PSSPadding \u2013 The constructed PSSPadding object. PSSPaddingLenght \u00b6 Bases: Enum Enumeration of PSS padding lengths. Padding \u00b6 Bases: CryptoParser , ABC Abstract base class representing padding. SignatureAlgorithm \u00b6 Bases: BaseModel Represents a signature algorithm. Attributes: algorithm ( HashAlgorithm ) \u2013 The hash algorithm. parameters ( Optional [ Union [ PSSPadding , PKCS1v15Padding , ECDSAPadding ]] ) \u2013 The parameters of the signature algorithm. from_cryptography classmethod \u00b6 from_cryptography(algorithm: hashes . HashAlgorithm , parameters: Union [ padding . PSS , padding . PKCS1v15 , ec . ECDSA ] = None) -> SignatureAlgorithm Constructs a SignatureAlgorithm object from cryptography objects. Parameters: algorithm ( hashes . HashAlgorithm ) \u2013 The hash algorithm. parameters ( Union [ padding . PSS , padding . PKCS1v15 , ec . ECDSA ] , default: None ) \u2013 The parameters. Returns: SignatureAlgorithm \u2013 The constructed SignatureAlgorithm object.","title":"SignatureAlgorithm"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.ECDSAPadding","text":"Bases: Padding Represents ECDSA padding. Attributes: algorithm ( HashAlgorithm ) \u2013 The hash algorithm. prehashed ( bool ) \u2013 Indicates if the data is prehashed.","title":"ECDSAPadding"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.ECDSAPadding.from_cryptography","text":"from_cryptography(crypto_obj: ec . ECDSA ) -> ECDSAPadding Constructs an ECDSAPadding object from a cryptography ECDSA object. Parameters: crypto_obj ( ec . ECDSA ) \u2013 The cryptography ECDSA object. Returns: ECDSAPadding \u2013 The constructed ECDSAPadding object.","title":"from_cryptography"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.HashAlgorithm","text":"Bases: CryptoParser Represents a hash algorithm. Attributes: name ( HashAlgorithmName ) \u2013 The name of the hash algorithm. block_size ( Optional [ int ] ) \u2013 The block size of the hash algorithm.","title":"HashAlgorithm"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.HashAlgorithm.from_cryptography","text":"from_cryptography(x509_obj: hashes . HashAlgorithm ) -> HashAlgorithm Constructs a HashAlgorithm object from a cryptography HashAlgorithm object. Parameters: x509_obj ( hashes . HashAlgorithm ) \u2013 The cryptography HashAlgorithm object. Returns: HashAlgorithm \u2013 The constructed HashAlgorithm object.","title":"from_cryptography"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.HashAlgorithmName","text":"Bases: Enum Enumeration of hash algorithm names.","title":"HashAlgorithmName"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.PKCS1v15Padding","text":"Bases: Padding Represents PKCS1v15 padding.","title":"PKCS1v15Padding"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.PKCS1v15Padding.from_cryptography","text":"from_cryptography(crypto_obj: padding . PKCS1v15 ) -> PKCS1v15Padding Constructs a PKCS1v15Padding object from a cryptography PKCS1v15 object. Parameters: crypto_obj ( padding . PKCS1v15 ) \u2013 The cryptography PKCS1v15 object. Returns: PKCS1v15Padding \u2013 The constructed PKCS1v15Padding object.","title":"from_cryptography"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.PSSPadding","text":"Bases: Padding Represents PSS padding. Attributes: mgf ( HashAlgorithm ) \u2013 The mask generation function. length ( Union [ int , PSSPaddingLenght ] ) \u2013 The length of the padding.","title":"PSSPadding"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.PSSPadding.from_cryptography","text":"from_cryptography(crypto_obj: padding . PSS ) -> PSSPadding Constructs a PSSPadding object from a cryptography PSS object. Parameters: crypto_obj ( padding . PSS ) \u2013 The cryptography PSS object. Returns: PSSPadding \u2013 The constructed PSSPadding object.","title":"from_cryptography"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.PSSPaddingLenght","text":"Bases: Enum Enumeration of PSS padding lengths.","title":"PSSPaddingLenght"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.Padding","text":"Bases: CryptoParser , ABC Abstract base class representing padding.","title":"Padding"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.SignatureAlgorithm","text":"Bases: BaseModel Represents a signature algorithm. Attributes: algorithm ( HashAlgorithm ) \u2013 The hash algorithm. parameters ( Optional [ Union [ PSSPadding , PKCS1v15Padding , ECDSAPadding ]] ) \u2013 The parameters of the signature algorithm.","title":"SignatureAlgorithm"},{"location":"types/signature_algorithm/#pki_tools.types.signature_algorithm.SignatureAlgorithm.from_cryptography","text":"from_cryptography(algorithm: hashes . HashAlgorithm , parameters: Union [ padding . PSS , padding . PKCS1v15 , ec . ECDSA ] = None) -> SignatureAlgorithm Constructs a SignatureAlgorithm object from cryptography objects. Parameters: algorithm ( hashes . HashAlgorithm ) \u2013 The hash algorithm. parameters ( Union [ padding . PSS , padding . PKCS1v15 , ec . ECDSA ] , default: None ) \u2013 The parameters. Returns: SignatureAlgorithm \u2013 The constructed SignatureAlgorithm object.","title":"from_cryptography"}]}